<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>通信故事</title>
      <link href="/2024/09/18/%E9%80%9A%E4%BF%A1/"/>
      <url>/2024/09/18/%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="Story-of-Communication-通信故事"><a href="#Story-of-Communication-通信故事" class="headerlink" title="Story of Communication 通信故事"></a>Story of Communication 通信故事</h2><p>通信，也就聊天。主要解决远距离沟通的问题。</p><h3 id="电话的故事"><a href="#电话的故事" class="headerlink" title="电话的故事"></a>电话的故事</h3><blockquote><p>电话是将人声转换成电流信号并传递至远方，再将电流转换人声音的通信装备。</p></blockquote><pre class="mermaid">    timeline    人类早期: 烟雾信号    1834: 安东尼奥•梅乌奇        : 【希望】 声音传递到更远地方        : 传声管    1837: 查尔斯•佩奇【美】        : 【研发】 将声音转换为电流的方法    1870: 亚力山大•贝尔/沃森        : 【思考】 将人声转换成电流    1876: 贝尔        : 在费城博览会展示电话机</pre><blockquote><p>传声管：一种中空的管子。传声管两端有点儿像三角帽。所以即使在无处说话的声音也能听清楚。</p></blockquote><hr><pre class="mermaid"> flowchart LR 声音 --> 电流 电流 --> 声音</pre><blockquote><p>电流通过电线传播，那么声音也可以通过电线传播</p></blockquote><hr><p>接收机 - 振动膜<br>发信机<br>电磁铁 - 振动 - 电流还原成声音</p><hr><blockquote><p>电磁铁可以将电流还原成声音，电磁铁只有在通电的情况下，才具有磁性。电磁铁通电后，产生的磁性会拉扯振动膜；而断电后，失去磁性，会放开振动膜。振动膜的这种振动，会将电流重新还原成声音。</p></blockquote><h3 id="电报的故事"><a href="#电报的故事" class="headerlink" title="电报的故事"></a>电报的故事</h3><blockquote><p>电报是一种通过发送事先设定好的信号的通信方法。</p></blockquote><pre class="mermaid">    timeline    title Story of Communication 电报故事    1837: 塞缪尔•摩尔斯【美】        : 发明电报    1901: 伽利尔摩•马可尼        : 发明了电报    1912: 泰坦尼克号        : 船员用无线电报发报 拯救了700    1924: 阿普尔顿【英】        : 发现了电离层</pre><blockquote><p>用天线接收电波可以传递信息。<br>电报是<b>电波</b>将信号传递到很远的地方技术。发送电流信号给天线，接收电磁波。<br>电离层可以将电波反射到地面。</p></blockquote><ul><li>  —— 保持一定时间的长信号</li><li>  • 短促的点信号</li><li>  •••—••• SOS</li></ul><h3 id="互联网的故事"><a href="#互联网的故事" class="headerlink" title="互联网的故事"></a>互联网的故事</h3><blockquote><p>电脑最初是用来计算复杂的运算机器<br>互联网是为了相互交换信息而将电脑串联起来的通信网</p></blockquote><pre class="mermaid">    timeline    title Story of Internetion 互联网故事    20世纪60年代: 约瑟夫•利克莱德【美】        : 实现互联网通信    1901: 四个研究机构和大学 加利福尼亚州立大学 斯坦福研究所        : 阿帕网 互联网鼻祖    1971: 雷•汤姆林森        : 研发出电子邮件技术    1989: 蒂姆•伯纳斯•李        : 万维网</pre><p>www 万维网 在全球进行信息传输<br>.com 国际化机构 .cn 表示中国的网站</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2024/01/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2024/01/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>软件工程领域一种广为人知的设计模式，<font color="#f33">抽象了创建对象的具体过程。</font> ECMAScript 2005 以前没有类，<u>用函数封装特定接口创建对象。</u><br><a href="http://helenzhanglp.github.io/2019/03/21/JavaScript-Object-Oriented/#factoryPattern">具体实例见——JavaScript Object Oriented——工厂模式解决复用</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器——HtmlDocument 渲染</title>
      <link href="/2024/01/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E2%80%94HtmlDocument%E6%B8%B2%E6%9F%93/"/>
      <url>/2024/01/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E2%80%94HtmlDocument%E6%B8%B2%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器渲染过程"><a href="#浏览器渲染过程" class="headerlink" title="浏览器渲染过程"></a>浏览器渲染过程</h2><pre class="mermaid">graph TB    subgraph parse        parseCss(解析 css)        parseHtml(解析 html)        parseJavasript(解析 Javascript)    end    start(解析 HTML 文档)    start-->parseHtml    start-->parseCss    start-->parseJavasript    parseCss-->cssDom(生成 CSSOM)    parseHtml-->htmlDom(生成 htmlDom)    cssDom-->renderTree(根据生成的 Dom 和 CSSOM 构成渲染树 Render tree)    htmlDom-->renderTree    renderTree-->layout(layout-布局排列计算)    layout-->paint(paint-绘制页面)</pre><p>即：html 文档，浏览器解析为 CSSOM + HtmlDom，再由 CSSOM + HtmlDom 构建 renderTree, 浏览器再根据渲染树重新计算、布局，最后渲染到屏幕上。</p><h3 id="重排"><a href="#重排" class="headerlink" title="重排"></a>重排</h3><blockquote><p>浏览器第一次页面渲染后，后续操作引起页面各个元素节点在页面所处位置的重新计算、重新布局的行为叫重排</p></blockquote><h3 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h3><blockquote><p>布局计算完成后，页面重新绘制，浏览器遍历渲染树，使用 UI 后端层绘制每个节点，这种行为要重绘</p></blockquote><h3 id="引起重排或重绘的一些属性"><a href="#引起重排或重绘的一些属性" class="headerlink" title="引起重排或重绘的一些属性"></a>引起重排或重绘的一些属性</h3><table><thead><tr><th>Attribute Name</th><th>Interetation</th></tr></thead><tbody><tr><td>offsetTop</td><td>read-only,当前元素的上边框相对于<code>offsetParent</code>元素内上边框的距离</td></tr><tr><td>offsetLeft</td><td>read-only,当前元素左边框相对于<code>offsetParent</code>元素内左边框的距离</td></tr><tr><td>offsetWidth</td><td>read-only,返回当前元素的布局宽度。paddingleft + paddingRight + borderLeftWidth + borderRightWidth + width</td></tr><tr><td>offsetHieght</td><td>read-only,返回当前元素的布局高度。paddingTop + paddingBottom + borderTopWidth + borderBottomWidth + height</td></tr><tr><td>scrollTop</td><td>获取或设置元素的内容垂直滚动的像素数</td></tr><tr><td>scrollLeft</td><td>获取或设置元素内容水平滚动的像素数据</td></tr><tr><td>scrollWidth</td><td>read-only,元素内容宽度的一种度量，包括因 overflow 溢出而不可见内容</td></tr><tr><td>scrollHeight</td><td>read-only,元素内容的高度的一种度量，包括因 overflow 溢出而不可见内容</td></tr><tr><td>clientTop</td><td>read-only, 返回当前元素上边框高度</td></tr><tr><td>clientLeft</td><td>read-only, 返回当前元素左边框的宽度</td></tr><tr><td>clientWidth</td><td>read-only,内联元素返回0；paddingLeft + width - scrollbarWidth + paddingRight</td></tr><tr><td>clientHeight</td><td>read-only,内联元素返回0；paddingTop + height - scrollbarHeight + paddingBottom</td></tr></tbody></table><p><img src="/images/reflow:repaint.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> browser </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端发展史</title>
      <link href="/2023/12/19/%E5%89%8D%E7%AB%AF%E5%8F%91%E5%B1%95%E5%8F%B2/"/>
      <url>/2023/12/19/%E5%89%8D%E7%AB%AF%E5%8F%91%E5%B1%95%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="页面的组成"><a href="#页面的组成" class="headerlink" title="页面的组成"></a>页面的组成</h1><pre class="mermaid"> mindmap  root[页面的组成]   html["HTML(5)构架结构"]   css["CSS(3)样式与动画"]   js[JavaScript]</pre><pre class="mermaid"> mindmap 页面的组成  布局  样式  交互</pre><pre class="mermaid"> timeline    title History of front-end[A]    1989 : web原型产生    1994 : 前端历史的起点         : 万维网(W3C)成立         : V1浏览器Navigator问世         : HTML 发布第二版    1995 : JavaScript问世    1996 : 微软发布了Jscript</pre><ul><li>1989 年Tim Berners-lee 提出个人计算机访问大量科研文献，建议在文档中链接其它文档，自此 <span class='custom-box custom-box-939'>web 原型</span></li><li>1995 年网景公司程序员 Brendan Eich 花了10天设计出了 JavaScript 语言。</li></ul><pre class="mermaid"> timeline  title History of front-end[B]    1997(6月) : ECMA-262问世    1999(12月) : ES3发布    2011 : CSS3发布         : (6月)ES5发布    2014(10月) : HTML5发布    2015(6月) : ES6发布</pre><ul><li><span class='custom-box custom-box-939'>ECMA(European Computer Manufactures Association : 欧州计算机制造联合会)</span>在 1997年6月以 JavaScript语言为基础制定了ECMAScript标准规范 <span class='custom-box custom-box-939'>ECMA-262</span>，浏览器厂商按此标准开发自己的浏览器。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CI/CD 持续集成、持续交付、持续部署</title>
      <link href="/2023/10/26/CI-CD/"/>
      <url>/2023/10/26/CI-CD/</url>
      
        <content type="html"><![CDATA[<h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><ul><li>  Continuous Integration</li><li>  Continuous Delivery</li><li>  Continuous Deployment</li></ul><h2 id="CI-CD"><a href="#CI-CD" class="headerlink" title="CI/CD"></a>CI/CD</h2><p>CI/CD 在应用开发阶段引入<strong>自动化</strong>来频繁向客户交付应用的<strong>方法</strong>。</p><blockquote><p>核心概念是<u>持续集成</u>、<u>持续交付</u>、<u>持续部署</u>。</p></blockquote><p>CI/CD 持续自动化和持续监控贯穿于应用的整个生命周期（集成、测试、交付、部署）<br>相关联的事务称为 CI/CD 管道。（开发+运维）敏捷协同。</p><p>CI/CD 是指既可能仅指<u>集成和持续交付</u>的<b>关联环节</b>。<br>           也可以指<u>持续集成、持续交付、持续部署</u>三项关联环节。<br>CI/CD 即一个流程，形象的表示为管道。</p><h2 id="CI-持续集成（Continuous-Integration）"><a href="#CI-持续集成（Continuous-Integration）" class="headerlink" title="CI 持续集成（Continuous Integration）"></a>CI 持续集成（Continuous Integration）</h2><p><strong>协同开发</strong>，多位开发人员同时处理一个应用的不同模块或功能<br><span class="custom-box-993"><b>持续集成</b>旨在帮助开发人员更加方便地将代码更改合并到主分支。</span>一旦有改动代码合并到主分支，系统会自动构建应用，并运行不同级别的自动化测试验证，确保应用正常运行。<br>如果自动化测试发现代码冲突，CI 会即时轻松地快速修复这些错误。</p>]]></content>
      
      
      
        <tags>
            
            <tag> grocery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解释型语言与编译型语言</title>
      <link href="/2023/09/22/%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80/"/>
      <url>/2023/09/22/%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="编译型语言"><a href="#编译型语言" class="headerlink" title="编译型语言"></a>编译型语言</h2><p>编译型语言是指首先将编写的代码编译成可执行文件。如 windows 系统上，首先要编译成 .exe 文件。</p><pre class="mermaid"> flowchart LR 源程序 -->|集中转换| 机器指令([机器指令]) -->|驱动机器运行| 机器</pre><h2 id="解释型语言"><a href="#解释型语言" class="headerlink" title="解释型语言"></a>解释型语言</h2><p>相对于编译型语言，解释型语言 <span class='custom-box custom-box-933'>不需要编译，程序在运行时才编译成机器语言</span>解释一条执行一条，边解释边执行。效率低。</p><pre class="mermaid"> flowchart LR 源程序 -->|逐条读取<br/>逐条转换<br/>逐条执行| 机器</pre><blockquote><p>解释型语言是为了解决<span class='custom-box custom-box-933'>编译型语言跨平台的不足</span></p></blockquote><h3 id="解释型语言-Java"><a href="#解释型语言-Java" class="headerlink" title="解释型语言 Java"></a>解释型语言 Java</h3><p><span class='custom-box custom-box-393'>Java 程序的跨平台是因 Java 虚拟机跨平台</span> </p><pre class="mermaid">  stateDiagram  JavaSource: Java 源代码(.java)  JavaByte: 字节码文件(.class)  机器码    JavaSource --> JavaByte : 编译器编译  JavaByte --> 机器码 : JIT 编译器即时编译  JavaByte --> 机器码 : Java 解释器解释执行</pre><h2 id="解释型语言与编译型语言对比"><a href="#解释型语言与编译型语言对比" class="headerlink" title="解释型语言与编译型语言对比"></a>解释型语言与编译型语言对比</h2><table><thead><tr><th>类型</th><th>原理</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>编译型语言</td><td>通过专门的编译器，将高级语言一次性编译成可被平台执行的机器语言</td><td>编译一次后，脱离开发环境可独立运行，效率高</td><td>对编译器依赖较大，可移植性差</td></tr><tr><td>解释型语言</td><td>由专门的解释器，将原程序解释成特定的平台可执行的指令</td><td>跨平台性好，通过不同的解释器，将其解释成某平台可识别的指令即可</td><td>编译和解释一起执行，效率低</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Grocery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hapi</title>
      <link href="/2023/08/16/hapi/"/>
      <url>/2023/08/16/hapi/</url>
      
        <content type="html"><![CDATA[<p>导入 joi</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Joi</span> = <span class="built_in">require</span>(<span class="string">&#x27;joi&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="Validation"><a href="#Validation" class="headerlink" title="Validation"></a>Validation</h2><p>This tutorial is compatible with hapi v17 and newer; and joi v16 and newer.<br>该教程兼容 hapi 17+ 和 joi 16+</p><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>validating data can be very helpful in making sure that your application is stable and secure</p><h2 id="Joi"><a href="#Joi" class="headerlink" title="Joi"></a>Joi</h2><h3 id="any"><a href="#any" class="headerlink" title="any"></a>any</h3><h4 id="any-required"><a href="#any-required" class="headerlink" title="any.required()"></a>any.required()</h4><p>Marks a key as required which not allow <code>undefined</code> as value. All keys are optional by default.<br>标记密钥必填不能使用 <code>undefined</code>，所有 key 默认可选。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">joi.<span class="title function_">string</span>().required()</span><br></pre></td></tr></table></figure><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>Generates a schema object that matches a string data type.<br>Joi.string() 生成一个匹配字符串数据类型的架构对象。</p><blockquote><p>Note that the empty string is not allowed and must be enabled with <code>allow(&#39;&#39;)</code>. empty string is not a valid string by default.<br>注意：空白字符串不允许使用，默认情况下不是有效字符串</p></blockquote><p><code>Joi.string().allow(&#39;&#39;)</code> 允许为空字符串<br><code>Joi.string().empty(&#39;&#39;).default(&#39;default value&#39;)</code> 为空字符串指定默认值</p><h4 id="string-alphanum"><a href="#string-alphanum" class="headerlink" title="string.alphanum()"></a>string.alphanum()</h4><p>Requires the string value to only contain a-z, A-Z, and 0-9<br>请求值只能包含 a-z, A-Z, 0-9</p><blockquote><p>Joi.string().alphanum() 当前字段验证规则为字符串只包含 a-z, A-Z, 0-9</p></blockquote><h4 id="string-min-limit-encoding"><a href="#string-min-limit-encoding" class="headerlink" title="string.min(limit, [encoding])"></a>string.min(limit, [encoding])</h4><p>Specifies the minimum number string characters where:<br>指定字符串最少包含几个字符，其中：</p><ul><li><code>limit</code> - the minimum number of string characters required or a reference.(请求或引用的字符串最少包含几个字符)</li><li><code>encoding</code> - if specified, the string length is calclulated in bytes using the provided encoding.(如果指定，使用指定的编码用字节计算字符长度)<blockquote><p>Joi.string().min(2) 验证规则为最少包含两个字符</p></blockquote></li></ul><h4 id="string-max-limit-encoding"><a href="#string-max-limit-encoding" class="headerlink" title="string.max(limit, [encoding])"></a>string.max(limit, [encoding])</h4><p>Specifies the maximum munber of string characters where:<br>指定字符字符的最大长度，其中：</p><ul><li><code>limit</code> - the maximum mumber of string characters allowed or reference.(允许或引用的字符串的最大字符数)</li><li><code>encoding</code> - if specified, the string length is calclulated in bytes using provided encoding.(如果指定，使用指定的编码方式以字节的方式计算字符串长度)<blockquote><p>Joi.string().max(10) 字符串类型，最多包含 10 个字符</p></blockquote></li></ul><h4 id="string-pattern-regex-name-options"><a href="#string-pattern-regex-name-options" class="headerlink" title="string.pattern(regex,[name | options])"></a>string.pattern(regex,[name | options])</h4><p>Defines a pattern rules where:<br>定义模式规则，其中：</p><ul><li><code>regex</code> - a regular expression object the string value must match against.(字符串值必须与正则表达式值相匹配)Note that if the pattern is a regular expression(注意：如果模式是一个正则表达式),for it to match the entire key name, it must begin with <code>^</code> and end with <code>$</code>.(为了能够匹配整个键名，必须以 ^ 开头，以 $ 结尾)</li><li><code>name</code> - optional name for patterns(useful with multiple patterns).(模式的可选名称，适用于多个模式)</li><li><code>options</code> - an optional configuration object with the following supported properties:(一个带有以下支持属性的可选配置对象)<ul><li><code>name</code> - optional pattern name (可选模式名称)</li><li><code>invert</code> - optional boolean flag. Defaults to <code>false</code> behavior. if specified <code>true</code>,the provided pattern will be disallowed instead of required.(可选的布尔标识，默认为 false，如果设置为 true. 则提供的模式将被禁用，不是必须的)</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> invertedNamedSchema = <span class="title class_">Joi</span>.<span class="title function_">string</span>().<span class="title function_">pattern</span>(<span class="regexp">/^[a-z]+$/</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;alpha&#x27;</span>, <span class="attr">invert</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">invertedNamedSchema.<span class="title function_">validate</span>(<span class="string">&#x27;lowercase&#x27;</span>); <span class="comment">// ValidationError: &quot;value&quot; with value &quot;lowercase&quot; matches the inverted alpha pattern</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库密码加密技术</title>
      <link href="/2023/08/07/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86%E6%8A%80%E6%9C%AF/"/>
      <url>/2023/08/07/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="bcryptjs"><a href="#bcryptjs" class="headerlink" title="bcryptjs"></a>bcryptjs</h2><ul><li>  加密之后的密码无法逆向破解</li><li>  同一明文密码多次加密，得到密码结果不同</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i bcryptjs</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>bcrypt.hashSync(明文密码, 随机长度) 对用户密码加密，返回对用户的密码进行加密处理的字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 bcryptjs</span></span><br><span class="line"><span class="keyword">const</span> bcrypt = <span class="built_in">require</span>(<span class="string">&#x27;bcryptjs&#x27;</span>)</span><br><span class="line"><span class="comment">// 调用 bcrypt.hashSync() </span></span><br><span class="line"><span class="keyword">const</span> pwd = bcrypt.<span class="title function_">hashSync</span>(password, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Hooks</title>
      <link href="/2023/06/15/React-Hooks/"/>
      <url>/2023/06/15/React-Hooks/</url>
      
        <content type="html"><![CDATA[<p>函数组件实现动态组件类组件的功能<br>React 最新版本 v18.2，Hook 是 React 16.8 新增特性。可以在不编写 class 的情况下使用 state 以及其他 React 特性。<br>引入 Hook 的动机——解决看起来不相关的问题<br>Hoos 是执行函数，产生函数上下文</p><h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><p>在函数组件中使用状态，并且后期基于状态修改，进而更新组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * initailValue 执行 useState 传递初始状态值</span></span><br><span class="line"><span class="comment"> * useState 返回一个数组，包括两个元素 [状态值，修改状态值的方法]</span></span><br><span class="line"><span class="comment"> *  attribute 获取的状态值</span></span><br><span class="line"><span class="comment"> *  setAttribute 修改状态值的方法</span></span><br><span class="line"><span class="comment"> *      setAttribute(value)</span></span><br><span class="line"><span class="comment"> *          修改状态值</span></span><br><span class="line"><span class="comment"> *          更新视图</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">let</span> [attribute, setAttribute] = <span class="title function_">useState</span>(initailValue)</span><br></pre></td></tr></table></figure><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数组件中使用状态，更新视图</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> [num, setNum] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleBtn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">setNum</span>(++num)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 函数组件不需要创建实例，没有 this</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleBtn&#125;</span>&gt;</span>按钮&#123;num&#125;<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关于函数组件渲染更新"><a href="#关于函数组件渲染更新" class="headerlink" title="关于函数组件渲染更新"></a>关于函数组件渲染更新</h3><pre class="mermaid"> flowchart TB subgraph ExcuteContext1    subgraph 渲染EC1        EC1["            <b style="color: #a33">// 私有变量</b>            num = 0;            setNum = function(){/* 修改状态函数 */};            handle = function(){/* 事件处理函数 */}        "] --> parse[编译JSX视图]        parse --> virtualDOM[创建VirtualDOM]        virtualDOM --> realDOM["创建真实DOM，页面渲染"]    end    subgraph handle         CLICK["            <b style="color: #a33">// 私有变量</b>            setNum(++num) <b style="color: #a33">// 修改状态 + 更新视图</b>        "] -.-> EC1    end end subgraph ExcuteContext2    subgraph 更新EC2        EC2["            <b style="color: #a33">// 私有变量</b>            num = 1;            setNum = function(){/* 修改状态函数 */};            handle = function(){/* 事件处理函数 */}        "] --> parse2[编译JSX视图]        parse2 --> virtualDOM2[创建VirtualDOM]        virtualDOM2 -->|"diff 算法"| realDOM2["创建真实DOM，页面渲染"]    end    subgraph handle2         CLICK2["            <b style="color: #a33">// 私有变量</b>            setNum(++num) <b style="color: #a33">// 修改状态 + 更新视图</b>        "] -.-> EC2    end end 渲染EC1 -->|"重新执行DOM函数，产生新的函数执行上下文"| 更新EC2</pre><h4 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h4><p><span class='custom-box custom-box-939'>点击按钮 3 秒钟之后，num 输出是几？？？</span><br><span class='custom-box custom-box-393'>答案是 0。在 ExcuteContext1 作用域下，按照作用域链，访问的到的是 num = 0；不会访问 ExcuteContext2 作用域，所以 num 也不会为1。 </span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> [num, setNum] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleBtn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">setNum</span>(++num)</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 0</span></span><br><span class="line">        &#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 函数组件不需要创建实例，没有 this</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleBtn&#125;</span>&gt;</span>按钮&#123;num&#125;<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useState-源码分析"><a href="#useState-源码分析" class="headerlink" title="useState 源码分析"></a>useState 源码分析</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@initailValue</span> 初值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> [state, setState]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> _state;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useState</span>(<span class="params">initialValue</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> _state === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">typeof</span> initailValue === <span class="string">&#x27;function&#x27;</span> ? <span class="title function_">initailValue</span>() : _state = initailValue <span class="comment">// 赋初值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setState</span>(<span class="params">value</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(_state, value)) <span class="keyword">return</span> <span class="comment">// 更新值与 state 相同，返回</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> value === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">            _state = <span class="title function_">value</span>(_state) <span class="comment">// 更新队列中保存的函数</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _state = value <span class="comment">// 修改 state</span></span><br><span class="line">        &#125;</span><br><span class="line">        ... <span class="comment">// 更新视图</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [_state, setState]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数组件处理多状态"><a href="#函数组件处理多状态" class="headerlink" title="函数组件处理多状态"></a>函数组件处理多状态</h3><ul><li>方法一，useState 不能部分修改状态<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [state, setState] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">deprecation</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">approve</span>: <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handle</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setState</span>(&#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">approve</span>: <span class="number">3</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>方法二，useState 分别初始化多个状态 <span class='custom-box custom-box-933'>【官方推荐】</span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [deprecation, setDeprecation] = <span class="title function_">useState</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> [approve, setApprove] = <span class="title function_">useState</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handle</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setDeprecation</span>(<span class="number">5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="useState-参数为函数"><a href="#useState-参数为函数" class="headerlink" title="useState 参数为函数"></a>useState 参数为函数</h3><blockquote><p>业务处理逻辑仅在第一次组件渲染时触发，更新不使用。可以对赋初值的动作进行【惰性处理】，如下代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">let</span> [number, setNumber] = <span class="title function_">useState</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;num, frequency&#125; = props, total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (!frequency) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = num; index &lt; frequency; index++) &#123;</span><br><span class="line">        total += +<span class="title class_">String</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()).<span class="title function_">substring</span>(<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="setState-是同步还是异步"><a href="#setState-是同步还是异步" class="headerlink" title="setState 是同步还是异步"></a>setState 是同步还是异步</h3><p><span class='custom-box custom-box-393'>React 18中，无论是使用 Hook 函数 useState 设置更新状态还是类组件 this.setState，多个状态修改是异步的；而在 React 16 中，异步操作中（如：定时器，手动事件绑定）修改状态为同步的。</span></p><pre class="mermaid"> flowchart TB start((开始)) --> setState[setState] setState --> isAsync{"    是否异步代码修改状态\n(如：定时器，手动事件绑定)    setTimeout(() => {        setReduce(--reduce)        setSum(plus + reduce)    }, 1000);"} isAsync -->|No| res1["state加入队列，再渲染<b style="color: #a33">【异步】</b>"] isAsync -->|Yes| version{"is react 16"} version -->|Yes| res2["修改 state，渲染<b style="color: #a33">【同步】</b>"] version -->|No| res1</pre><p><a href="https://github.com/HelenZhangLP/react-18/blob/master/src/Hooks/Demo2/index.jsx">具体的 DEMO 案例</a></p><h3 id="setState-的性能优化机制"><a href="#setState-的性能优化机制" class="headerlink" title="setState 的性能优化机制"></a>setState 的性能优化机制</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render 渲染&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> [state, setstate] = <span class="title function_">useState</span>(<span class="title class_">NaN</span>)</span><br><span class="line">    <span class="title function_">handle</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">setstate</span>(<span class="title class_">NaN</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;handle&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不会再次渲染，因为每次修改状态值时，会拿最新修改的值与之前的状态值基于 Object.is 比较，Object.is(NaN, NaN) 返回 true; 两次修改值相同，则不会修改状态，视图也不会更新。<a href="/2021/05/11/React-Component-pureComponent/">类似于 PureComponent 中，在 shouldComponent 中作了浅比较优化</a>。</p></blockquote><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a><a href="https://github.com/HelenZhangLP/react-18/blob/master/src/Hooks/Demo3/index.jsx">思考</a></h4><blockquote><p>以下代码会渲染几次，最终结果是几</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">let</span> [x, setX] = <span class="title function_">useState</span>(<span class="number">10</span>)</span><br><span class="line"><span class="title function_">handle</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="title function_">setX</span>(x + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-393'>点击后渲染 1次，最终渲染结果是 11.</span></p><blockquote><p>以下代码会渲染几次，最终结果是几</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">let</span> [x, setX] = <span class="title function_">useState</span>(<span class="number">10</span>)</span><br><span class="line"><span class="title function_">handle</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="title function_">flushsync</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">setX</span>(x + <span class="number">1</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-393'>点击后渲染 2，最终渲染结果是 11. 原因：优化机制，消息队列中按照优化机制，不会多次渲染相同的值</span></p><blockquote><p>以下代码会渲染几次，最终结果是几</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">let</span> [x, setX] = <span class="title function_">useState</span>(<span class="number">10</span>)</span><br><span class="line"><span class="title function_">handle</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="title function_">setx</span>(<span class="function"><span class="params">prev</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> prev + <span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-393'>点击后渲染 1，最终渲染结果是 20. updater 队列中存储的是 10 个回调函数，每次执行回调时，拿到的是上一个计算出的 x 的值。合并处理后，渲染一次，值为 20</span></p><h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useEffect, useState&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> [num, setNum] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;effect&#x27;</span>, <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>useEffect,&#123;num&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Demo</span></span><br></pre></td></tr></table></figure><pre class="mermaid"> flowchart TB subgraph "第一次渲染【componentDidMount】"    render --> useEffect end subgraph "更新【componentDidUpdate】" render1[render] --> useEffect1[useEffect] end</pre><blockquote><p><code>useEffect(callback)</code> 第一次渲染完后，执行 callback。更新完成后，同样再次执行 callback</p></blockquote><h3 id="依赖项为空"><a href="#依赖项为空" class="headerlink" title="依赖项为空"></a>依赖项为空</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;effect&#x27;</span>, <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>))</span><br><span class="line">&#125;,[])</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="多个依赖项"><a href="#多个依赖项" class="headerlink" title="多个依赖项"></a>多个依赖项</h3><blockquote><p>任一依赖项变化，触发 callback 执行</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;effect&#x27;</span>, <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>))</span><br><span class="line">&#125;,[ids, name])</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-933'>依赖项类似与 ComponentShouldUpdate</span></p><h3 id="effect-第一渲染不执行，更新的时候运行-callback-返回的函数"><a href="#effect-第一渲染不执行，更新的时候运行-callback-返回的函数" class="headerlink" title="effect 第一渲染不执行，更新的时候运行 callback 返回的函数"></a>effect 第一渲染不执行，更新的时候运行 callback 返回的函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;effect&#x27;</span>, <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="useEffect-原理分析"><a href="#useEffect-原理分析" class="headerlink" title="useEffect 原理分析"></a>useEffect 原理分析</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useEffect, useState&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> [num, setNum] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;effect&#x27;</span>, <span class="string">&#x27;无依赖&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;effect&#x27;</span>, <span class="string">&#x27;依赖为空&#x27;</span>)</span><br><span class="line">    &#125;,[])</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;effect&#x27;</span>, <span class="string">&#x27;依赖 num 的变化&#x27;</span>)</span><br><span class="line">    &#125;,[num])</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;effect&#x27;</span>, <span class="string">&#x27;返回函数&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">setNum</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handle&#125;</span>&gt;</span>useEffect,&#123;num&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><pre class="mermaid"> flowchart TB subgraph 第一次渲染    subgraph render        s1["num=0 setNum(){}"]        s2["useEffect(()=>{            console.log('effect 无依赖')        })"]        s3["useEffect(()=>{            console.log('effect 依赖为空')        },[])"]        s4["useEffect(()=>{            console.log('effect 依赖为num')        },[num])"]        s5["useEffect(()=>{            return () => {                console.log('effect 无依赖，无输出，返回函数')            }        },[num])"]    end    subgraph effect链表        se1["effect 无依赖"]        se2["effect 依赖为空"]        se3["effect 依赖为num"]        se4["effect 无依赖，无输出，返回函数"]    end    render -->|"MountEffect callback 中的依赖项加入链表"| effect链表    subgraph output        a["effect 无依赖"]        b["effect 依赖为空"]        c["effect 依赖为num"]    end end subgraph 更新    subgraph updater        s11["num=0 setNum(){}"]        s21["useEffect(()=>{            console.log('effect 无依赖')        })"]        s31["useEffect(()=>{            console.log('effect 依赖为空')        },[])"]        s41["useEffect(()=>{            console.log('effect 依赖为num')        },[num])"]        s51["useEffect(()=>{            return () => {                console.log('effect 无依赖，无输出，返回函数')            }        },[num])"]    end    subgraph effect链表1        se11["effect 无依赖"]        se21["effect 依赖为空"]        se31["effect 依赖为num"]        se41["effect 无依赖，无输出，返回函数"]    end    subgraph output1        a1["effect 无依赖，无输出，返回函数"]        b1["effect 无依赖"]        c1["effect 依赖为num"]    end end 第一次渲染 -->|"点击按钮，修改 num 状态"| 更新</pre><h3 id="Error-1"><a href="#Error-1" class="headerlink" title="Error - 1"></a>Error - 1</h3><p><font color='red'>Line 26:9:  React Hook “useEffect” is called conditionally. React Hooks must be called in the exact same order in every component render  react-hooks/rules-of-hooks</font><br><span class='custom-box custom-box-393'>每次渲染 react hooks 都要以相同的顺序在组件中调用</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(num &gt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;num&#125;</span> &gt; 5`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/** 正确方式 **/</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(num &gt; <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;num&#125;</span> &gt; 5`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,[num])</span><br></pre></td></tr></table></figure><h3 id="Error-2"><a href="#Error-2" class="headerlink" title="Error - 2"></a>Error - 2</h3><p><font color='red'>react-dom.development.js:86 Warning: useEffect must not return anything besides a function, which is used for clean-up.<br>It looks like you wrote useEffect(async () =&gt; …) or returned a Promise. Instead, write the async function inside your effect and call it immediately:<br>useEffect(() =&gt; {<br>  async function fetchData() {<br>    // You can await here<br>    const response = await MyAPI.getData(someId);<br>    // …<br>  }<br>  fetchData();<br>}, [someId]); // Or [] if effect doesn’t need props or state</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// You can await here</span></span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title class_">MyAPI</span>.<span class="title function_">getData</span>(someId);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fetchData</span>();</span><br><span class="line">&#125;, [someId]); </span><br></pre></td></tr></table></figure><h3 id="Error-3-快速点击-btn-后，样式或内容会有短暂的闪烁"><a href="#Error-3-快速点击-btn-后，样式或内容会有短暂的闪烁" class="headerlink" title="Error-3 快速点击 btn 后，样式或内容会有短暂的闪烁"></a>Error-3 <font color='red'>快速点击 btn 后，样式或内容会有短暂的闪烁</font></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> [num, setNum] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="title function_">useLayoutEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!num) <span class="title function_">setNum</span>(<span class="number">10</span>)</span><br><span class="line">    &#125;,[num])</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleIncremental</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">setNum</span>(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;backgroundColor:</span> <span class="attr">num</span> === <span class="string">0</span> ? &#x27;<span class="attr">red</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">lightgreen</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleIncremental&#125;</span>&gt;</span>Incremental<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>原因分析：</p></blockquote><pre class="mermaid">%%{init: {"flowchart": {"htmlLabels": true}} }%% flowchart TB subgraph "<b style="color: green; padding:10px">组件渲染步骤</b>"    step1["react-app 编译"]    step2["创建 virtualDOM"]    step3["DOM-DIFF，渲染真实 DOM"]    step4["<b style="color: #a33">useEffect 异步执行</b>链表中方法执行"]    step1 --> step2    step2 --> step3    step3 --> step4    step4 --> step1 end</pre><blockquote><p>那么真实 DOM 会渲染两次，所以会有内容和样式上的闪烁，使用 useLayoutEffect 解决：</p></blockquote><pre class="mermaid">%%{init: {"flowchart": {"htmlLabels": true}} }%% flowchart LR subgraph "<b style="color: green; padding:10px">组件渲染步骤</b>"    step1["babel-preset-react-app 编译 createElement"]    step2["createElement 创建 virtualDOM"]    step3["root.render 把 virtualDOM 变为真实 Diff 运算"]    step4["<b style="color: #a33">useLayoutEffect</b>阻塞渲染，<b><U>同步执行</U></b>EFFECT 链表中方法"]    step5["渲染真实 DOM"]    step1 --> step2    step2 --> step3    step3 --> step4    step4 --> step5 end</pre><p> <span class='custom-box custom-box-339'>使用 useLayoutEffect 可以解决闪烁问题，如上图真实 dom 只渲染一次，所以不会闪烁</span></p><h3 id="useEffect-与-useLayoutEffect-区别"><a href="#useEffect-与-useLayoutEffect-区别" class="headerlink" title="useEffect 与 useLayoutEffect 区别"></a>useEffect 与 useLayoutEffect 区别</h3><p> useLayoutEffect 会阻塞浏览器真实 DOM，优先执行 Effect 链表中的 callback；<br> useEffect 不会阻塞浏览器渲染真实 DOM，在渲染真实 DOM 的同时，去执行 Effect 链表中的 callback.<br> useLayoutEffect 优先于 useEffect 执行<br> 都可以获取 DOM 元素，原因在于真实 DOM 已经生成，区别只是 useLayoutEffect 在执行完 effect 链表后渲染 DOM 到浏览器<br> useEffect 会渲染两次，useLayoutEffect 会合并真实 DOM 渲染。</p><h2 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a><a href="/2021/05/11/React-Refs/#%E5%87%BD%E6%95%B0%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B8%AD%E4%BD%BF%E7%94%A8-Ref-%E8%BF%9B%E8%A1%8C-DOM-%E5%A4%84%E7%90%86">useRef</a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 类组件</title>
      <link href="/2023/06/15/React-Class-Component/"/>
      <url>/2023/06/15/React-Class-Component/</url>
      
        <content type="html"><![CDATA[<h2 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h2><ul><li>具备“状态，<a href="2021/05/11/React-Refs/">ref</a>，属性、插槽“ 等，可灵活控制组件更新，基于钩子函数也可灵活掌控不同阶段处理不同事项；</li><li>渲染流程繁琐，渲染速度慢；</li><li>基于 OOP（面向对象）思想设计，更方便实现继承</li></ul><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>Uncaught ReferenceError: Must call super constructor in derived class before accessing ‘this’ or returning from derived constructor</font><br><span class='custom-box custom-box-933'>引用错误：在访问 <code>this</code> 或从派生构造函数返回之前，必须调用派生类中调用 super 构造函数</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// super 关键字调用父类构造函数</span></span><br><span class="line">    <span class="comment">// 相当于 React.Component.call(this)</span></span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-933'>为什么呢？</span><span class='custom-box custom-box-393'>super() 相当于 React.Component.call(this) 继承父类的 props, context, updater, refs 属性</span></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>React 类组件是基于 <code>extends</code> 实现继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="React-Component-源码"><a href="#React-Component-源码" class="headerlink" title="React.Component 源码"></a>React.Component 源码</h4><p>构造函数 Component 中包含四个实例（私有）属性：props/context/refs/updater</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params">props, context, updater</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">props</span> = props</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">context</span> = context</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">refs</span> = emptyObject</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">updater</span> = updater || <span class="title class_">ReactNoopUpdateQueue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>class User extends React.Component &#123;&#125;</code> 是基于 <code>call</code> 继承父类私有方法属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> <span class="title class_">User</span>()</span><br><span class="line"><span class="title class_">Component</span>.<span class="title function_">call</span>(user)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> *  &quot;context&quot;: undefined </span></span><br><span class="line"><span class="comment"> *  &quot;props&quot; : undefined</span></span><br><span class="line"><span class="comment">    &quot;refs&quot;: &#123;&#125;,</span></span><br><span class="line"><span class="comment">    &quot;updater&quot;: &#123;&#125;</span></span><br><span class="line"><span class="comment">  &#125;   </span></span><br><span class="line"><span class="comment">  [[Prototype]] : Object</span></span><br><span class="line"><span class="comment">  * /</span></span><br></pre></td></tr></table></figure><p>再基于原型继承，继承原型属性 <span class='custom-box custom-box-939'><code>Info.prototype =&gt; Component.prototype =&gt; Object.prototype</code></span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Class</span> <span class="title class_">Info</span> <span class="keyword">extends</span> <span class="title class_">React</span>.<span class="property">Component</span> &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> info = <span class="title class_">Info</span>()</span><br></pre></td></tr></table></figure><p>那么 Info 的实例 info 具备了 React.Component 与 Object 上的原型方法</p><h3 id="内部原理"><a href="#内部原理" class="headerlink" title="内部原理"></a>内部原理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Info</span> <span class="attr">name</span>=<span class="string">&quot;hel&quot;</span>/&gt;</span></span>)</span><br></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Class</span> <span class="title class_">Info</span> <span class="keyword">extends</span> <span class="title class_">React</span>.<span class="property">Component</span> &#123;</span><br><span class="line">  <span class="comment">/* 属性规则检验 */</span></span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    <span class="attr">num</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> propsType = &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>,</span><br><span class="line">    <span class="attr">num</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isFrozen</span>(props)) <span class="comment">// true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre class="mermaid">  flowchart LR  start["index.js run render"] --> render["new Info({name:'helen'})"]  render --> ruleInspection["constructor 初始化属性&&规则检验"]  ruleInspection --> initState["初始化状态"]</pre>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 函数组件</title>
      <link href="/2023/06/15/React-Function-Component/"/>
      <url>/2023/06/15/React-Function-Component/</url>
      
        <content type="html"><![CDATA[<h2 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h2><p>返回 jsx 视图（JSX 元素，VirturalDOM 虚拟对象）的函数。<br><span class='custom-box custom-box-939'>特性：</span></p><ul><li>函数组件是静态组件，父组件更新，子组件才会更新，无法基于组件内部的操作控制更新。<i>不具备”<a href="/2021/03/09/React-State/">状态</a>、<a href="/2021/05/11/React-Refs/">ref</a>、<a href="">周期函数</a>等“</i></li><li>函数组件有属性、插槽、父组件可以控制重新渲染；</li><li>渲染流程简单，渲染速度快；</li><li>基于 FP（函数式编程）思想设计，提供更细粒度的逻辑组织和复用。</li></ul><p>设置的属性值不是<span class='custom-box custom-box-933'>字符串</span>格式，<span class='custom-box custom-box-393'>要基于<code>&#123;&#125;</code>进行嵌套</span></p><h3 id="定义函数组件"><a href="#定义函数组件" class="headerlink" title="定义函数组件"></a>定义函数组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">demo1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是一个函数组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> demo1</span><br></pre></td></tr></table></figure><h3 id="调用函数组件"><a href="#调用函数组件" class="headerlink" title="调用函数组件"></a>调用函数组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">ComponentDEMO</span> className=<span class="string">&quot;App-header&quot;</span> style=&#123;&#123;<span class="attr">color</span>: <span class="string">&#x27;#a33&#x27;</span>&#125;&#125; title=<span class="string">&quot;function component demo&quot;</span> data=&#123;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125; times=&#123;<span class="number">3</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Event</title>
      <link href="/2023/06/06/React-Event/"/>
      <url>/2023/06/06/React-Event/</url>
      
        <content type="html"><![CDATA[<h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">x</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">clickEventPrototype</span>(<span class="params"></span>) &#123; <span class="comment">// Demo 类的原型方法，相当于 Demo.prototype =&gt; Demo.prototype.handle = function handle() &#123;&#125;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;clickEvent&#x27;</span>,<span class="variable language_">this</span>) <span class="comment">// undefined</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render&#x27;</span>, <span class="variable language_">this</span>) <span class="comment">// Demo &#123;props: &#123;…&#125;, context: &#123;…&#125;, refs: &#123;…&#125;, updater: &#123;…&#125;, state: &#123;…&#125;, …&#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.clickEventPrototype()&#125;</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>this</code> 需要指向 Demo 实例，获取 state。<span class='custom-box custom-box-933'>通过 call 或 bind 让 this 指向当前对象</span></p></blockquote><h3 id="通过-bind-继承-Demo-实例属性，方法"><a href="#通过-bind-继承-Demo-实例属性，方法" class="headerlink" title="通过 bind() 继承 Demo 实例属性，方法"></a>通过 bind() 继承 Demo 实例属性，方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">x</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">clickEventPrototype</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;clickEvent&#x27;</span>,<span class="variable language_">this</span>) <span class="comment">// Demo &#123;props: &#123;…&#125;, context: &#123;…&#125;, refs: &#123;…&#125;, updater: &#123;…&#125;, state: &#123;…&#125;, …&#125; </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render&#x27;</span>, <span class="variable language_">this</span>) <span class="comment">// Demo &#123;props: &#123;…&#125;, context: &#123;…&#125;, refs: &#123;…&#125;, updater: &#123;…&#125;, state: &#123;…&#125;, …&#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.clickEventPrototype.call(this)&#125;</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>this.clickEventPrototype.call(this)</code> 立即调用，<code>bind</code> this 预处理，运行后返回回调函数，点击后执行回调事件。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    state = &#123; <span class="attr">x</span>: <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">clickEventPrototype</span>(<span class="params">x, y, evt</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;clickEvent&#x27;</span>,<span class="variable language_">this</span>) <span class="comment">// Demo &#123;props: &#123;…&#125;, context: &#123;…&#125;, refs: &#123;…&#125;, updater: &#123;…&#125;, state: &#123;…&#125;, …&#125; </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render&#x27;</span>, <span class="variable language_">this</span>) <span class="comment">// Demo &#123;props: &#123;…&#125;, context: &#123;…&#125;, refs: &#123;…&#125;, updater: &#123;…&#125;, state: &#123;…&#125;, …&#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.clickEventPrototype.bind(this,</span> <span class="attr">1</span>, <span class="attr">2</span>)&#125;&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre class="mermaid"> flowchart LR step1["解决 this 指向 <br/>this.clickEventPrototype()"] --> step2["解决 call 回调立即执行<br/>this.clickEventPrototype.call(this)"] step2 --> step3["bind 解决了点击后调用回调<br/>this.clickEventPrototype.bind(this)"]</pre><h3 id="箭头函数继承-this-实例属性，方法"><a href="#箭头函数继承-this-实例属性，方法" class="headerlink" title="箭头函数继承 this 实例属性，方法"></a>箭头函数继承 this 实例属性，方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    state = &#123; <span class="attr">x</span>: <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原型属性</span></span><br><span class="line">    <span class="title function_">clickEventPrototype</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;clickEvent&#x27;</span>,<span class="variable language_">this</span>) <span class="comment">// Demo &#123;props: &#123;…&#125;, context: &#123;…&#125;, refs: &#123;…&#125;, updater: &#123;…&#125;, state: &#123;…&#125;, …&#125; </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例属性</span></span><br><span class="line">    eventArrowFn = <span class="function">() =&gt;</span> &#123;&#125; <span class="comment">// Demo &#123;context : &#123;&#125; eventArrowFn : () =&gt; &#123; console.log(this, &#x27;eventArrowFn&#x27;); &#125;[ props : &#123;&#125; refs : &#123;&#125; state : &#123;x: 0&#125; updater : &#123;isMounted: ƒ, enqueueSetState: ƒ, enqueueReplaceState: ƒ, enqueueForceUpdate: ƒ&#125; _reactInternalInstance : &#123;_processChildContext: ƒ&#125; _reactInternals : FiberNode &#123;tag: 1, key: null, stateNode: Demo, elementType: ƒ, type: ƒ, …&#125; isMounted : (...) replaceState : (...) [[Prototype]] : Component clickEventPrototype : ƒ clickEventPrototype()</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render&#x27;</span>, <span class="variable language_">this</span>) <span class="comment">// Demo &#123;props: &#123;…&#125;, context: &#123;…&#125;, refs: &#123;…&#125;, updater: &#123;…&#125;, state: &#123;…&#125;, …&#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.clickEventPrototype&#125;</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="合成事件-SyntheticBaseEvent"><a href="#合成事件-SyntheticBaseEvent" class="headerlink" title="合成事件[SyntheticBaseEvent]"></a>合成事件[SyntheticBaseEvent]</h2><p>它是围绕浏览器的原生事件，充当<strong>浏览器包装器对象</strong>；<u>它们将不同浏览器的行为合并为一个 API，为了确保事件在不同浏览器中显示一致的属性。</u></p><h3 id="合成事件原理"><a href="#合成事件原理" class="headerlink" title="合成事件原理"></a>合成事件原理</h3><pre class="mermaid"> flowchart LR step1["Dom 元素添加合成事件属性"] --> step2["#root 上添加事件委托"]</pre><h4 id="DOM-元素添加合成事件属性"><a href="#DOM-元素添加合成事件属性" class="headerlink" title="DOM 元素添加合成事件属性"></a>DOM 元素添加合成事件属性</h4><p><span class='custom-box custom-box-393'><code>&lt;button onClick=&#123;this.clickEventPrototype.bind(this)&#125;&gt;btn&lt;/button&gt;</code></span> 并不是给 <code>button</code> 添加了 addEventListener 事件，而是做了 <span class='custom-box custom-box-933'>给 #root 根容器（React17 以后的版本，React17 以前是给 docuemnt 容器）做的事件委托</span></p><p>在组件渲染阶段，jsx 会把 onXXX 或 onXXXCapture 赋给元素相关属性，并没有做事件绑定。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// babel-compile.js</span></span><br><span class="line"><span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">className</span>: <span class="string">&quot;inner&quot;</span>,</span><br><span class="line">  <span class="attr">onClick</span>: <span class="keyword">function</span> <span class="title function_">onClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inner click event bubbling [合成]&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onClickCapture</span>: <span class="keyword">function</span> <span class="title function_">onClickCapture</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inner click event capture [合成]&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 查看需拟 Dom</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>, &#123;...&#125;))</span><br><span class="line"><span class="comment">// &#123;...props : &#123;className : &quot;inner&quot; onClick : ƒ onClick() onClickCapture : ƒ onClickCapture() &#125;...&#125;</span></span><br></pre></td></tr></table></figure><h4 id="root上添加事件委托"><a href="#root上添加事件委托" class="headerlink" title="#root上添加事件委托"></a>#root上添加事件委托</h4><p>react 合成事件源码实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> root = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>),</span><br><span class="line">    outer = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;outer&#x27;</span>),</span><br><span class="line">    inner = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;inner&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    inner.<span class="property">onClick</span> = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inner click 冒泡合成&#x27;</span>); evt.<span class="title function_">stopImmediatePropagation</span>()&#125;</span><br><span class="line">    inner.<span class="property">onClickCapture</span> = <span class="function">() =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inner click 捕获合成&#x27;</span>)&#125;</span><br><span class="line">    outer.<span class="property">onClick</span> = <span class="function">() =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;outer click 冒泡合成&#x27;</span>)&#125;</span><br><span class="line">    outer.<span class="property">onClickCapture</span> = <span class="function">() =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;outer click 捕获合成&#x27;</span>)&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 事件捕获</span></span><br><span class="line">    root.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> path = evt.<span class="title function_">composedPath</span>(); <span class="comment">// 事件传播路径</span></span><br><span class="line"></span><br><span class="line">        [...path].<span class="title function_">reverse</span>().<span class="title function_">forEach</span>(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (element.<span class="property">onClickCapture</span>) element.<span class="title function_">onClickCapture</span>(<span class="title function_">handler</span>(evt))</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,<span class="literal">true</span>) <span class="comment">// useCapture 是否触发捕获</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 事件冒泡</span></span><br><span class="line">    root.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="params">evt</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> path = evt.<span class="title function_">composedPath</span>(); <span class="comment">// 获取事件传播路径</span></span><br><span class="line">        [...path].<span class="title function_">forEach</span>(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (element.<span class="property">onClick</span>) element.<span class="title function_">onClick</span>(<span class="title function_">handler</span>(evt))</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    root.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;root click 冒泡&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    root.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;root click 捕获&#x27;</span>)</span><br><span class="line">    &#125;,<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">    inner.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inner click 冒泡&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    inner.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inner click 捕获&#x27;</span>)</span><br><span class="line">    &#125;,<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">    outer.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;outer click 冒泡&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    outer.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;outer click 捕获&#x27;</span>)</span><br><span class="line">    &#125;,<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><blockquote><p><code>outer click 捕获合成</code> -&gt; <code>inner click 捕获合成</code> -&gt; <code>root click 捕获</code> -&gt; <code>outer click 捕获</code> -&gt; <code>inner click 捕获</code> -&gt; <code>inner 冒泡</code> -&gt; <code>outer 冒泡</code> -&gt; <code>inner 冒泡合成</code> -&gt; <code>outer 冒泡合成</code> -&gt; <code>root 冒泡</code></p></blockquote><h3 id="事件触发后-react-执行原理"><a href="#事件触发后-react-执行原理" class="headerlink" title="事件触发后 react 执行原理"></a>事件触发后 react 执行原理</h3><pre class="mermaid"> flowchart LR subgraph capture    wc[window capture] --> dc[docuemnt capture]    dc --> hc[html capture]    hc --> bc[body capture]    bc --> SyntheticBaseEvent([root 合成事件]):::orange    SyntheticBaseEvent --> rc[root capture]    rc --> oc[outer capture]    oc --> ic[inner capture] end subgraph bubbling    direction BT    ib[inner bubbling] --> ob[outer bubbling]    ob --> SyntheticBaseEventB([root 合成事件]):::orange    SyntheticBaseEventB --> rb[root bubbling]    rb --> bb[body bubbling]    bb --> hb[html bubbling]    hb --> db[docuemnt bubbling]    db --> wb[window bubbling] end capture --> bubbling classDef orange fill:#f96</pre><h3 id="阻止事件传播"><a href="#阻止事件传播" class="headerlink" title="阻止事件传播"></a>阻止事件传播</h3><h4 id="evt-stopPropagation"><a href="#evt-stopPropagation" class="headerlink" title="evt.stopPropagation"></a>evt.stopPropagation</h4><blockquote><p>阻止 root 之后的事件传播，原生和合成事件传播都会阻止</p></blockquote><h4 id="evt-nativeEvent-stopPropagation"><a href="#evt-nativeEvent-stopPropagation" class="headerlink" title="evt.nativeEvent.stopPropagation"></a>evt.nativeEvent.stopPropagation</h4><blockquote><p>阻止 root 之后的原生事件传播</p></blockquote><h4 id="evt-nativeEvent-stopImmediatePropagation"><a href="#evt-nativeEvent-stopImmediatePropagation" class="headerlink" title="evt.nativeEvent.stopImmediatePropagation"></a>evt.nativeEvent.stopImmediatePropagation</h4><blockquote><p>立即阻止原生事件传播，当前 DOM 绑定的同类其它事件不是执行</p></blockquote><h2 id="react-16-事件传播机制"><a href="#react-16-事件传播机制" class="headerlink" title="react 16 事件传播机制"></a>react 16 事件传播机制</h2><pre class="mermaid"> flowchart LR subgraph 捕获    wc[window capture] --> dc[docuemnt capture]    dc --> hc[html capture]    hc --> bc[body capture]    bc --> rc[root capture]    rc --> oc[outer capture]    oc --> ic[inner capture] end subgraph 冒泡    direction BT    ib[inner bubbling] --> ob[outer bubbling]    ob --> rb[root bubbling]    rb --> bb[body bubbling]    bb --> hb[html bubbling]    hb --> ocb([outer capture 合成]):::orange    ocb --> stopPropagation{stopPropagation}    ocb --> nativeEventStopPropagation{nativeEvent.stopPropagation}    stopPropagation --> db[docuemnt bubbling]    db --> e((end))    nativeEventStopPropagation --> icb([inner capture 合成]):::orange    icb --> ibb([inner 合成]):::orange    ibb --> obb([outer 合成]):::orange    obb -->|nativeEvent.stopPropagation| db    ocb --> stopImmediatePropagation{nativeEvent.stopImmediatePropagation}    stopImmediatePropagation --> icb    icb --> ibb    ibb --> obb    obb -->|nativeEvent.stopImmediatePropagation| e end 捕获 --> 冒泡classDef orange fill:#f96</pre><p><span class='custom-box custom-box-939'>React17 以上，捕获阶段 root 事件执行处理事件委托中的捕获，冒泡阶段处理冒泡合成事件；React 17 以下版本，React 冒泡阶段处理 document 上委托的捕获、冒泡合成事件。</span></p><h2 id="React16-事件缓存池"><a href="#React16-事件缓存池" class="headerlink" title="React16 事件缓存池"></a>React16 事件缓存池</h2><p>当生成的实例或者对象使用完毕之后，React就会将其所有属性置为null，然后丢进一个缓存池（Pool）中，后续再需要生成实例的时候，就不需要使用new再去创建一个对象了，直接从缓存池中拿一个置空后的实例/对象赋值之后使用就可以了，所以此处getPool就是判断缓存池是否有缓存，有的话就pop()出来一个赋值后使用，没有的话就new一个</p><blockquote><p>React的源码中处处都有性能优化的影子。你可能会问，用完了不回收不会浪费内存么？确实会有这样的情况，但是这个缓存池的容量一般比较小，大多是10个左右，所以并不会占用太多空间</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;inner&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;(evt)</span> =&gt;</span> &#123;</span><br><span class="line">    evt.stopPropagation()</span><br><span class="line">    evt.persist() // 可以把合成事件对象中的信息保留下来</span><br><span class="line">    setTimeout(()=&gt;&#123;</span><br><span class="line">        // Class &#123;dispatchConfig: null, _targetInst: null, _dispatchListeners: null, _dispatchInstances: null, …&#125; null, inner click 合成</span><br><span class="line">        console.log(evt, evt.type, &#x27;inner click 合成&#x27;) </span><br><span class="line">    &#125;,0)</span><br><span class="line">&#125;&#125; onClickCapture=&#123;(evt) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;inner capture 合成&#x27;)</span><br><span class="line">&#125;&#125;&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Props</title>
      <link href="/2023/05/08/React-Props/"/>
      <url>/2023/05/08/React-Props/</url>
      
        <content type="html"><![CDATA[<p>“Render Props” 是一种在 react 组件之间<u>使用一个值为函数的 prop 共享代码</u>的简单技术</p><h2 id="定义函数组件"><a href="#定义函数组件" class="headerlink" title="定义函数组件"></a>定义函数组件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">demo1</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是一个函数组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> demo1</span><br></pre></td></tr></table></figure><h2 id="调用函数组件"><a href="#调用函数组件" class="headerlink" title="调用函数组件"></a>调用函数组件</h2><p>入口 index.js 调用组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ComponentDemo</span> <span class="keyword">from</span> <span class="string">&#x27;@/src/ComponentDemo&#x27;</span></span><br><span class="line">b</span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;&gt;</span><span class="tag">&lt;<span class="name">ComponentDemo</span> <span class="attr">title</span>=<span class="string">&quot;A&quot;</span> <span class="attr">data</span>=<span class="string">&quot;b&quot;</span> /&gt;</span><span class="tag">&lt;/&gt;</span></span>)</span><br></pre></td></tr></table></figure><h2 id="修改-props-属性"><a href="#修改-props-属性" class="headerlink" title="修改 props 属性"></a>修改 props 属性</h2><h3 id="props-不能通过-props-attr-‘attribute’-修改"><a href="#props-不能通过-props-attr-‘attribute’-修改" class="headerlink" title="props 不能通过 props.attr = ‘attribute’ 修改"></a>props 不能通过 props.attr = ‘attribute’ 修改</h3><blockquote><p>因为 props 被冻结，不能通过 props.attr = ‘attribute’ 修改、扩展</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">demo1</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="comment">// props.title = &#x27;modify props attribute&#x27;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;</span></span><br><span class="line"><span class="comment">            &quot;value&quot;: &quot;function component demo&quot;,</span></span><br><span class="line"><span class="comment">            &quot;writable&quot;: false,</span></span><br><span class="line"><span class="comment">            &quot;enumerable&quot;: true,</span></span><br><span class="line"><span class="comment">            &quot;configurable&quot;: false</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(props, <span class="string">&#x27;title&#x27;</span>))</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isFrozen</span>(props)) <span class="comment">// true</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(props)) <span class="comment">// false</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isSealed</span>(props)) <span class="comment">// true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是一个函数组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> demo1</span><br></pre></td></tr></table></figure><h2 id="props-修改方法"><a href="#props-修改方法" class="headerlink" title="props 修改方法"></a>props 修改方法</h2><blockquote><p>let a = props.a; a = ‘b’</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">demo1</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = props.<span class="property">a</span>; a = <span class="string">&#x27;b&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是一个函数组件&#123;b&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> demo1</span><br></pre></td></tr></table></figure><h2 id="设置-props-默认值"><a href="#设置-props-默认值" class="headerlink" title="设置 props 默认值"></a>设置 props 默认值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">demo1</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;c&#125; = props</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是一个函数组件&#123;c&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置默认值，设置数据格式，必传项等</span></span><br><span class="line">demo1.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">    <span class="attr">c</span>: <span class="string">&#x27;test default attribute&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> demo1</span><br></pre></td></tr></table></figure><h2 id="设置-props-检验"><a href="#设置-props-检验" class="headerlink" title="设置 props 检验"></a>设置 props 检验</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">demo1</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是一个函数组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置默认值，设置数据格式，必传项等</span></span><br><span class="line">demo1.<span class="property">propsType</span> = &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>,</span><br><span class="line">    <span class="attr">data</span>: <span class="title class_">PropTypes</span>.<span class="title function_">oneOfType</span>([</span><br><span class="line">        <span class="title class_">PropTypes</span>.<span class="property">number</span>,</span><br><span class="line">        <span class="title class_">PropTypes</span>.<span class="property">string</span></span><br><span class="line">    ])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> demo1</span><br></pre></td></tr></table></figure><h2 id="使用-Render-Props-来解决横切关注点-Cross-Cutting-Concerns"><a href="#使用-Render-Props-来解决横切关注点-Cross-Cutting-Concerns" class="headerlink" title="使用 Render Props 来解决横切关注点(Cross Cutting Concerns)"></a>使用 Render Props 来解决横切关注点(Cross Cutting Concerns)</h2><p>如何将一个组件封装的状态或行为共享给其他需要相同状态的组件</p><p>render prop 是一个用于告知组件需要渲染什么内容的函数 prop</p><h2 id="使用-props-而非-render"><a href="#使用-props-而非-render" class="headerlink" title="使用 props 而非 render"></a>使用 props 而非 render</h2><p>render prop 是因为模式才被称为 render prop，<u><code>任何被用于告知组件需要渲染什么内容的函数 prop 在技术上都可以被 称为 render prop</code></u></p><h3 id="React-Props-只读"><a href="#React-Props-只读" class="headerlink" title="React Props 只读"></a>React Props 只读</h3><blockquote><p>props 只读属性，需要添加 readOnly，或通过 onChange 属性修改 state，或将从 props 中取出的属性设置为 defaultValue</p></blockquote><p>将上面示例代码中的 readOnly 属性去掉，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;props.test&#125;</span> /&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">FormLogin</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">FormTitle</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">UserID</span> <span class="attr">userId</span>=<span class="string">&quot;001&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">UserName</span> <span class="attr">userName</span>=<span class="string">&quot;Audery&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Submit</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Test</span> <span class="attr">test</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Warning: Failed prop type: You provided a &#39;value&#39; prop to a form field without an &#39;onChange&#39; handler. This will render a read-only field. If the field should be mutable use &#39;defaultValue&#39;. Otherwise, set either &#39;onChange&#39; or &#39;readOnly&#39;.     in input (created by Test)     in Test (created by FormLogin)     in div (created by FormLogin)     in FormLogin</code><br>属性类型错误，给没有 onchange 事件的表单提供了 value 属性，如果字段可变的使用 defaultValue，否则，设置 onChange 或 readOnly</p><h3 id="React-Props-默认值"><a href="#React-Props-默认值" class="headerlink" title="React Props 默认值"></a>React Props 默认值</h3><blockquote><p>在 react 类组件中定义一个默认 props——defaultProps（函数组件可以通过 参数传递 props），使用 defaultProps 默认值来实现 React Props 应用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ImgTest</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;this.props.src&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&#123;this.props.style&#125;/</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ImgTest</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">  <span class="attr">src</span>: <span class="string">&quot;https://www.baidu.com/img/PCpad_012830ebaa7e4379ce9a9ed1b71f7507.png&quot;</span>,</span><br><span class="line">  <span class="attr">style</span>: &#123;</span><br><span class="line">    <span class="attr">margin</span>: <span class="string">&quot;0 auto&quot;</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="string">&quot;270px&quot;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="string">&quot;129px&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="React-Props"><a href="#React-Props" class="headerlink" title="React Props"></a>React Props</h2><p>是组件之间的桥梁，负责组件之间的通信</p><blockquote><p>props 不可改变，props 的值只能从默认属性和父组件中传递过来</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> root = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> &#123;<span class="title class_">Input</span>, <span class="title class_">Button</span>&#125; = antd</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">FormTitle</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>UserLogin<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params">props</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;props.test&#125;</span> <span class="attr">readOnly</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">UserID</span>(<span class="params">props</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">&quot;UserID&quot;</span> <span class="attr">value</span>=<span class="string">&#123;props.userId&#125;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">UserName</span>(<span class="params">props</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">&quot;UserName&quot;</span> <span class="attr">value</span>=<span class="string">&#123;props.userName&#125;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Submit</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">block</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">FormLogin</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;<span class="name">FormTitle</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;<span class="name">UserID</span> <span class="attr">userId</span>=<span class="string">&quot;001&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;<span class="name">UserName</span> <span class="attr">userName</span>=<span class="string">&quot;Audery&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;<span class="name">Submit</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;<span class="name">Test</span> <span class="attr">test</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">    )</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">FormLogin</span> /&gt;</span></span>, root)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-一级6</title>
      <link href="/2023/04/09/Python-%E4%B8%80%E7%BA%A76/"/>
      <url>/2023/04/09/Python-%E4%B8%80%E7%BA%A76/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-内置库-turtle"><a href="#Python-内置库-turtle" class="headerlink" title="Python 内置库 - turtle"></a><center>Python 内置库 - turtle</center></h1><h2 id="Python-库"><a href="#Python-库" class="headerlink" title="Python 库"></a>Python 库</h2><img  src=http://www.plantuml.com/plantuml/svg/XPJBJjj058RtVegHihQoI0HRn0A9QoCLgGl8OXnFi4aoW-o9AWj5OW6fa4g3GE6E82fDgKf3MP6QozFus3m6De6GSSVAMSpY_AFl_7FEp8pP75kyMYahDcSMNY9eaQ8Knjdiw2XQLL0ORuBNtVMwH_xcBxXfWhlxgaOHgfGZZ5B5OX4jzDDHJEOSRZ2QdggkE9nOQ8vneZ5M4ZPvxeNdxi1z0pQtWj_N_hSVqFZUtv6FrT5aTSPPYHX2vXFH43IkdtxMuUjUp_K0CiOio9ZJnC9sUjuWc391y4zSEBo4Fstlttc2vHXVb_7d2RMPDL5cdqNwxGsuxHwzt-raD96XFnRCaidL6O8jccXT1e_McYBC7SxSeBNsFlVKI1PhcSn_yo--615zv33LiIqwQFxrjpfmiHvir_tB5fpk9vzjIOASnNobp7ZPr8HqS7S0nu_3W8O4E5Ujv9nqsB6S4pSAQ_TFdLRGsH_6DQL3S2enP73LXiRjCEHRutjF1-eR_datUfEPJA4mqFNtwikowb64e_DFhYRJ7mGbBq6K4X7r3RXpuSj3s8u4IctmriH-2LLTC4nT9pIlgh6BfDIKCKBryEzv1W00><h2 id="Python内置库——Turtle"><a href="#Python内置库——Turtle" class="headerlink" title="Python内置库——Turtle"></a>Python内置库——Turtle</h2><blockquote><p>Turtle 库是 Python 语言中一个很流行的图像绘制函数库。小乌龟在坐标系（横轴X，纵轴Y，坐标原点(0,0)）中，根据一组函数指令的控制，在平面坐标系中移动，根据运行轨迹进行绘图。</p></blockquote><ul><li>turtle 起始位置默认处于坐标原点(0,0)</li><li>turtle 默认运行方向为 0º 方向（0º 方向为 3 点钟方向）</li></ul><h3 id="Python-中使用-Turtle-库"><a href="#Python-中使用-Turtle-库" class="headerlink" title="Python 中使用 Turtle 库"></a>Python 中使用 Turtle 库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="comment">#导入 turtle 库，注意区分大小写</span></span><br><span class="line">turtle.forward(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h4 id="turtle-forward-parameter"><a href="#turtle-forward-parameter" class="headerlink" title="turtle.forward(parameter)"></a>turtle.forward(parameter)</h4><blockquote><p>turtle 面向 0º 方向移动 100px</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="comment">#导入库</span></span><br><span class="line">turtle.forward(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h4 id="turtle-backward-parameter"><a href="#turtle-backward-parameter" class="headerlink" title="turtle.backward(parameter)"></a>turtle.backward(parameter)</h4><blockquote><p>turtle 面向 0º 方向移动 100px</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="comment">#导入库</span></span><br><span class="line">turtle.backward(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h4 id="turtle-left-parameter"><a href="#turtle-left-parameter" class="headerlink" title="turtle.left(parameter)"></a>turtle.left(parameter)</h4><blockquote><p>turtle 逆时针旋转 parameterº</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="comment">#导入库</span></span><br><span class="line">turtle.left(<span class="number">90</span>) <span class="comment">#turtle 面向正上方，12 点钟方向</span></span><br></pre></td></tr></table></figure><h4 id="turtle-right-parameter"><a href="#turtle-right-parameter" class="headerlink" title="turtle.right(parameter)"></a>turtle.right(parameter)</h4><blockquote><p>turtle 顺时针旋转 parameterº</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="comment">#导入库</span></span><br><span class="line">turtle.right(<span class="number">90</span>) <span class="comment">#turtle 面向正下方，6 点钟方向</span></span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-933'>思考：parameter 是否可以为负数</span></p><h4 id="综合应用"><a href="#综合应用" class="headerlink" title="综合应用"></a>综合应用</h4><blockquote><p>画一个距形</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="comment">#专入库</span></span><br><span class="line">turtle.forward(<span class="number">100</span>) <span class="comment">#面向 3 点钟方向，移动 100 px</span></span><br><span class="line">turtle.left(<span class="number">90</span>) <span class="comment">#turtle 面向 12 点钟方向</span></span><br><span class="line">turtle.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 12 点钟方向移动 100 px</span></span><br><span class="line">turtle.left(<span class="number">90</span>) <span class="comment">#turtle 面向 9 点钟方向</span></span><br><span class="line">turtle.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 9 点钟方向移动 100px</span></span><br><span class="line">turtle.left(<span class="number">90</span>) <span class="comment">#turtle 面向 6 点钟方向</span></span><br><span class="line">turtle.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 6 点钟方向移动 100px</span></span><br></pre></td></tr></table></figure><h3 id="画布"><a href="#画布" class="headerlink" title="画布"></a>画布</h3><p>Turtle 是用来绘制图像的，给制在哪的呢？绘制在画布上（Python Turtle Graphics）。也就是 turtle 为我们打开的绘制图像的区域。</p><h4 id="turtle-可以设置画布的大小和颜色"><a href="#turtle-可以设置画布的大小和颜色" class="headerlink" title="turtle 可以设置画布的大小和颜色"></a>turtle 可以设置画布的大小和颜色</h4><blockquote><p>turtle.screensize(width,height,”color”)，width 表示画布的宽，height 表示画布的高，color 表示画布的颜色<br><code>画布默认的大小为 400*300</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="comment">#导入 turtle 库</span></span><br><span class="line">turtle.screensize(<span class="number">500</span>,<span class="number">300</span>,<span class="string">&#x27;purple&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>turtle.setup(width,height,left,top) width 画布的宽，height 画布的高，left 表示的画布距离屏幕左侧的距离，top 表示画布距离屏幕顶部的距离</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="comment"># 导入 turtle 库</span></span><br><span class="line">turtle.setup(<span class="number">100</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h4 id="turtle-创建变量"><a href="#turtle-创建变量" class="headerlink" title="turtle 创建变量"></a>turtle 创建变量</h4><blockquote><p>turtle.Turtle() 获取 turtle 对象<br>turtle.Pen() #获取 turtle 的画笔对象</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="comment">#专入库</span></span><br><span class="line"><span class="comment">#t = turtle.Turtle() #获取 turtle 对象</span></span><br><span class="line">t = turtle.Pen() <span class="comment">#获取 turtle 的画笔对象</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#面向 3 点钟方向，移动 100 px</span></span><br><span class="line">t.left(<span class="number">90</span>) <span class="comment">#turtle 面向 12 点钟方向</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 12 点钟方向移动 100 px</span></span><br><span class="line">t.left(<span class="number">90</span>) <span class="comment">#turtle 面向 9 点钟方向</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 9 点钟方向移动 100px</span></span><br><span class="line">t.left(<span class="number">90</span>) <span class="comment">#turtle 面向 6 点钟方向</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 6 点钟方向移动 100px</span></span><br><span class="line"><span class="comment">#t.screensize(100,100,&#x27;brown&#x27;) #Turtle&#x27; object has no attribute &#x27;screensize&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="turtle-shape-parameter"><a href="#turtle-shape-parameter" class="headerlink" title="turtle.shape(parameter)"></a>turtle.shape(parameter)</h4><blockquote><p>改变 turtle 外观，parameter 可以是 [arrow, turtule, circle, square, triangle, classic(默认箭头)] 中的任意一个</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="comment">#专入库</span></span><br><span class="line">t = turtle.Turtle() <span class="comment">#获取 turtle 对象</span></span><br><span class="line">t.shape(<span class="string">&#x27;turtle&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="画笔"><a href="#画笔" class="headerlink" title="画笔"></a>画笔</h3><h4 id="turtle-pensize-parameter"><a href="#turtle-pensize-parameter" class="headerlink" title="turtle.pensize(parameter)"></a>turtle.pensize(parameter)</h4><blockquote><p>设置画笔大小</p></blockquote><h4 id="turtle-pencolor-parameter"><a href="#turtle-pencolor-parameter" class="headerlink" title="turtle.pencolor(parameter)"></a>turtle.pencolor(parameter)</h4><blockquote><p>设置画笔颜色</p></blockquote><h4 id="turtle-speed-parameter"><a href="#turtle-speed-parameter" class="headerlink" title="turtle.speed(parameter)"></a>turtle.speed(parameter)</h4><blockquote><p>设置画笔速度</p></blockquote><h3 id="综合应用-1"><a href="#综合应用-1" class="headerlink" title="综合应用"></a>综合应用</h3><blockquote><p>用小乌龟画笔在紫色的画布上快速画一个红色粗边框（10），边长为 100px 的矩形</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="comment"># 导入 turtle 库</span></span><br><span class="line">turtle.screensize(<span class="number">400</span>,<span class="number">300</span>,<span class="string">&#x27;purple&#x27;</span>)</span><br><span class="line">t = turtle.Pen()</span><br><span class="line"><span class="comment"># 设置画笔</span></span><br><span class="line">t.shape(<span class="string">&#x27;turtle&#x27;</span>)</span><br><span class="line">t.pensize(<span class="number">10</span>)</span><br><span class="line">t.pencolor(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">t.speed(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 画矩形</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#面向 3 点钟方向，移动 100 px</span></span><br><span class="line">t.left(<span class="number">90</span>) <span class="comment">#turtle 面向 12 点钟方向</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 12 点钟方向移动 100 px</span></span><br><span class="line">t.left(<span class="number">90</span>) <span class="comment">#turtle 面向 9 点钟方向</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 9 点钟方向移动 100px</span></span><br><span class="line">t.left(<span class="number">90</span>) <span class="comment">#turtle 面向 6 点钟方向</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 6 点钟方向移动 100px</span></span><br></pre></td></tr></table></figure><blockquote><p>用三角形画笔在紫色的画布上快速画一个黄色粗边框（10），边长为 100px 的等腰三角形</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="comment">#导入 turtle 库</span></span><br><span class="line"><span class="comment"># 设置画布</span></span><br><span class="line">turtle.screensize(<span class="number">400</span>,<span class="number">300</span>, <span class="string">&#x27;purple&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建变量</span></span><br><span class="line">t = turtle.Pen()</span><br><span class="line"><span class="comment"># 设置笔</span></span><br><span class="line">t.shape(<span class="string">&#x27;triangle&#x27;</span>)</span><br><span class="line">t.pensize(<span class="number">10</span>)</span><br><span class="line">t.pencolor(<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line">t.speed(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 绘制三角形</span></span><br><span class="line">t.forward(<span class="number">100</span>)</span><br><span class="line">t.left(<span class="number">120</span>)</span><br><span class="line">t.forward(<span class="number">100</span>)</span><br><span class="line">t.left(<span class="number">120</span>)</span><br><span class="line">t.forward(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><blockquote><p>在一张画布上同时画出以上两种图形，两个图形之间间距 100</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="comment"># 导入 turtle 库</span></span><br><span class="line">turtle.screensize(<span class="number">400</span>,<span class="number">300</span>,<span class="string">&#x27;purple&#x27;</span>)</span><br><span class="line">t = turtle.Pen()</span><br><span class="line"><span class="comment"># 设置画笔</span></span><br><span class="line">t.shape(<span class="string">&#x27;turtle&#x27;</span>)</span><br><span class="line">t.pensize(<span class="number">10</span>)</span><br><span class="line">t.pencolor(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">t.speed(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 画矩形</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#面向 3 点钟方向，移动 100 px</span></span><br><span class="line">t.left(<span class="number">90</span>) <span class="comment">#turtle 面向 12 点钟方向</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 12 点钟方向移动 100 px</span></span><br><span class="line">t.left(<span class="number">90</span>) <span class="comment">#turtle 面向 9 点钟方向</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 9 点钟方向移动 100px</span></span><br><span class="line">t.left(<span class="number">90</span>) <span class="comment">#turtle 面向 6 点钟方向</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 6 点钟方向移动 100px</span></span><br><span class="line"></span><br><span class="line">t.right(<span class="number">90</span>)</span><br><span class="line">t.forward(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置笔</span></span><br><span class="line">t.shape(<span class="string">&#x27;triangle&#x27;</span>)</span><br><span class="line">t.pensize(<span class="number">10</span>)</span><br><span class="line">t.pencolor(<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line">t.speed(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 绘制三角形</span></span><br><span class="line">t.forward(<span class="number">100</span>)</span><br><span class="line">t.right(<span class="number">120</span>)</span><br><span class="line">t.forward(<span class="number">100</span>)</span><br><span class="line">t.right(<span class="number">120</span>)</span><br><span class="line">t.forward(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h4 id="turtle-up"><a href="#turtle-up" class="headerlink" title="turtle.up()"></a>turtle.up()</h4><blockquote><p>提笔</p></blockquote><h4 id="turtle-down"><a href="#turtle-down" class="headerlink" title="turtle.down()"></a>turtle.down()</h4><blockquote><p>落笔</p></blockquote><h4 id="综合应用-2"><a href="#综合应用-2" class="headerlink" title="综合应用"></a>综合应用</h4><blockquote><p>利用提笔、落笔函数，绘制中间没有连线的三角形</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="comment"># 导入 turtle 库</span></span><br><span class="line">turtle.screensize(<span class="number">400</span>,<span class="number">300</span>,<span class="string">&#x27;purple&#x27;</span>)</span><br><span class="line">t = turtle.Pen()</span><br><span class="line"><span class="comment"># 设置画笔</span></span><br><span class="line">t.shape(<span class="string">&#x27;turtle&#x27;</span>)</span><br><span class="line">t.pensize(<span class="number">10</span>)</span><br><span class="line">t.pencolor(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">t.speed(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 画矩形</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#面向 3 点钟方向，移动 100 px</span></span><br><span class="line">t.left(<span class="number">90</span>) <span class="comment">#turtle 面向 12 点钟方向</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 12 点钟方向移动 100 px</span></span><br><span class="line">t.left(<span class="number">90</span>) <span class="comment">#turtle 面向 9 点钟方向</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 9 点钟方向移动 100px</span></span><br><span class="line">t.left(<span class="number">90</span>) <span class="comment">#turtle 面向 6 点钟方向</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 6 点钟方向移动 100px</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动，绘制三角形</span></span><br><span class="line">t.right(<span class="number">90</span>)</span><br><span class="line">t.up()</span><br><span class="line">t.forward(<span class="number">100</span>)</span><br><span class="line">t.down()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置笔</span></span><br><span class="line">t.shape(<span class="string">&#x27;triangle&#x27;</span>)</span><br><span class="line">t.pensize(<span class="number">10</span>)</span><br><span class="line">t.pencolor(<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line">t.speed(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 绘制三角形</span></span><br><span class="line">t.forward(<span class="number">100</span>)</span><br><span class="line">t.right(<span class="number">120</span>)</span><br><span class="line">t.forward(<span class="number">100</span>)</span><br><span class="line">t.right(<span class="number">120</span>)</span><br><span class="line">t.forward(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h4 id="turtle-goto-x-y"><a href="#turtle-goto-x-y" class="headerlink" title="turtle.goto(x,y)"></a>turtle.goto(x,y)</h4><blockquote><p>画笔称动到指定位置</p></blockquote><h4 id="综合应用-3"><a href="#综合应用-3" class="headerlink" title="综合应用"></a>综合应用</h4><blockquote><p>将以上图形改造成为房子</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="comment"># 导入 turtle 库</span></span><br><span class="line">turtle.screensize(<span class="number">400</span>,<span class="number">300</span>,<span class="string">&#x27;purple&#x27;</span>)</span><br><span class="line">t = turtle.Pen()</span><br><span class="line"><span class="comment"># 设置画笔</span></span><br><span class="line">t.shape(<span class="string">&#x27;turtle&#x27;</span>)</span><br><span class="line">t.pensize(<span class="number">10</span>)</span><br><span class="line">t.pencolor(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">t.speed(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 画矩形</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#面向 3 点钟方向，移动 100 px</span></span><br><span class="line">t.left(<span class="number">90</span>) <span class="comment">#turtle 面向 12 点钟方向</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 12 点钟方向移动 100 px</span></span><br><span class="line">t.left(<span class="number">90</span>) <span class="comment">#turtle 面向 9 点钟方向</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 9 点钟方向移动 100px</span></span><br><span class="line">t.left(<span class="number">90</span>) <span class="comment">#turtle 面向 6 点钟方向</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 6 点钟方向移动 100px</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动，绘制三角形</span></span><br><span class="line">t.right(<span class="number">90</span>)</span><br><span class="line">t.up()</span><br><span class="line">t.goto(<span class="number">115</span>,<span class="number">115</span>)</span><br><span class="line">t.down()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置笔</span></span><br><span class="line">t.shape(<span class="string">&#x27;triangle&#x27;</span>)</span><br><span class="line">t.pensize(<span class="number">10</span>)</span><br><span class="line">t.pencolor(<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line">t.speed(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 绘制三角形</span></span><br><span class="line">t.forward(<span class="number">130</span>)</span><br><span class="line">t.right(<span class="number">120</span>)</span><br><span class="line">t.forward(<span class="number">130</span>)</span><br><span class="line">t.right(<span class="number">120</span>)</span><br><span class="line">t.forward(<span class="number">130</span>)</span><br></pre></td></tr></table></figure><h4 id="turtle-setx"><a href="#turtle-setx" class="headerlink" title="turtle.setx()"></a>turtle.setx()</h4><blockquote><p>画笔在移动到 x 轴指定位置</p></blockquote><h4 id="综合应用-4"><a href="#综合应用-4" class="headerlink" title="综合应用"></a>综合应用</h4><blockquote><p>矩形边上画出绿色的小草</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="comment"># 导入 turtle 库</span></span><br><span class="line">turtle.screensize(<span class="number">400</span>,<span class="number">300</span>,<span class="string">&#x27;purple&#x27;</span>)</span><br><span class="line">t = turtle.Pen()</span><br><span class="line"><span class="comment"># 设置画笔</span></span><br><span class="line">t.shape(<span class="string">&#x27;turtle&#x27;</span>)</span><br><span class="line">t.pensize(<span class="number">10</span>)</span><br><span class="line">t.pencolor(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">t.speed(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 画矩形</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#面向 3 点钟方向，移动 100 px</span></span><br><span class="line">t.left(<span class="number">90</span>) <span class="comment">#turtle 面向 12 点钟方向</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 12 点钟方向移动 100 px</span></span><br><span class="line">t.left(<span class="number">90</span>) <span class="comment">#turtle 面向 9 点钟方向</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 9 点钟方向移动 100px</span></span><br><span class="line">t.left(<span class="number">90</span>) <span class="comment">#turtle 面向 6 点钟方向</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 6 点钟方向移动 100px</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动，绘制三角形</span></span><br><span class="line">t.right(<span class="number">90</span>)</span><br><span class="line">t.up()</span><br><span class="line">t.goto(<span class="number">115</span>,<span class="number">115</span>)</span><br><span class="line">t.down()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画小草</span></span><br><span class="line">t.up() <span class="comment">#提笔</span></span><br><span class="line">t.setx(<span class="number">120</span>)</span><br><span class="line">t.down() <span class="comment">#落笔</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置画笔</span></span><br><span class="line">t.shape(<span class="string">&#x27;turtle&#x27;</span>)</span><br><span class="line">t.pensize(<span class="number">6</span>)</span><br><span class="line">t.pencolor(<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t.left(<span class="number">135</span>)</span><br><span class="line">t.forward(<span class="number">50</span>)</span><br><span class="line">t.right(<span class="number">90</span>)</span><br><span class="line">t.forward(<span class="number">50</span>)</span><br><span class="line">t.left(<span class="number">90</span>)</span><br><span class="line">t.forward(<span class="number">70</span>)</span><br><span class="line">t.right(<span class="number">90</span>)</span><br><span class="line">t.forward(<span class="number">70</span>)</span><br><span class="line">t.left(<span class="number">90</span>)</span><br><span class="line">t.forward(<span class="number">80</span>)</span><br><span class="line">t.right(<span class="number">90</span>)</span><br><span class="line">t.forward(<span class="number">80</span>)</span><br></pre></td></tr></table></figure><h4 id="turtle-sety"><a href="#turtle-sety" class="headerlink" title="turtle.sety()"></a>turtle.sety()</h4><blockquote><p>画笔在移动到 y 轴指定位置</p></blockquote><h4 id="综合应用-5"><a href="#综合应用-5" class="headerlink" title="综合应用"></a>综合应用</h4><blockquote><p>矩形边上画出绿色的小草</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="comment"># 导入 turtle 库</span></span><br><span class="line">turtle.screensize(<span class="number">400</span>,<span class="number">300</span>,<span class="string">&#x27;purple&#x27;</span>)</span><br><span class="line">t = turtle.Pen()</span><br><span class="line"><span class="comment"># 设置画笔</span></span><br><span class="line">t.shape(<span class="string">&#x27;turtle&#x27;</span>)</span><br><span class="line">t.pensize(<span class="number">10</span>)</span><br><span class="line">t.pencolor(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">t.speed(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 画矩形</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#面向 3 点钟方向，移动 100 px</span></span><br><span class="line">t.left(<span class="number">90</span>) <span class="comment">#turtle 面向 12 点钟方向</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 12 点钟方向移动 100 px</span></span><br><span class="line">t.left(<span class="number">90</span>) <span class="comment">#turtle 面向 9 点钟方向</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 9 点钟方向移动 100px</span></span><br><span class="line">t.left(<span class="number">90</span>) <span class="comment">#turtle 面向 6 点钟方向</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 6 点钟方向移动 100px</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动，绘制三角形</span></span><br><span class="line">t.right(<span class="number">90</span>)</span><br><span class="line">t.up()</span><br><span class="line">t.goto(<span class="number">115</span>,<span class="number">115</span>)</span><br><span class="line">t.down()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置笔</span></span><br><span class="line">t.shape(<span class="string">&#x27;triangle&#x27;</span>)</span><br><span class="line">t.pensize(<span class="number">10</span>)</span><br><span class="line">t.pencolor(<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line">t.speed(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制三角形</span></span><br><span class="line">t.forward(<span class="number">130</span>)</span><br><span class="line">t.right(<span class="number">120</span>)</span><br><span class="line">t.forward(<span class="number">130</span>)</span><br><span class="line">t.right(<span class="number">120</span>)</span><br><span class="line">t.forward(<span class="number">130</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画小草</span></span><br><span class="line">t.up() <span class="comment">#提笔</span></span><br><span class="line">t.sety(<span class="number">0</span>)</span><br><span class="line">t.down() <span class="comment">#落笔</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置画笔</span></span><br><span class="line">t.shape(<span class="string">&#x27;arrow&#x27;</span>)</span><br><span class="line">t.pensize(<span class="number">6</span>)</span><br><span class="line">t.pencolor(<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t.left(<span class="number">105</span>)</span><br><span class="line">t.forward(<span class="number">50</span>)</span><br><span class="line">t.right(<span class="number">90</span>)</span><br><span class="line">t.forward(<span class="number">50</span>)</span><br><span class="line">t.left(<span class="number">90</span>)</span><br><span class="line">t.forward(<span class="number">70</span>)</span><br><span class="line">t.right(<span class="number">90</span>)</span><br><span class="line">t.forward(<span class="number">70</span>)</span><br><span class="line">t.left(<span class="number">90</span>)</span><br><span class="line">t.forward(<span class="number">80</span>)</span><br><span class="line">t.right(<span class="number">90</span>)</span><br><span class="line">t.forward(<span class="number">80</span>)</span><br></pre></td></tr></table></figure><h4 id="turtle-fillcolor-colorstring-填充颜色"><a href="#turtle-fillcolor-colorstring-填充颜色" class="headerlink" title="turtle.fillcolor(colorstring) 填充颜色"></a>turtle.fillcolor(colorstring) 填充颜色</h4><h4 id="turtle-color-color-color-同时设置笔与填充色"><a href="#turtle-color-color-color-同时设置笔与填充色" class="headerlink" title="turtle.color(color, color) 同时设置笔与填充色"></a>turtle.color(color, color) 同时设置笔与填充色</h4><blockquote><p>设置绘制图形的填充颜色</p></blockquote><center>绘制黄色小星星</center><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.screensize(<span class="literal">None</span>,<span class="literal">None</span>,<span class="string">&#x27;purple&#x27;</span>)</span><br><span class="line">t = turtle.Pen()</span><br><span class="line"><span class="comment"># t.pencoloe(&#x27;yellow&#x27;)</span></span><br><span class="line"><span class="comment"># t.fillcolor(&#x27;yellow&#x27;)</span></span><br><span class="line">t.color(<span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;yellow&quot;</span>)</span><br><span class="line">t.speed(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">t.begin_fill()</span><br><span class="line">t.forward(<span class="number">50</span>)</span><br><span class="line">t.left(<span class="number">144</span>)</span><br><span class="line">t.forward(<span class="number">50</span>)</span><br><span class="line">t.left(<span class="number">144</span>)</span><br><span class="line">t.forward(<span class="number">50</span>)</span><br><span class="line">t.left(<span class="number">144</span>)</span><br><span class="line">t.forward(<span class="number">50</span>)</span><br><span class="line">t.end_fill()</span><br></pre></td></tr></table></figure><h4 id="综合应用-6"><a href="#综合应用-6" class="headerlink" title="综合应用"></a>综合应用</h4><blockquote><p>房子，草地，星星</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">```python</span><br><span class="line"><span class="keyword">import</span> turtle <span class="comment"># 导入 turtle 库</span></span><br><span class="line">turtle.screensize(<span class="number">400</span>,<span class="number">300</span>,<span class="string">&#x27;purple&#x27;</span>)</span><br><span class="line">t = turtle.Pen()</span><br><span class="line"><span class="comment"># 设置画笔</span></span><br><span class="line">t.shape(<span class="string">&#x27;turtle&#x27;</span>)</span><br><span class="line">t.pensize(<span class="number">10</span>)</span><br><span class="line">t.pencolor(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">t.speed(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 画矩形</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#面向 3 点钟方向，移动 100 px</span></span><br><span class="line">t.left(<span class="number">90</span>) <span class="comment">#turtle 面向 12 点钟方向</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 12 点钟方向移动 100 px</span></span><br><span class="line">t.left(<span class="number">90</span>) <span class="comment">#turtle 面向 9 点钟方向</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 9 点钟方向移动 100px</span></span><br><span class="line">t.left(<span class="number">90</span>) <span class="comment">#turtle 面向 6 点钟方向</span></span><br><span class="line">t.forward(<span class="number">100</span>) <span class="comment">#turtle 面向 6 点钟方向移动 100px</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动，绘制三角形</span></span><br><span class="line">t.right(<span class="number">90</span>)</span><br><span class="line">t.up()</span><br><span class="line">t.goto(<span class="number">115</span>,<span class="number">115</span>)</span><br><span class="line">t.down()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置笔</span></span><br><span class="line">t.shape(<span class="string">&#x27;triangle&#x27;</span>)</span><br><span class="line">t.pensize(<span class="number">10</span>)</span><br><span class="line">t.pencolor(<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line">t.speed(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制三角形</span></span><br><span class="line">t.forward(<span class="number">130</span>)</span><br><span class="line">t.right(<span class="number">120</span>)</span><br><span class="line">t.forward(<span class="number">130</span>)</span><br><span class="line">t.right(<span class="number">120</span>)</span><br><span class="line">t.forward(<span class="number">130</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画小草</span></span><br><span class="line">t.up() <span class="comment">#提笔</span></span><br><span class="line">t.sety(<span class="number">0</span>)</span><br><span class="line">t.down() <span class="comment">#落笔</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置画笔</span></span><br><span class="line">t.shape(<span class="string">&#x27;arrow&#x27;</span>)</span><br><span class="line">t.pensize(<span class="number">6</span>)</span><br><span class="line">t.pencolor(<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t.left(<span class="number">105</span>)</span><br><span class="line">t.forward(<span class="number">50</span>)</span><br><span class="line">t.right(<span class="number">90</span>)</span><br><span class="line">t.forward(<span class="number">50</span>)</span><br><span class="line">t.left(<span class="number">90</span>)</span><br><span class="line">t.forward(<span class="number">70</span>)</span><br><span class="line">t.right(<span class="number">90</span>)</span><br><span class="line">t.forward(<span class="number">70</span>)</span><br><span class="line">t.left(<span class="number">90</span>)</span><br><span class="line">t.forward(<span class="number">80</span>)</span><br><span class="line">t.right(<span class="number">90</span>)</span><br><span class="line">t.forward(<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 绘制天上的星星</span></span><br><span class="line">t.up()</span><br><span class="line">t.goto(<span class="number">250</span>,<span class="number">280</span>)</span><br><span class="line">t.down()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置画笔</span></span><br><span class="line">t.color(<span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;yellow&quot;</span>)</span><br><span class="line">t.pensize(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">t.begin_fill()</span><br><span class="line">t.forward(<span class="number">50</span>)</span><br><span class="line">t.left(<span class="number">144</span>)</span><br><span class="line">t.forward(<span class="number">50</span>)</span><br><span class="line">t.left(<span class="number">144</span>)</span><br><span class="line">t.forward(<span class="number">50</span>)</span><br><span class="line">t.left(<span class="number">144</span>)</span><br><span class="line">t.forward(<span class="number">50</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 绘制天上的星星</span></span><br><span class="line">t.up()</span><br><span class="line">t.goto(<span class="number">150</span>,<span class="number">240</span>)</span><br><span class="line">t.down()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置画笔</span></span><br><span class="line">t.color(<span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;yellow&quot;</span>)</span><br><span class="line">t.pensize(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">t.begin_fill()</span><br><span class="line">t.forward(<span class="number">50</span>)</span><br><span class="line">t.left(<span class="number">144</span>)</span><br><span class="line">t.forward(<span class="number">50</span>)</span><br><span class="line">t.left(<span class="number">144</span>)</span><br><span class="line">t.forward(<span class="number">50</span>)</span><br><span class="line">t.left(<span class="number">144</span>)</span><br><span class="line">t.forward(<span class="number">50</span>)</span><br><span class="line">t.end_fill()</span><br></pre></td></tr></table></figure><h4 id="turtle-circle-radius-画圆"><a href="#turtle-circle-radius-画圆" class="headerlink" title="turtle.circle(radius) 画圆"></a>turtle.circle(radius) 画圆</h4><h4 id="turtle-circle-size-steps-3-画三角形"><a href="#turtle-circle-size-steps-3-画三角形" class="headerlink" title="turtle.circle(size,steps=3) 画三角形"></a>turtle.circle(size,steps=3) 画三角形</h4><h4 id="turtle-circle-120-180-画半圆"><a href="#turtle-circle-120-180-画半圆" class="headerlink" title="turtle.circle(120, 180) 画半圆"></a>turtle.circle(120, 180) 画半圆</h4><h4 id="turtle-dot-size-None-color-画圆点"><a href="#turtle-dot-size-None-color-画圆点" class="headerlink" title="turtle.dot(size=None, color) 画圆点"></a>turtle.dot(size=None, color) 画圆点</h4><blockquote><p>按给定的 size 画圆点，size 是直径，None 时，是 pensize+4 和 2*pensize 中取最大的值或 &gt;=1 的整数。color 圆点的颜色</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">t = turtle.Pen()</span><br><span class="line">t.circle(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">t.up()</span><br><span class="line">t.goto(<span class="number">40</span>, <span class="number">0</span>)</span><br><span class="line">t.down()</span><br><span class="line"><span class="comment">#画三角形</span></span><br><span class="line">t.circle(<span class="number">20</span>,steps=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">t.up()</span><br><span class="line">t.goto(<span class="number">60</span>, <span class="number">0</span>)</span><br><span class="line">t.down()</span><br><span class="line"></span><br><span class="line">t.left(<span class="number">180</span>)</span><br><span class="line">t.circle(<span class="number">20</span>, <span class="number">180</span>)</span><br><span class="line"></span><br><span class="line">t.up()</span><br><span class="line">t.goto(<span class="number">80</span>, <span class="number">0</span>)</span><br><span class="line">t.down()</span><br><span class="line"></span><br><span class="line">t.dot(<span class="number">20</span>, <span class="string">&#x27;black&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-一级5</title>
      <link href="/2023/04/08/Python-%E4%B8%80%E7%BA%A75/"/>
      <url>/2023/04/08/Python-%E4%B8%80%E7%BA%A75/</url>
      
        <content type="html"><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a><center>运算符</center></h1><pre class="mermaid"> mindmap 本章知识点  ① 算术运算符  ① 逻辑运算符  ① 关系运算符  比较运算符  赋值运算符  位运算符    按位 & 与    按位 | 或    按位 ^ 异或    接位 ~ 取反  运算符优先级</pre><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><blockquote><p>用于处理四则运算的符号</p></blockquote><hr><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>1+1</td><td>2</td></tr><tr><td>-</td><td>减法</td><td>1-1</td><td>0</td></tr><tr><td>*</td><td>乘法</td><td>1*1</td><td>1</td></tr><tr><td>/</td><td>除法</td><td>1/1</td><td>1</td></tr><tr><td>()</td><td>括号运算符</td><td>(1+2)*3</td><td>9</td></tr></tbody></table><center><span class='custom-box custom-box-993'>补充</span></center><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>//</td><td>整除</td><td>10//3</td><td>3</td></tr><tr><td>%</td><td>取余</td><td>10%3</td><td>1</td></tr><tr><td>**</td><td>幂运算</td><td>2**4</td><td>16</td></tr></tbody></table><h3 id="算术运算符优先级"><a href="#算术运算符优先级" class="headerlink" title="算术运算符优先级"></a>算术运算符优先级</h3><blockquote><ul><li>第一级：**,()</li><li>第二级：*,/,%,//</li><li>第三级：+,-</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var = <span class="number">2</span></span><br><span class="line">num = <span class="number">3</span></span><br><span class="line"><span class="comment"># 加法</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;加法：&#x27;</span>, var + var) <span class="comment">#加法： 6</span></span><br><span class="line"><span class="comment"># 减法</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;减法：&#x27;</span>, var - var) <span class="comment">#减法： 0</span></span><br><span class="line"><span class="comment"># 乘法</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;乘法：&#x27;</span>, var * var) <span class="comment">#乘法： 9</span></span><br><span class="line"><span class="comment"># 除法</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;除法：&#x27;</span>, var / var) <span class="comment">#除法： 1.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-----------------&#x27;</span>)</span><br><span class="line"><span class="comment"># 取整</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;取整：&#x27;</span>, var // num) <span class="comment">#取整： 3</span></span><br><span class="line"><span class="comment"># 取余</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;取余：&#x27;</span>, var % num) <span class="comment">#取余： 1</span></span><br><span class="line"><span class="comment"># 幂运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;幂运算：&#x27;</span>, var ** num) <span class="comment">#幂运算： 1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 优先级</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;优先级：&#x27;</span>, var + var ** num / var * num - num)</span><br></pre></td></tr></table></figure><h3 id="加法运算符"><a href="#加法运算符" class="headerlink" title="加法运算符"></a>加法运算符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的年龄：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;今年你&#x27;</span>+age+<span class="string">&#x27;岁了&#x27;</span>) <span class="comment">#+实现字符串拼接</span></span><br><span class="line"><span class="comment"># 思考：字符串与数值是否可以进行加法运算？</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;2年后你&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">int</span>(age)+<span class="number">2</span>)+<span class="string">&#x27;岁了&#x27;</span>) <span class="comment">#+运算与字符串拼接</span></span><br></pre></td></tr></table></figure><h2 id="比较运算符【关系运算符】"><a href="#比较运算符【关系运算符】" class="headerlink" title="比较运算符【关系运算符】"></a>比较运算符【关系运算符】</h2><p>生活中，我们会遇到年龄、身高、智商等数据的比较。网站或ATM 机，我们经常需要输入密码，进行密码的比较。这些都需要使用比较运算符。</p><pre class="mermaid">%%{init: {"pie": {"textPosition": 0.5}, "themeVariables": {"pieOuterStrokeWidth": "5px"}} }%% pie title 比较运算符——知识比重图    "数学能力" : 1    "逻辑推理能力" : 1    "纠错能力" : 1    "编程能力" : 1    "动手能力" : 2</pre><blockquote><p>Python 中运行比较运算符表达式，返回一个布尔类型的值。</p></blockquote><table><thead><tr><th>数学</th><th>Python</th><th>描述</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>&gt;</td><td>&gt;</td><td>大于</td><td>68&gt;33</td><td>True</td></tr><tr><td>&lt;</td><td>&lt;</td><td>小于</td><td>68&lt;33</td><td>False</td></tr><tr><td>=</td><td>==</td><td>等于</td><td>68==33</td><td>False</td></tr><tr><td>$\neq$</td><td>!=</td><td>不等于</td><td>68!=33</td><td>True</td></tr><tr><td>$\ge$</td><td>&gt;=</td><td>大于等于</td><td>68&gt;=33</td><td>True</td></tr><tr><td>$\le$</td><td>&lt;=</td><td>小于等于</td><td>68&lt;=33</td><td>False</td></tr></tbody></table><center>数字类型数据的比较</center>> 比较两位计算机语言开发者的年龄<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">guido_age = <span class="number">68</span></span><br><span class="line">mitchel_age = <span class="number">67</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;guido_age &gt; mitchel_age&#x27;</span>,guido_age &gt; mitchel_age) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;guido_age &lt; mitchel_age&#x27;</span>,guido_age &lt; mitchel_age) <span class="comment">#False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;guido_age == mitchel_age&#x27;</span>,guido_age == mitchel_age) <span class="comment">#False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;guido_age != mitchel_age&#x27;</span>,guido_age != mitchel_age) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;guido_age &gt;= mitchel_age&#x27;</span>,guido_age &gt;= mitchel_age) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;guido_age &lt;= mitchel_age&#x27;</span>,guido_age &lt;= mitchel_age) <span class="comment">#False</span></span><br></pre></td></tr></table></figure><center>字符串类型间的比较</center><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b&gt;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&gt;<span class="string">&#x27;a&#x27;</span>) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A&lt;a&#x27;</span>, <span class="string">&#x27;A&#x27;</span>&gt;<span class="string">&#x27;a&#x27;</span>) <span class="comment">#False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ab&lt;ac&#x27;</span>,<span class="string">&#x27;ab&#x27;</span>&lt;<span class="string">&#x27;ac&#x27;</span>) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;guido == guido&#x27;</span>, <span class="string">&#x27;guido&#x27;</span> == <span class="string">&#x27;guido&#x27;</span>) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;guido == mitchel&#x27;</span>, <span class="string">&#x27;guido&#x27;</span> != <span class="string">&#x27;mitchel&#x27;</span>) <span class="comment">#True</span></span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-933'>思考：为什么呢？计算机怎么这么无聊，要判断两字符串？</span><br><span class='custom-box custom-box-933'>homework</span><br>登录 babycoding 学习网站的密码(John1903)，怎么判断用户输入的密码是否正确？</p><p><span class='custom-box custom-box-393'>关系运算符与算术运算符的混合运算，先算算术运算符，再算关系运算符。结果一定是 True 或 False</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">68</span>+<span class="number">33</span>&gt;<span class="number">68</span>-<span class="number">33</span>) <span class="comment">#True</span></span><br></pre></td></tr></table></figure><center>and 可以连写</center><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">33</span></span><br><span class="line"><span class="number">68</span>&gt;a&gt;<span class="number">32</span> <span class="comment">#a&gt;32 and 68&gt;a    </span></span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>用法</th><th>综合方向</th></tr></thead><tbody><tr><td>and</td><td>逻辑与</td><td>expression1 and expression2</td><td>从左到右</td></tr><tr><td>or</td><td>逻辑或</td><td>expression1 or expression2</td><td>从左到右</td></tr><tr><td>not</td><td>逻辑非</td><td>not expression</td><td>从右到左</td></tr></tbody></table><p><span class='custom-box custom-box-393'>逻辑运算符优先级：not &gt; or &gt; and</span></p><center>两个表达式都为 True</center><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">expression1 = <span class="literal">True</span></span><br><span class="line">expression2 = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(expression1 <span class="keyword">and</span> expression2) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(expression1 <span class="keyword">or</span> expression2) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> expression1) <span class="comment">#False</span></span><br></pre></td></tr></table></figure><center>True False</center><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">expression1 = <span class="literal">False</span></span><br><span class="line">expression2 = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(expression1 <span class="keyword">and</span> expression2) <span class="comment">#False</span></span><br><span class="line"><span class="built_in">print</span>(expression1 <span class="keyword">or</span> expression2) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> expression1) <span class="comment">#True</span></span><br></pre></td></tr></table></figure><center>False False</center><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">expression1 = <span class="literal">False</span></span><br><span class="line">expression2 = <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(expression1 <span class="keyword">and</span> expression2) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(expression1 <span class="keyword">or</span> expression2) <span class="comment">#False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> expression1) <span class="comment">#True</span></span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-933'>思考：表达式，expression1 expression2 是表达式吗？</span><br><span class='custom-box custom-box-933'>思考：什么是表达式</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">68</span> &gt; <span class="number">33</span> <span class="keyword">and</span> <span class="number">33</span> &lt; <span class="number">68</span>) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">68</span> &gt; <span class="number">33</span> <span class="keyword">and</span> <span class="keyword">not</span>(<span class="number">33</span> &lt; <span class="number">68</span>)) <span class="comment">#False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">68</span>&gt;<span class="number">33</span> <span class="keyword">and</span> <span class="number">68</span>&lt;<span class="number">33</span> <span class="keyword">or</span> <span class="keyword">not</span>(<span class="number">68</span>&gt;<span class="number">33</span>)) <span class="comment">#Flase</span></span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th><th>即</th></tr></thead><tbody><tr><td>=</td><td>赋值运算</td><td>x=y</td><td>x=y</td></tr><tr><td>+=</td><td>加赋值</td><td>x+=y</td><td>x=x+y</td></tr><tr><td>-=</td><td>减赋值</td><td>x-=y</td><td>x=x-y</td></tr><tr><td>*=</td><td>乘赋值</td><td>x*=y</td><td>x=x*y</td></tr><tr><td>/=</td><td>除赋值</td><td>x/=y</td><td>x=x/y</td></tr><tr><td>%=</td><td>取余赋值</td><td>x%=y</td><td>x=x%y</td></tr><tr><td>**=</td><td>幂赋值</td><td>x**=y</td><td>x=x**y</td></tr><tr><td>//=</td><td>整除赋值</td><td>x//=y</td><td>x=x//y</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 声明变量</span></span><br><span class="line"><span class="comment"># 赋值运算</span></span><br><span class="line">x = <span class="number">2</span></span><br><span class="line">y = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加赋值</span></span><br><span class="line">x+=y <span class="comment">#相当于 x=x+y</span></span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">#5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 减赋值</span></span><br><span class="line">x-=y <span class="comment">#相当于 x=x-y</span></span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘赋值</span></span><br><span class="line">x*=y <span class="comment">#相当于 x=x*y</span></span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">#6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 除赋值</span></span><br><span class="line">x/=y <span class="comment">#相当于 x=x/y</span></span><br><span class="line"><span class="built_in">print</span>(x, <span class="built_in">type</span>(x)) <span class="comment">#2.0 &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取余赋值</span></span><br><span class="line">x%=y <span class="comment">#相当于 x=x%y</span></span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">#2.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整除赋值</span></span><br><span class="line">x//=y <span class="comment">#相当于 x=x//y</span></span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">#0.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 幂运算符</span></span><br><span class="line">x**=y <span class="comment">#相当于 x=x**y</span></span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">#8.0</span></span><br></pre></td></tr></table></figure><hr><center>其它赋值操作</center><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 链式赋值</span></span><br><span class="line">x=y=z=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(x,y,z) <span class="comment"># 1 1 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解包赋值</span></span><br><span class="line">a,b=<span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(a,b) <span class="comment">#1 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解包赋值应用——交换变量的值</span></span><br><span class="line">a,b=b,a</span><br><span class="line"><span class="built_in">print</span>(a,b) <span class="comment">#2 1</span></span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-933'>homework:</span></p><ul><li>x=5,y=3，执行 x,y=y,x 之后，x 和 y 的值分别是什么？</li></ul><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><blockquote><p>二进制数进行运算。<a href="">!关于二进制更多。。。</a></p></blockquote><h3 id="按”位与“运算（-amp-）"><a href="#按”位与“运算（-amp-）" class="headerlink" title="按”位与“运算（&amp;）"></a>按”位与“运算（&amp;）</h3><ul><li>先计算出两个十进数的二进制；</li><li>接着数位对齐；</li><li>进行运算。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义变量</span></span><br><span class="line">variable = <span class="number">8</span></span><br><span class="line">variable_ = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 十进制数转二进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(variable)) <span class="comment">#0b1000</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(variable_)) <span class="comment">#ob10</span></span><br></pre></td></tr></table></figure><blockquote><p>按位 &amp; 运算，两个二进制数进行 &amp; 运算，两个数对应数位上都是 1，结果为 1；否则为 0.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  1000</span><br><span class="line">&amp; 0010</span><br><span class="line">——————</span><br><span class="line">  0000</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;0000&#x27;</span>, <span class="number">2</span>)) <span class="comment">#0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">8</span>&amp;<span class="number">2</span>) <span class="comment">#0</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>按位 | 运算，两个二进制数进行 | 运算，两个数对应数位上有一个是 1，结果为 1；否则为 0.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  1000</span><br><span class="line">| 0010</span><br><span class="line">——————</span><br><span class="line">  1010</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;1010&#x27;</span>, <span class="number">2</span>)) <span class="comment">#10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">8</span>|<span class="number">2</span>) <span class="comment">#10</span></span><br></pre></td></tr></table></figure><blockquote><p>按位异或 ^，两个二进制数进行 ^ 运算，两个数对应数位上数字相同，结果为 0；否则为 1</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  1000</span><br><span class="line">^ 0010</span><br><span class="line">——————</span><br><span class="line">  1010</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;1010&#x27;</span>, <span class="number">2</span>)) <span class="comment">#10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">8</span> ^ <span class="number">2</span>) <span class="comment">#10</span></span><br></pre></td></tr></table></figure><blockquote><p>按位取反 ~，操作数每个数位进行取反操作</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~ 0000 0010</span><br><span class="line">————————————</span><br><span class="line">  1111 1101</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print(int(&#x27;11111101&#x27;, 2)) #5</span></span><br><span class="line"><span class="built_in">print</span>(~<span class="number">2</span>) <span class="comment"># -3</span></span><br></pre></td></tr></table></figure><blockquote><p>左移位 运算 &lt;&lt;，将一个二进制数向左移动指定位数，左边（高位）溢出丢弃，右边（低位）空出位置补 0.</p></blockquote><table style="width: 30%"><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr style="background:#aa3"><td colspan="10" align="center"> <—— 左移 2 位</td></tr><tr><td style="text-decoration: line-through; background: #a33">0</td><td style="text-decoration: line-through; background: #a33">0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td style="background: #3a3">0</td><td style="background: #3a3">0</td></tr></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;00100000&#x27;</span>, <span class="number">2</span>)) <span class="comment">#32 </span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">8</span>&lt;&lt;<span class="number">2</span>) <span class="comment">#32 相当于 8 * 2 * 2 = 32</span></span><br></pre></td></tr></table></figure><blockquote><p>右移位 运算 &gt;&gt;，将二进制数向右移动指定位数，右边（低位）溢出丢弃，左边（高位）最高位是 0，表示正数，继续补0；最高位数 1，为负数，则补1</p></blockquote><table style="width: 30%"><tr><td></td><td></td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr style="background:#aa3"><td colspan="10" align="center"> >> 右移 2 位</td></tr><tr><td style="background: #3a3">0</td><td style="background: #3a3">0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td style="text-decoration: line-through; background: #a33">0</td><td style="text-decoration: line-through; background: #a33">0</td></tr></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;00000010&#x27;</span>, <span class="number">2</span>)) <span class="comment">#32 </span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">8</span>&gt;&gt;<span class="number">2</span>) <span class="comment">#2 相当于 8 // 2 // 2 = 2</span></span><br></pre></td></tr></table></figure><blockquote><p>右移位 运算 &gt;&gt;，将二进制数向右移动指定位数，右边（低位）溢出丢弃，左边（高位）最高位数 1，为负数，则补1</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(-<span class="number">8</span>&gt;&gt;<span class="number">2</span>) <span class="comment">#2 相当于 8 // 2 // 2 = -2</span></span><br></pre></td></tr></table></figure><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><table><thead><tr><th>序号</th><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>**</td><td>幂运算</td></tr><tr><td>2</td><td>~，+，-</td><td>取反，正号，负号</td></tr><tr><td>3</td><td>*，/, %, //</td><td>算术运算符</td></tr><tr><td>4</td><td>+，-</td><td>算术运算符</td></tr><tr><td>5</td><td>&lt;&lt;, &gt;&gt;</td><td>位运算符，左移，右移</td></tr><tr><td>6</td><td>&amp;</td><td>按位 &amp;</td></tr><tr><td>7</td><td>^</td><td>按位 ^</td></tr><tr><td>8</td><td>|</td><td>按位 |</td></tr><tr><td>9</td><td>&lt;,&lt;=,&gt;,&gt;=,!=,==</td><td>比较运算符</td></tr><tr><td>10</td><td>=</td><td>赋值运算符</td></tr></tbody></table><p><span class='custom-box custom-box-933'>homework</span></p><ul><li>键盘输出一个4位数，并分别输出个、十、百、千位上的数字（两种方式：1. 可以采用字符串索引；2. 采用算术运算）</li><li>根据父母身高，预测孩子身高（算法：父亲身高+母亲身高）*0.54</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-一级4</title>
      <link href="/2023/04/07/Python-%E4%B8%80%E7%BA%A74/"/>
      <url>/2023/04/07/Python-%E4%B8%80%E7%BA%A74/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型之间的转换"><a href="#数据类型之间的转换" class="headerlink" title="数据类型之间的转换"></a><center>数据类型之间的转换</center></h1><pre class="mermaid"> mindmap (本课知识点)  数据类型转换   隐式转换   显式转换  eval["eval()内置函数"]</pre><h2 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h2><blockquote><p>进行数字加法运算时，Boolean 类型变量，隐式转换为数字 1 进行运算。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> + b) <span class="comment">#11</span></span><br></pre></td></tr></table></figure><h2 id="显式转换"><a href="#显式转换" class="headerlink" title="显式转换"></a>显式转换</h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>int(p)</td><td>将参数 p 转换为整数类型</td></tr><tr><td>float(p)</td><td>将参数 p 转换为浮点数类型</td></tr><tr><td>str(p)</td><td>将参数 p 转换为字符串类型</td></tr><tr><td>chr(p)</td><td>将参数（整数）p 转换为一个字符</td></tr><tr><td>ord(p)</td><td>将参数 p 转换为对应的整数值</td></tr><tr><td>hex(p)</td><td>将参数 p 转换为十六进制字符串</td></tr><tr><td>oct(p)</td><td>将参数 p 转换为八进制字符串</td></tr><tr><td>bin(p)</td><td>将参数 p 转换为二进制字符串</td></tr></tbody></table><hr><center>int(parameter)</center><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># float 类型转 int 类型</span></span><br><span class="line"><span class="comment"># int(parameter)</span></span><br><span class="line">pi = <span class="number">3.1415926</span></span><br><span class="line">temperature = -<span class="number">93.2</span> <span class="comment">#南极最低气温</span></span><br><span class="line">price = <span class="number">99.9</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;float 类型转 int 类型：&#x27;</span>, <span class="built_in">int</span>(pi)) <span class="comment">#3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;float 类型转 int 类型：&#x27;</span>, <span class="built_in">int</span>(temperature)) <span class="comment">#-93</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;float 类型转 int 类型：&#x27;</span>, <span class="built_in">int</span>(price)) <span class="comment">#99</span></span><br><span class="line">string_int = <span class="string">&#x27;99&#x27;</span></span><br><span class="line">string_float = <span class="string">&#x27;9.9&#x27;</span></span><br><span class="line">string_num = <span class="string">&#x27;1E2&#x27;</span></span><br><span class="line">string_bit = <span class="string">&#x27;1000&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;str 类型转 int 类型：&#x27;</span>, <span class="built_in">int</span>(string_int)) <span class="comment">#str 类型转 int 类型： 99</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;二进制字符串转换为十进制：&#x27;</span>, <span class="built_in">int</span>(string_bit, <span class="number">2</span>)) <span class="comment">#二进制字符串转换为十进制：8</span></span><br><span class="line"><span class="comment">#print(&#x27;str 类型转 int 类型：&#x27;, int(string_float)) #ValueError: invalid literal for int() with base 10: &#x27;9.9&#x27;</span></span><br><span class="line"><span class="comment">#print(&#x27;str 类型转 int 类型：&#x27;, int(string_num)) #ValueError: invalid literal for int() with base 10: &#x27;1E2&#x27;</span></span><br></pre></td></tr></table></figure><hr><center>float(parameter)</center><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># int 转 float 类型</span></span><br><span class="line"><span class="comment"># float(parameter)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;int 类型转换为 float 类型：&#x27;</span>, <span class="built_in">float</span>(<span class="number">20</span>), <span class="built_in">type</span>(<span class="built_in">float</span>(<span class="number">20</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;str 类型转换为 float 类型：&#x27;</span>, <span class="built_in">float</span>(<span class="string">&#x27;20&#x27;</span>), <span class="built_in">type</span>(<span class="built_in">float</span>(<span class="string">&#x27;20&#x27;</span>))) <span class="comment">#20.0</span></span><br></pre></td></tr></table></figure><hr><center>str(parameter)</center><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str(parameter)</span></span><br><span class="line"><span class="comment"># int 转 str</span></span><br><span class="line">int_str = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;int 类型转 str 类型：&#x27;</span>, <span class="built_in">str</span>(int_str), <span class="built_in">type</span>(<span class="built_in">str</span>(int_str))) <span class="comment">#10 int 类型转 str 类型： &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="comment"># float 转 str</span></span><br><span class="line">float_str = <span class="string">&#x27;3.1415926&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;float 类型转 str 类型：&#x27;</span>, <span class="built_in">str</span>(float_str), <span class="built_in">type</span>(<span class="built_in">str</span>(float_str))) <span class="comment">#3.1415926 float 类型转 str 类型： &lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure><hr><center>+ 的使用</center><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;100&#x27;</span> + <span class="string">&#x27;200&#x27;</span>) <span class="comment">#100200</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;100&#x27;</span>)+<span class="built_in">int</span>(<span class="string">&#x27;200&#x27;</span>)) <span class="comment">#300</span></span><br></pre></td></tr></table></figure><hr><center>chr(parameter)</center><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># unicode码 33 转换为相应的字符 !</span></span><br><span class="line">int_ascII_str = <span class="number">33</span></span><br><span class="line"><span class="built_in">chr</span>(int_ascII_str) <span class="comment">#!</span></span><br></pre></td></tr></table></figure><hr><center>进制转换</center><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 十进制转换为二进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;33 转换为二进制：&#x27;</span>, <span class="built_in">bin</span>(<span class="number">33</span>)) <span class="comment">#33 转换为二进制： 0b100001</span></span><br><span class="line"><span class="comment"># 十进制转换为八进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;33 转换为八进制：&#x27;</span>, <span class="built_in">oct</span>(<span class="number">33</span>)) <span class="comment">#33 转换为八进制： 0o41</span></span><br><span class="line"><span class="comment"># 十进制转换为十六进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;33 转换为十六进制：&#x27;</span>, <span class="built_in">hex</span>(<span class="number">33</span>)) <span class="comment">#33 转换为十六进制： 0x21</span></span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-933'>思考：</span></p><ul><li>与 0xf2 值相等的是(342,242,0b11010010,0o362)</li></ul><p>算法：$ 2 * 16^0 + 15*16^1 = 2 + 240 = 242$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;0xf2&#x27;</span>,<span class="number">16</span>) <span class="comment">#242</span></span><br></pre></td></tr></table></figure><h2 id="eval-parameter-函数的使用"><a href="#eval-parameter-函数的使用" class="headerlink" title="eval(parameter) 函数的使用"></a>eval(parameter) 函数的使用</h2><p>Python 内置函数，<span class='custom-box custom-box-393'>用于去掉字符串最外侧的引号，并按照 Python 语句方式执行去掉引号后的语句</span></p><blockquote><p>语法格式：<code>variable=eval(string)</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算下列字符串等式</span></span><br><span class="line">str_equation = <span class="string">&#x27;1.1 * 3&#x27;</span></span><br><span class="line"><span class="comment"># 使用 eval() 内置函数，去掉引号，并执行去掉引号后的语句</span></span><br><span class="line">equation = <span class="built_in">eval</span>(str_equation)</span><br><span class="line"><span class="built_in">print</span>(equation, <span class="built_in">type</span>(equation)) <span class="comment">#3.3000000000000003 &lt;class &#x27;float&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-933'>eval() 函数经常与 input() 函数一起使用</span></p><hr><center>N 个路灯间</center><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">input_distance = <span class="built_in">input</span>(<span class="string">&#x27;请输入两个路灯之间的距离（单位：m）：&#x27;</span>) <span class="comment">#用户输入可能是小数</span></span><br><span class="line">input_num=<span class="built_in">input</span>(<span class="string">&#x27;请输入路灯的数量：&#x27;</span>) <span class="comment">#用户输入一定是整数</span></span><br><span class="line">total_distance=<span class="built_in">eval</span>(input_distance)*(<span class="built_in">eval</span>(input_num)-<span class="number">1</span>)</span><br><span class="line"><span class="comment">#print(input_num+&#x27;个路灯之间的距离是：&#x27;, input_distance * (input_num - 1)) #TypeError: unsupported operand type(s) for -: &#x27;str&#x27; and &#x27;int&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(input_num), <span class="built_in">type</span>(input_distance)) <span class="comment">#&lt;class &#x27;str&#x27;&gt; &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(input_num+<span class="string">&#x27;个路灯之间的距离是：&#x27;</span>, total_distance , <span class="string">&#x27;m&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s个路灯之间的距离是%d米&#x27;</span>%(input_num, total_distance))</span><br></pre></td></tr></table></figure><h2 id="print-中的占位符"><a href="#print-中的占位符" class="headerlink" title="print 中的占位符"></a>print 中的占位符</h2><blockquote><p>%s 字符串占位符<br>%d 数字占位符</p></blockquote><p>改造以上案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s个路灯之间的距离是%d米&#x27;</span>%(input_num, total_distance))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-一级3</title>
      <link href="/2023/04/03/Python-%E4%B8%80%E7%BA%A73/"/>
      <url>/2023/04/03/Python-%E4%B8%80%E7%BA%A73/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-中基本数据类型"><a href="#Python-中基本数据类型" class="headerlink" title="Python 中基本数据类型"></a><center>Python 中基本数据类型</center></h1><pre class="mermaid"> mindmap (本课知识点)  [Python 中基本数据类型]    ))数值类型((      )① **整数类型**(      )浮点数类型(    ))字符串类型((    ))布尔类型((  [Python 中数据类型之间的转换]  ["eval() 函数的使用"]  [了解不同的进制数]  [掌握 Python 中常用的运算符及优先级]</pre><blockquote><p>Python 是弱类型的动态语言</p></blockquote><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><blockquote><p>整数类型表示的数值是不包含小数的数值，包括正整数、负整数和零<br>理论上来讲，整数的取值范围是从 <span class='custom-box custom-box-393'>$+\infty$ ~ $-\infty$</span></p></blockquote><p><span class='custom-box custom-box-939'>【电子学会三级考试内容】：能够进行二进制、十进制以及十六进制之间的转换；</span></p><table><thead><tr><th>进制类型</th><th>引导符号</th><th>示例</th></tr></thead><tbody><tr><td>十进制</td><td>无</td><td>123</td></tr><tr><td>八进制</td><td>0o或0O</td><td>由0-7数字组成，如0o712</td></tr><tr><td>二进制</td><td>0b或0B</td><td>由0-1数字组成，如0b0101</td></tr><tr><td>十六进制</td><td>0x或OX</td><td>由0-9和a-f/A-F 组成，如 0x987a</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">68</span> <span class="comment"># 十进制数</span></span><br><span class="line">num_0b = <span class="number">0b1000100</span> <span class="comment"># 二进制</span></span><br><span class="line">num_0x = <span class="number">0x44</span> <span class="comment"># 十六进制</span></span><br><span class="line">num_0o = <span class="number">0o104</span> <span class="comment"># 八进制</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(num) <span class="comment"># 68</span></span><br><span class="line"><span class="built_in">print</span>(num_0b) <span class="comment"># 68</span></span><br><span class="line"><span class="built_in">print</span>(num_0x) <span class="comment"># 68</span></span><br><span class="line"><span class="built_in">print</span>(num_0o) <span class="comment"># 68</span></span><br></pre></td></tr></table></figure><h3 id="浮点数类型"><a href="#浮点数类型" class="headerlink" title="浮点数类型"></a>浮点数类型</h3><blockquote><p>表示带有小数点的数值，由整数部分和小数部分组成。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">version = <span class="number">3.5</span></span><br><span class="line"><span class="built_in">print</span>(version) <span class="comment"># 3.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 科学计数法</span></span><br><span class="line">num = <span class="number">1E1</span> <span class="comment"># 1*10^1</span></span><br><span class="line"><span class="built_in">print</span>(num) <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-933'>两个浮点类型的数进行运算时，有一定概率运算结果后增加一些不确定的尾数</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">0.1</span> + <span class="number">0.2</span></span><br><span class="line"><span class="built_in">print</span>(num) <span class="comment"># 0.30000000000000004</span></span><br></pre></td></tr></table></figure><blockquote><p>复数：Python 中的复数，与数学中的复数形式完全一致，由实数和虚数组成<br>Python 中的实数部分使用 .real 表示，虚数部分使用 .imag 表示</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">123</span> + <span class="number">456j</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;实数部分&#x27;</span>, x.real) <span class="comment">#实数部分 123.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;虚数部分&#x27;</span>, x.imag) <span class="comment">#虚数部分 456.0</span></span><br></pre></td></tr></table></figure><p>整数与浮点数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">length = <span class="number">10</span></span><br><span class="line">length_f = <span class="number">10.0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;length 数据类型&#x27;</span>, <span class="built_in">type</span>(length)) <span class="comment"># int</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;length 数据类型&#x27;</span>, <span class="built_in">type</span>(length_f)) <span class="comment"># float</span></span><br></pre></td></tr></table></figure><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><blockquote><p>字符串是连续的字符序列，可以识别计算机所能识别的一切字符。<br>字符串的界定符：单引号，双引号，三引号<br><span class='custom-box custom-box-933'>注意：引号不能交叉使用。即不能 <code>&#39;hello&quot;</code>, <code>&quot;hello&#39;</code></span></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;Guido van Rossum&#x27;</span></span><br><span class="line">college = <span class="string">&quot;阿姆斯特丹大学&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name, college) <span class="comment"># Guido van Rossum 阿姆斯特丹大学</span></span><br><span class="line"></span><br><span class="line">info_python = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  name: Guido van Rossum</span></span><br><span class="line"><span class="string">  college: 阿斯特丹大学</span></span><br><span class="line"><span class="string">  citizenship: America, Dutch</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">info_scratch = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  name: Mitchel Resnick,</span></span><br><span class="line"><span class="string">  college: 麻省理工大学</span></span><br><span class="line"><span class="string">  citizenship: America</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  name: Guido van Rossum</span></span><br><span class="line"><span class="string">  college: 阿斯特丹大学</span></span><br><span class="line"><span class="string">  citizenship: America, Dutch</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(info_python)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  name: Mitchel Resnick,</span></span><br><span class="line"><span class="string">  college: 麻省理工大学</span></span><br><span class="line"><span class="string">  citizenship: America</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(info_scratch)</span><br></pre></td></tr></table></figure><h3 id="转义字符（【电子学会五级考试内容】——-掌握字符串的转义符）"><a href="#转义字符（【电子学会五级考试内容】——-掌握字符串的转义符）" class="headerlink" title="转义字符（【电子学会五级考试内容】—— 掌握字符串的转义符）"></a>转义字符（<span class='custom-box custom-box-939'>【电子学会五级考试内容】—— 掌握字符串的转义符</span>）</h3><table><thead><tr><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td>\n</td><td>换行符</td></tr><tr><td>\t</td><td>水平制表位，用于横向跳到下一个制表位</td></tr><tr><td>\‘</td><td>单引号</td></tr><tr><td>\“</td><td>双引号</td></tr><tr><td>\\</td><td>反斜杠</td></tr></tbody></table><blockquote><p>\n 换行符</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  题目：打印输出以下两位程序设计者姓名：</span></span><br><span class="line"><span class="string">  1.  Mitchel Resnick</span></span><br><span class="line"><span class="string">  2.  Guido van Rossum</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;1. Mitchel Resnick&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2. Guido van Rossum&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1.  Mitchel Resnick</span></span><br><span class="line"><span class="string">2.  Guido van Rossum</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用转义字符 \n 实现</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1.  Mitchel Resnick \n2.  Guido van Rossum&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>&#39; 与 &quot;</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Guido van Rossum said:\&quot;we recommend v-3.5.2.\&quot;&quot;</span>) <span class="comment"># Guido van Rossum said:&quot;we recommend v-3.5.2&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Guido van Rossum said:\&quot;use single quotation marks(\&#x27;\&#x27;),plase!\&quot;&quot;</span>) <span class="comment">#Guido van Rossum said:&quot;use single quotation marks(&#x27;&#x27;),plase!&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>\t 制表位 —— 用于横向跳到下一个制表位</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello\tPython!&#x27;</span>) <span class="comment">#helloPython!</span></span><br><span class="line"><span class="comment"># hello 与 python 之间间距是几个字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;00000000000000&#x27;</span>) <span class="comment">#空 3 个字符</span></span><br></pre></td></tr></table></figure><h3 id="原字符——使转义字符失效的字符-r或R"><a href="#原字符——使转义字符失效的字符-r或R" class="headerlink" title="原字符——使转义字符失效的字符 r或R"></a>原字符——使转义字符失效的字符 r或R</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以用还原输出转义字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;\\ 表示转义反斜杠&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="字符串索引"><a href="#字符串索引" class="headerlink" title="字符串索引"></a>字符串索引</h3><blockquote><p>字符串又被称为有序的字符序列，不可变的字符序列，对字符串某个字符的检索称为索引</p></blockquote><table style="background:#fff;color:#333;"><tr><td colspan="15" style="color: #a33;text-align: center;">$\longleftarrow{反向递减序号}$</td></tr><tr><td style="border: solid 1px #efefef">-16</td>  <td style="border: solid 1px #efefef">-15</td>  <td style="border: solid 1px #efefef">-14</td>  <td style="border: solid 1px #efefef">-13</td>  <td style="border: solid 1px #efefef">-12</td>  <td style="border: solid 1px #efefef">-11</td>  <td style="border: solid 1px #efefef">-10</td>  <td style="border: solid 1px #efefef">-9</td>  <td style="border: solid 1px #efefef">-8</td>  <td style="border: solid 1px #efefef">-7</td>  <td style="border: solid 1px #efefef">-6</td>  <td style="border: solid 1px #efefef">-5</td>  <td style="border: solid 1px #efefef">-4</td>  <td style="border: solid 1px #efefef">-3</td>  <td style="border: solid 1px #efefef">-2</td>  <td style="border: solid 1px #efefef">-1</td> </tr><tr>  <td style="border: solid 1px #efefef">G</td>  <td style="border: solid 1px #efefef">u</td>  <td style="border: solid 1px #efefef">i</td>  <td style="border: solid 1px #efefef">d</td>  <td style="border: solid 1px #efefef">o</td>  <td style="border: solid 1px #efefef"></td>  <td style="border: solid 1px #efefef">v</td>  <td style="border: solid 1px #efefef">a</td>  <td style="border: solid 1px #efefef">n</td>  <td style="border: solid 1px #efefef"></td>  <td style="border: solid 1px #efefef">R</td>  <td style="border: solid 1px #efefef">o</td>  <td style="border: solid 1px #efefef">s</td>  <td style="border: solid 1px #efefef">s</td>  <td style="border: solid 1px #efefef">u</td>   <td style="border: solid 1px #efefef">m</td></tr><tr>  <td style="border: solid 1px #efefef">0</td>  <td style="border: solid 1px #efefef">1</td>  <td style="border: solid 1px #efefef">2</td>  <td style="border: solid 1px #efefef">3</td>  <td style="border: solid 1px #efefef">4</td>  <td style="border: solid 1px #efefef">5</td>  <td style="border: solid 1px #efefef">6</td>  <td style="border: solid 1px #efefef">7</td>  <td style="border: solid 1px #efefef">8</td>  <td style="border: solid 1px #efefef">9</td>  <td style="border: solid 1px #efefef">10</td>  <td style="border: solid 1px #efefef">11</td>  <td style="border: solid 1px #efefef">12</td>  <td style="border: solid 1px #efefef">13</td>  <td style="border: solid 1px #efefef">14</td>   <td style="border: solid 1px #efefef">15</td></tr><tr><td colspan="15" style="color: #a33;text-align: center;">$\longrightarrow{正向递增序号}$</td></tr></table><hr><p><span class='custom-box custom-box-933'>课堂作业：</span> 取出 <code>Guido van Rossum</code> 姓的第一个字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;Guido van Rossum&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">10</span>]) <span class="comment">#R</span></span><br><span class="line"><span class="built_in">print</span>(name[-<span class="number">6</span>]) <span class="comment">#R</span></span><br></pre></td></tr></table></figure><h3 id="字符串切片操作"><a href="#字符串切片操作" class="headerlink" title="字符串切片操作"></a>字符串切片操作</h3><blockquote><p>对字符串中的某个子串或区间的检索称为切片<br>切片语法结构 <code>字符串或字符串变量[N:M]</code><br><font color='red'>注意：切片不包含 M 位</font><br><span class='custom-box custom-box-933'>课堂作业：</span>请截取 <code>Guido van Rossum</code> 的姓</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;Guido van Rossum&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">10</span>:<span class="number">15</span>]) <span class="comment">#Rossu 所以 M 要输入大于 15 的任意数</span></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">10</span>:]) <span class="comment">#M 为空，默认截取到结尾</span></span><br><span class="line"><span class="built_in">print</span>(name[:<span class="number">4</span>]) <span class="comment">#N 为空，默认从第一个字母开始切</span></span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-933'>思考：</span></p><ul><li>世界那么大，我想去看看。执行[7:-3]的结果是什么？</li></ul><h3 id="常用的字符串操作"><a href="#常用的字符串操作" class="headerlink" title="常用的字符串操作"></a>常用的字符串操作</h3><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>x+y</td><td>连接字符串 x，y</td></tr><tr><td>x<em>n or n</em>x</td><td>复制 n 次 x</td></tr><tr><td>x in str</td><td>x 是否是 str 的子串，是返回 true，否则返回 false</td></tr></tbody></table><p><span class='custom-box custom-box-933'>课堂作业：</span>请说出龟叔的姓名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firstName = <span class="string">&#x27;Guido van&#x27;</span></span><br><span class="line">lastName = <span class="string">&#x27;Rossum&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;龟叔的姓名是：&#x27;</span>+ firstName + <span class="string">&#x27; &#x27;</span> + lastName)</span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-933'>课堂作业：</span>重要的事情说三遍，请说出龟叔的姓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firstName = <span class="string">&#x27;Guido van&#x27;</span></span><br><span class="line">lastName = <span class="string">&#x27;Rossum &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;龟叔姓：&#x27;</span> + lastName * <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-933'>课堂作业：</span>龟叔 <code>Guido van Rossum</code> 的姓是不是 <code>Rossum</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;Guido van Rossum&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Rossum&#x27;</span> <span class="keyword">in</span> name) <span class="comment">#True</span></span><br></pre></td></tr></table></figure><h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><blockquote><p>布尔类型是用来表示 “真” 值 或 “假” 值数据类型，其标识符为 True 或 False</p></blockquote><p><span class='custom-box custom-box-393'>True 表示整数 1，False 表示 0</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 验证 True 表示整数 1，False 表示 0</span></span><br><span class="line">t = <span class="literal">True</span></span><br><span class="line">f = <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(t + <span class="number">1</span>) <span class="comment">#2</span></span><br><span class="line"><span class="built_in">print</span>(f + <span class="number">1</span>) <span class="comment">#1</span></span><br></pre></td></tr></table></figure><p>布尔值为 False 的情况如下：</p><ul><li>False 或 None</li><li>数值 0, 0.0 虚数 0</li><li>空序列，包含空字符串，空元组，空列表，空字典，空集合等</li><li>自定义对象实例，该对象的 <strong>bool</strong>() 方法返回 False，<strong>len</strong>() 方法返回 0</li></ul><h2 id="数据类型检测"><a href="#数据类型检测" class="headerlink" title="数据类型检测"></a>数据类型检测</h2><blockquote><p>type(parameter) 检测参数类型</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&#x27;&#x27;</span>)) <span class="comment">#&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">0</span>)) <span class="comment">#&lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="literal">False</span>)) <span class="comment">#&lt;class &#x27;bool&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-933'>homework</span></p><ul><li>思考：3.0，3，’3.0’, ‘3’ 是不是都一样？</li><li>以下不是 Python 内置数据类型的是(char,int,float,str)</li><li>判断：字符串是用一对双引号“”或一对单引号‘’，括起来的零个或多个字符串</li><li>判断：字符串是字符的序列，也是序列类型的一种</li><li>判断：字符串使用[]进行索引和切片的</li><li>判断：Python 字符串的切片方式是[n,m]，包括 m</li><li>判断：赋值与二元操作符可以组合，如 &amp;=</li><li>判断：a,b=b,a 可以实现 a 和 b 值的互换</li><li>判断：a,b,c=b,c,a 是合法的</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-一级2</title>
      <link href="/2023/03/14/Python-%E4%B8%80%E7%BA%A72/"/>
      <url>/2023/03/14/Python-%E4%B8%80%E7%BA%A72/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-保留字、标识符与变量"><a href="#Python-保留字、标识符与变量" class="headerlink" title="Python 保留字、标识符与变量"></a><center>Python 保留字、标识符与变量</conter></h1><div class='custom-box custom-box-939'>【电子学会一级考试内容】：1. 掌握变量基本概念；2. 会使用变量；3. 掌握Python的字符串标识4. 并且掌握变量名的命名和保留字等基本语法。</div><pre class="mermaid"> mindmap (本课知识点)  [Python 中的保留字和标识符]    ))查询 Python 中有哪些保留字((    ))Python 中的保留字区分大小写((    ))Python 标识符命名**规则**((    ))Python 标识符命名**规范**((  [Python 中变量]    ))Python 变量定义((    ))Python 变量使用((    ))Python 变量内存示意图((</pre><h2 id="Python-中的保留字和标识符"><a href="#Python-中的保留字和标识符" class="headerlink" title="Python 中的保留字和标识符"></a>Python 中的保留字和标识符</h2><blockquote><p>保留字，Python 中被赋予特定意义的一些单词<br>标识符，是一个字符串，是一个名字，用于给变量、函数、类等命名<br><span class='custom-box custom-box-933'>开发过程中不可以将保留字作为变量、函数、类、模块和其他对象的名称来使用。</span></p></blockquote><h3 id="查询-Python-中有哪些保留字"><a href="#查询-Python-中有哪些保留字" class="headerlink" title="查询 Python 中有哪些保留字"></a>查询 Python 中有哪些保留字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line"><span class="comment"># 内置模块 keyword 查询有哪些保留字</span></span><br><span class="line"><span class="built_in">print</span>(keyword.kwlist)</span><br><span class="line">[<span class="string">&#x27;False&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;async&#x27;</span>, <span class="string">&#x27;await&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;continue&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;del&#x27;</span>, <span class="string">&#x27;elif&#x27;</span>, <span class="string">&#x27;else&#x27;</span>, <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;finally&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;lambda&#x27;</span>, <span class="string">&#x27;nonlocal&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;try&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;yield&#x27;</span>]</span><br><span class="line"><span class="comment"># 有多少个保留字</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(keyword.kwlist))</span><br><span class="line"><span class="number">35</span></span><br></pre></td></tr></table></figure><p><code>keyword</code>——Python 内置模块，安装 Python 解释器时同时安装。</p><blockquote><p>Python 有 35 个保留字，分别是：<br>[‘False’, ‘None’, ‘True’, ‘and’, ‘as’, ‘assert’, ‘async’, ‘await’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘nonlocal’, ‘not’, ‘or’, ‘pass’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]</p></blockquote><p><span class='custom-box custom-box-933'>homework: </span></p><ul><li>以下哪个不是 Python 保留字？[true, and, if, Flase]</li></ul><h3 id="Python-中的保留字区分大小写"><a href="#Python-中的保留字区分大小写" class="headerlink" title="Python 中的保留字区分大小写"></a>Python 中的保留字区分大小写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span> = <span class="string">&#x27;真&#x27;</span></span><br></pre></td></tr></table></figure><p><font color='red'>SyntaxError: cannot assign to True</font>语法错误，不能分配给 True，因为 True 是保留字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>true = <span class="string">&#x27;真&#x27;</span> </span><br></pre></td></tr></table></figure><blockquote><p>以上代码运行正确，原因是 <strong>保留字区分大小写</strong></p></blockquote><h3 id="Python-标识符命名规则"><a href="#Python-标识符命名规则" class="headerlink" title="Python 标识符命名规则"></a>Python 标识符命名规则</h3><ul><li>可以是字符、下划线、和数字，并且<span class='custom-box custom-box-933'>第一个字符不是数字</span></li><li>不能使用 Python 保留字</li><li>标识符严格区分大小写，<span class='custom-box custom-box-933'>全部采用大写命名的标识符是常量，如 PI=3.1415926</span></li><li>以下划线开头的标识符有特殊意义，一般应避免使用相似的标识符</li><li>允许使用中文作为标识符，但不建议使用</li></ul><h3 id="Python-标识符命名规范"><a href="#Python-标识符命名规范" class="headerlink" title="Python 标识符命名规范"></a>Python 标识符命名规范</h3><ul><li>模块名尽量短小，且全部使用小写字母，多个单词间用下划线分隔，如 price_unit</li><li>包名尽量短小，且全部使用小写字母，不推荐使用下划线，如：com.mosesPython，不推荐使用 com_mosesPython</li><li>类名采用单词首字母大写方式(Pascal 风格)。如：MyClass</li><li>模块内部采用 _ + Pascal 风格的类名组成，如：MyClass 内部类 _innerClass</li><li>函数、类的属性和方法的命名，全部使用小写字母，多个字母之间使用下划线分隔；</li><li>常量命名时采用全部大写字母，可以使用下划线</li><li>使用单下划线 _ 开头的模块变量或函数是受保护，在使用 <code>from xxx import *</code> 语句从模块中导入时，这些模块变量或函数不能被导入</li><li>使用双下划线 __ 开头的实例变量或方法是类私有的</li><li>以双下划线开头和结尾的是 Python 的专用标识符，如：<strong>init</strong>() 表示初始化函数</li></ul><p><span class='custom-box custom-box-933'>思考：</span></p><ul><li>123，abc,_123,_abc, for 哪个标识符命名错误？ </li></ul><h2 id="Python-中变量的定义和使用"><a href="#Python-中变量的定义和使用" class="headerlink" title="Python 中变量的定义和使用"></a>Python 中变量的定义和使用</h2><p><code>变量名 = value</code></p><blockquote><p>保存和表示数据值的一种语法元素</p></blockquote><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">&#x27;Guido van Rossum&#x27;</span></span><br></pre></td></tr></table></figure><pre class="mermaid"> mindmap [变量名 = value]    [**等号** 赋值运算符]    [**Guido van Rossum** 变量值]    [***name** 变量名]</pre><h3 id="内存示意图"><a href="#内存示意图" class="headerlink" title="内存示意图"></a>内存示意图</h3><img  src=http://www.plantuml.com/plantuml/svg/SoWkIImgAStDuIh9BCb9LNZQrlfqxOpdItOzQ-b_EdiV5r0wELlXsO8EY8H2DPU2Wa9nINvHOdggGbvYRYfNBHTNKMfoIM9UEaZxWZPaXN2LIkwbcIdv2cM9UGf1-SN5fRbA87qW_GgwkjXa7LBpKe2k0W00><ul><li>在堆内存中开辟空间，放入变量值 Guido van Rossum</li><li>栈内存中有一个变量名 name 指向堆内存</li></ul><h3 id="定义变量并使用变量"><a href="#定义变量并使用变量" class="headerlink" title="定义变量并使用变量"></a>定义变量并使用变量</h3><img  src=http://www.plantuml.com/plantuml/svg/SoWkIImgAStDuIh9BCb9LNZQrlfqxOpdItOzQ-b_EdiV5r0wELlXsO8EY8H2DPU2Wa9oOb6AGbvYRYgSavYUgi1LoyK5edMZCp9JKbBpOdNj88guYbAJInBpqa76BsX3DaYXk2I_2AH7oRqqCoLVeImnJo4elxYuD5S9HTe2P3R8B0LTNMngmTRg0fKvfEQb03q30000><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># l2.py</span></span><br><span class="line">name = <span class="string">&#x27;Guido van Rossum&#x27;</span> <span class="comment"># 创建变量 name 并赋值</span></span><br><span class="line">age = <span class="number">68</span> <span class="comment"># 创建变量 age 并赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 变量的使用</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Python 之父是：&#x27;</span>,name,<span class="string">&#x27;，今年&#x27;</span>, age, <span class="string">&#x27;岁了。&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Python 之父是： Guido van Rossum ，今年 <span class="number">68</span> 岁了。</span><br></pre></td></tr></table></figure><h3 id="Python-中允许多个变量指向同一个值"><a href="#Python-中允许多个变量指向同一个值" class="headerlink" title="Python 中允许多个变量指向同一个值"></a>Python 中允许多个变量指向同一个值</h3><img  src=http://www.plantuml.com/plantuml/svg/SoWkIImgAStDuIh9BCb9LNZQrlfqxOpdItOzQ-b_EdiV5r0wELlXsO8EY8H2DPU2Wa9oOb6AGb9cKKb6Ic8bN20biIILgvQBgoWrkIGnBnras88sP6qAnINvHOdfgGfAXfQcPhg6kiQ6IY0DC9CKT7MHfHIi54oCZKmjpIsD3OsuGARZLU2GcfS2z0S0><blockquote><p>Python 中每个值都有自己的内存地址，可以采用内置函数 <code>id()</code> 查看<br>Python 中允许多个变量指向同一个值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">birthday = <span class="string">&#x27;1956-1-31&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(birthday)) <span class="comment"># 4325979312</span></span><br><span class="line">date = bithday </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(date)) <span class="comment"># 4325979312</span></span><br></pre></td></tr></table></figure><h2 id="算法与程序"><a href="#算法与程序" class="headerlink" title="算法与程序"></a>算法与程序</h2><blockquote><p>算法是解题方法的精确描述，算法由有限个步骤组成；<br>用计算机编程语言来表示算法，就形成程序；<br>其基本特征是有 0 或 多个输入，有一个或多个输出。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-一级1</title>
      <link href="/2023/03/13/Python-%E4%B8%80%E7%BA%A71/"/>
      <url>/2023/03/13/Python-%E4%B8%80%E7%BA%A71/</url>
      
        <content type="html"><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a><center>入门</center></h1><span class='custom-box custom-box-939'>【电子学会一级考试内容】：1. 理解“输入、处理、输出”程序编写方法；2. 掌握Python的基本格式，编写程序时会合理的使用缩进、注释；</span><ul><li>程序设计语言又被称为编程语言</li><li>计算机程序是<strong>使用编程语言组织起来的一级计算机</strong><span class='custom-box custom-box-933'>指令</span></li><li>计算机指令是指挥机器工作的指示和命令。</li><li>编程语言分为机器语言、汇编语言、和高级语言。</li><li>采用编译方式执行的语言称为静态语言。</li><li>采用解释方式执行的语言称为脚本语言。</li><li>IPO 指的是输入、处理和输出。</li></ul><p>Python 是交互式语言，即在 Python 提示符中直接互动执行编写程序。</p><h2 id="IPO-编程方式"><a href="#IPO-编程方式" class="headerlink" title="IPO 编程方式"></a>IPO 编程方式</h2><h3 id="输出函数-Print"><a href="#输出函数-Print" class="headerlink" title="输出函数 Print"></a>输出函数 Print</h3><blockquote><p>print(value,…,sep=’’,end=’\n’,file=None)</p></blockquote><pre class="mermaid"> mindmap root(print<br/>内置函数用法)    )输出到控制台(        ))换行输出((            pStr["print('print 是内置函数')<br/>打印字符串"]                quotationMark1["单引号 print('single quotation mark')"]                quotationMark2["双引号 print(&ldquo;double quotation mark&rdquo;)"]                quotationMark3["三引号 print('''triple quotation marks''')"]                quotationMark4["三引号 print(&ldquo;&ldquo;&ldquo;triple quotation marks&rdquo;&rdquo;&rdquo;)"]            pNum["print(90)<br/>打印数字"]            pVariable["print(variable)<br/>打印变量"]            pExpression["print(a + b)<br/>打印表达式"]            pChr["print(chr(98))<br/>输出数字 ASCII 表中的字符"]            pOrd["print(ord('北京'))<br/>输出中文的 Unicode 编码"]        ))同行输出((            pline["print('hello,','Python')"]            ["print('hello,','Python',end=';')<br/>同行输出，以；结尾"]            ["print('hello'+'Python')<br/>连接符实现同行输出<br/>注意只能连接字符串"]    )输出到文件(        pFile["fp=open('f.txt','w')<br/>print('baby coding', file=fp)<br/>fp.close()"]</pre><p><strong><center>202312考题</center></strong></p><table><thead><tr><th>编号</th><th>题目</th><th>解析</th></tr></thead><tbody><tr><td>1</td><td><code>print(&#39;hello&#39;);print(&#39;world&#39;)</code>运行结果是（）</td><td>本题考察的 Python 编程基础，print 在打印时，会在打印的末尾默认加上换行符，所以打印出来的内容是两行。</td></tr><tr><td>14</td><td>在Python中，语句 print(a,b) 的功能是？（　）</td><td>在Python中，print(a,b) 是用于将变量 a 和 b 的值输出到标准输出设备（通常是控制台）的函数。</td></tr><tr><td>34</td><td>在Python程序中，双引号和三引号都是引号，没有用法区别，可以随意替换。（　）</td><td>三引号可以跨行使用，双引号不能。故错误</td></tr><tr><td>35</td><td>print(‘Hello, World!”)代码段会引发报错</td><td>码中的字符串使用了不匹配的引号，导致语法错误。要么使用双引号表示字符串，要么使用单引号表示字符串</td></tr></tbody></table><p><span class='custom-box custom-box-933'>思考：</span></p><ul><li>print(‘\nPython’) 输出结果是什么</li></ul><h3 id="输入函数-Input"><a href="#输入函数-Input" class="headerlink" title="输入函数 Input"></a>输入函数 Input</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>variable = <span class="built_in">input</span>(<span class="string">&#x27;提示文字&#x27;</span>)</span><br></pre></td></tr></table></figure><pre class="mermaid"> mindmap ("***代码：*** variable = input('提示文字')")    ["variable 变量名"]    ["input() 函数，内置函数"]    ["‘提示文字’ 函数 input 的参数"]</pre><p><span class='custom-box custom-box-933'>注意：运行 input 函数，无论输入什么内容，variable 接收的内容都是 <strong>字符串</strong> 类型</span><br><strong><center>202312考题</center></strong></p><table><thead><tr><th>编号</th><th>题目</th><th>解析</th></tr></thead><tbody><tr><td>31</td><td>执行下列语句，输入”学校”，程序最终输出的text结果是”小明同学在学校” 。（ ）<code>text = input(&quot;小明同学在&quot;);print(text)</code></td><td>使用input()函数获取输入时，只保存输入的内容，不保存提示语中的内容，故输出变量text时，结果为”学校”</td></tr></tbody></table><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>程序员在代码中添加的对代码的功能解释说明的标注性文字<br>目的在于：提高代码的可读性<br>注释的内容将被 Python 解释器忽略，不被计算机执行<br>注释分为：单行注释、多行注释、中文声明注释</p><p><font color='red'>注意：#与注释内容之间不能添加空格</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#中文文档声明注释要写在文件第一行</span></span><br><span class="line"><span class="comment">#单行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第一行注释</span></span><br><span class="line"><span class="string">第二行注释</span></span><br><span class="line"><span class="string">第三行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="代码缩进"><a href="#代码缩进" class="headerlink" title="代码缩进"></a>代码缩进</h3><blockquote><p>每行语句开始前的空白区域，是用来表示 Python 程序间的包含和层级关系，通常四个空格作为一个缩进量<br>类定义、函数定义、流程控制语句以及异常处理语句等行尾的冒号和下一行的缩进表示一个代码块的开始，而缩进结束，则表示一个代码块的结束。</p></blockquote><p><span class='custom-box custom-box-393'>思考：</span></p><ul><li>Python 是一种（解释）类型的编程语言</li><li>Python 语句 print(“中国，你好”)的输出是(中国，你好)</li><li>IPO 模式指的是 input,process,output</li><li>Python 语言是通过（缩进）来体现语句间的逻辑关系</li></ul><p><span class='custom-box custom-box-933'>作业：</span></p><ul><li>将 ”我是最棒的“ 输出到 <code>python1.txt</code> 文件</li><li>输入姓名、年龄、梦想，并输出到控制台；效果如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">请输入您的姓名：moses</span><br><span class="line">请输入您的年龄：34</span><br><span class="line">请输入您的梦想：to be a teacher</span><br><span class="line">---自我介绍---</span><br><span class="line">姓名： moses</span><br><span class="line">年龄 34</span><br><span class="line">梦想 to be a teacher</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 预备</title>
      <link href="/2023/03/13/Python-%E9%A2%84%E5%A4%87/"/>
      <url>/2023/03/13/Python-%E9%A2%84%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h1 id="预备"><a href="#预备" class="headerlink" title="预备"></a><center>预备</center></h1><blockquote><p>目标：<br>    * 熟悉鼠标、键盘与快捷键<br>    * 环境准备</p></blockquote><h2 id="第一课-Python-环境安装与键盘熟悉"><a href="#第一课-Python-环境安装与键盘熟悉" class="headerlink" title="第一课 Python 环境安装与键盘熟悉"></a>第一课 Python 环境安装与键盘熟悉</h2><blockquote><p>Python 环境课前准备<font color="#a33"><b><u>【课上安装】</u></b></font></p></blockquote><ol><li> 下载 Visual Studio Code，下载地址 <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li><li> 下载 Python 解释器，下载地址 <a href="https://www.python.org/downloads/release/python-352/">https://www.python.org/downloads/release/python-352/</a></li><li> 下载安装聊天沟通工具，下载地址 <a href="https://weixin.qq.com/cgi-bin/readtemplate?lang=zh_CN&amp;t=page/faq/win/390/index&amp;faq=win_390">https://weixin.qq.com/cgi-bin/readtemplate?lang=zh_CN&amp;t=page/faq/win/390/index&amp;faq=win_390</a></li></ol><h2 id="等级考试相关"><a href="#等级考试相关" class="headerlink" title="等级考试相关"></a>等级考试相关</h2><p><span class='custom-box custom-box-939'>本节【电子学会一级考试】相关：</span></p><ol><li>了解Python常见的几种编程环境：IDLE、Visual StudioCode、JupyterNotebook；</li><li>熟悉IDLE的操作过程，会打开IDLE，会新建文件、保存文件；</li><li>熟练掌握使用IDEL进行编程，会修改文件、运行文件等操作；</li><li>熟悉IDEL的两种开发模式，会在不同模式下进行切换；</li><li>了解Python的版本号和目前最常用的Python版本。</li></ol><h2 id="Python-应用领域"><a href="#Python-应用领域" class="headerlink" title="Python 应用领域"></a>Python 应用领域</h2><pre class="mermaid"> mindmap root[python 应用领域]    artificial intelligence((人工智能))    b((数据分析))    c((网络爬虫))    d((数据分析))    e((机器学习))    f((Web开发))    g((自动化运维))</pre><h2 id="创始人-——-吉多•范罗苏姆-Guido-van-Rossum"><a href="#创始人-——-吉多•范罗苏姆-Guido-van-Rossum" class="headerlink" title="创始人 —— 吉多•范罗苏姆[Guido van Rossum]"></a>创始人 —— 吉多•范罗苏姆[Guido van Rossum]</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzkyOTQ0NTU5NA==&mid=2247483710&idx=1&sn=21553e069686d22b43ceea92ea563a4e&chksm=c208228bf57fab9d67ae3cec69c5d11d70d0cd3a27afe68b08179a37e452fe54f27982bd58f4&token=167694193&lang=zh_CN#rd">更多关于吉多•范罗苏姆</a></p><h2 id="Python-发展史"><a href="#Python-发展史" class="headerlink" title="Python 发展史"></a>Python 发展史</h2><pre class="mermaid">timeline    title Python 语言发展史    1989 年: Python 语言诞生    1991 年: Python 产生可用版本    2000 年 10 月: Python2.0 版本发布    2008 年 12 月: Python3.0 版本发布                : 解释器内部完全采用面向对象方式实现    2010 年: Python2.0 时代结束，最后版本号 2.7    2016 年: Python 重要标准库和第三方库都在 Python3.x 版本下进行发展           : Python 语言版本升级过程结束</pre><h2 id="Python-学习之路"><a href="#Python-学习之路" class="headerlink" title="Python 学习之路"></a>Python 学习之路</h2><pre class="mermaid"> timeline    title Python 学习之路    section 第一阶段        Python 入门             : 环境搭建             : 内置函数——输入             : 内置函数——输出             : 变量             : 数据类型        流程控制 : 条件语句 : 循环        数据序列 : 字符串 : 列表 : 字典 : 元组    section 第二阶段        函数 : 参数 : 返回值 : 递归 : lambda 表达式        文件操作 : 打开和关闭 : 读取和写入    section 第三阶段        面向对象 : 类和对象 : 继承 : 面向对象高级        模块、包、异常 : '...'    section 最后阶段        回顾及综合实战 : '...'</pre><h2 id="Python-编程环境"><a href="#Python-编程环境" class="headerlink" title="Python 编程环境"></a>Python 编程环境</h2><p>中国电子学会推荐使用 IDLE3.5.2 开发环境。<br>Integrated Development Environment(IDE)集成开发环境</p><h3 id="IDLE（Integrated-Development-and-learning-Environment）"><a href="#IDLE（Integrated-Development-and-learning-Environment）" class="headerlink" title="IDLE（Integrated Development and learning Environment）"></a>IDLE（Integrated Development and learning Environment）</h3><p>IDLE Python 程序开发的集成开发环境，Python 安装时自带。<br>功能：语法高亮，段落缩进，文本编辑，TABLE 键控制；调度程序<br>由 Guido van Rossum 编写。<br><strong><center>202312考题</center></strong></p><table><thead><tr><th>编号</th><th>题目</th><th>解析</th></tr></thead><tbody><tr><td>29</td><td>Python语言简洁、易懂、库文件丰富，可以用在很多应用领域。（　）</td><td>python语句简洁、易懂、库文件丰富，可以用在很多应用领域，尤其是人工智能领域。</td></tr><tr><td>32</td><td>在IDLE的交互模式启动后，可以直接编写程序并运行，无需切换到脚本模式。（　）</td><td>启动交互模式后，会显示提示符：&gt;&gt;&gt;然后可以直接在交互模式下编写程序并运行，本题中说法正确</td></tr></tbody></table><h2 id="Python-编程方式"><a href="#Python-编程方式" class="headerlink" title="Python 编程方式"></a>Python 编程方式</h2><h3 id="交互式编程"><a href="#交互式编程" class="headerlink" title="交互式编程"></a>交互式编程</h3><blockquote><p>打开 IDLE 编程软件 <code>&gt;&gt;&gt; 交互式环境提示符</code> 下输入代码，回车（Enter）查看执行结果，如下代码块：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span>+<span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;hello Python&#x27;</span>)</span><br><span class="line">hello Python</span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-933'>交互式编程的缺点：程序无法保存，只能运行一次</span><br><span class='custom-box custom-box-393'>交互式编程适用于开发过程的代码调式</span></p><h3 id="脚本式编程"><a href="#脚本式编程" class="headerlink" title="脚本式编程"></a>脚本式编程</h3><p>脚本式编程解决了反复编写同样的代码的问题，代码会以脚本方式保存为一个 <code>.py</code> 的文件。该文件可以反复运行。</p><ul><li>新建脚本<blockquote><ul><li>打开 IDLE 编程软件，菜单 <code>File -&gt; New File</code> 打开新的编辑器窗口，输入代码后，<code>File -&gt; Save</code> 选择文件存储路径，保存文件。</li><li>菜单 <code>Run -&gt; Run Module</code> 运行 Python 文件。</li><li>IDLE Shell 输出运行结果。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = 2</span><br><span class="line">b = 3</span><br><span class="line">print(a+b)</span><br></pre></td></tr></table></figure></li></ul></blockquote></li><li>编辑脚本<blockquote><ul><li>打开 IDLE 编程软件，菜单 <code>File -&gt; Open</code> 打开已保存的 Python 文件，修改代码后，<code>File -&gt; Save</code> 保存文件。</li><li>菜单 <code>Run -&gt; Run Module</code> 运行 Python 文件。</li><li>IDELE Shell 输出运行结果。</li></ul></blockquote></li></ul><h2 id="计算机中的领军人物"><a href="#计算机中的领军人物" class="headerlink" title="计算机中的领军人物"></a>计算机中的领军人物</h2><table><thead><tr><th>称呼</th><th>中文音译</th><th>领域</th></tr></thead><tbody><tr><td>AlanMathisonTuring</td><td>艾伦图灵</td><td>计算机科学之父</td></tr><tr><td>John von Neumann</td><td>约翰·冯·诺依曼</td><td>计算机科学之父</td></tr><tr><td>Guido van Rossum</td><td>吉多.范罗苏姆</td><td>Python 之父</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具-HBuilderX</title>
      <link href="/2023/02/27/%E5%B7%A5%E5%85%B7-HBuilderX/"/>
      <url>/2023/02/27/%E5%B7%A5%E5%85%B7-HBuilderX/</url>
      
        <content type="html"><![CDATA[<h2 id="keyMap"><a href="#keyMap" class="headerlink" title="keyMap"></a>keyMap</h2><p><a href="https://hx.dcloud.net.cn/Tutorial/Other/keybindings_idea?id=some-shortcuts-changed-for-sublime-keymaps">all</a></p><table><thead><tr><th>key</th><th>description</th></tr></thead><tbody><tr><td>ctrl + x</td><td>open/close terminal —— 显示/隐藏 terminal</td></tr><tr><td>ctrl + d</td><td>delete row —— 删除整行</td></tr><tr><td>command + d</td><td>select next occurences —— 选择相同的文本，光标定位在最后一行</td></tr><tr><td>command + shift + r</td><td>duplicate line —— 复制上一行</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>URL</title>
      <link href="/2023/02/24/URL/"/>
      <url>/2023/02/24/URL/</url>
      
        <content type="html"><![CDATA[<p>keyWord: 路由器，调制解调器（实现网络信息与电话设施可处理的信息之间的转换），ISP 将个人网络连接到互联网的服务提供商<br>web 核心概念：HyperText/Http/Url</p><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>统一资源定位符（Uniform Resource Locator），在 Internet 上可以找到资源的位置的文本字符串。<br>是浏览器用来检索 web 上公布的任何资源机制。<br>给定的某一资源在 web 上的地址</p><div style="display: flex">    <span class="custom-box custom-box-339">https://</span>    <span class="custom-box custom-box-933">helenzhanglp.github.io</span>    <span class="custom-box custom-box-939">:80</span>    <span class="custom-box custom-box-993">/2023/02/18/URL/</span>    <span class="custom-box custom-box-399">?key=v1&key1=v2</span>    <span class="custom-box custom-box-963">#archor</span></div><p><span class="custom-flag-339">https(http/ftp/mailto)-scheme，表明浏览器要使用何种协议</span></p><div style="display: flex"><span>Authority&nbsp;&nbsp;</span> <span class="custom-flag-933">Domain 域名 表示正在请求哪个 web 服务器</span>&nbsp;<span class="custom-flag-939">port 端口——用于访问 Web 服务器上的资源的技术“门”。如果 Web 服务器使用 HTTP 协议的标准端口（HTTP 为 80，HTTPS 为 443）来授予其资源的访问权限，则通常会被忽略。否则是强制性的。</div><p class="custom-flag-993">Path to resource 资源路径，即网络服务器上资源的路径，早期阶段，像这样的路径表示 Web 服务器上的物理文件位置。</p><p class="custom-flag-399">?key=v1&key1=v2 —— 提供给网络服务器额外的参数，返回资源之前 web 服务器可以用这些参数做额外处理。每个 web 服务器都有关于自己参数的规则。唯一可靠的方式来知道特定 Web 服务器是否处理参数是通过询问 Web 服务器所有者。</p><p class="custom-flag-963">#anchor —— 是资源本身的另一部分锚点。锚点表示资源中的一种“书签”，给浏览器显示位于该“加书签”位置的内容的方向</p><h3 id="URL-的使用场景"><a href="#URL-的使用场景" class="headerlink" title="URL 的使用场景"></a>URL 的使用场景</h3><ul><li>使用 <code>&lt;a&gt;</code> 在其他文档中新建链接</li><li>使用 <code>&lt;link&gt;</code>,<code>&lt;script&gt;</code> 将文档与其它资源关联</li><li><code>&lt;img&gt;</code>,<code>&lt;vadio&gt;</code>,<code>&lt;audio&gt;</code> 等显示多媒体图片</li><li><code>&lt;iframe&gt;</code> 在文档中显示其它 html 文档</li></ul><h3 id="绝对-URL-和相对-URL"><a href="#绝对-URL-和相对-URL" class="headerlink" title="绝对 URL 和相对 URL"></a>绝对 URL 和相对 URL</h3><p>url 必须部分在大多数情况下取约于 url 的上下文</p><blockquote><p>如果 URL 的路径部分以“/”字符开头，则浏览器将从服务器的顶部根目录获取该资源，而不引用当前文档给出的上下文。</p></blockquote><h4 id="绝对URL"><a href="#绝对URL" class="headerlink" title="绝对URL"></a>绝对URL</h4><ul><li><p>完整的网络 URL 地址</p><div style="display: flex">  <span class="custom-box custom-box-339">https://</span>  <span class="custom-box custom-box-933">helenzhanglp.github.io</span>  <span class="custom-box custom-box-939">:80</span>  <span class="custom-box custom-box-993">/2023/02/18/URL/</span>  <span class="custom-box custom-box-399">?key=v1&key1=v2</span>  <span class="custom-box custom-box-963">#archor</span></div></li><li><p>隐去协议 —— 在这种情况下，浏览器将使用与用于加载该 URL 的文档相同的协议来调用该 URL。</p><div style="display: flex">  <span class="custom-box custom-box-933">helenzhanglp.github.io</span>  <span class="custom-box custom-box-939">:80</span>  <span class="custom-box custom-box-993">/2023/02/18/URL/</span>  <span class="custom-box custom-box-399">?key=v1&key1=v2</span>  <span class="custom-box custom-box-963">#archor</span></div></li><li><p>隐去域名 —— 这是 HTML 文档中绝对 URL 最常见的用例。浏览器将使用与用于加载托管该 URL 的文档相同的协议和相同的域名。<font color="#a33">注意：不可能省略该域名而不省略协议。</font></p><div style="display: flex">  <span class="custom-box custom-box-993">/2023/02/18/URL/</span>  <span class="custom-box custom-box-399">?key=v1&key1=v2</span>  <span class="custom-box custom-box-963">#archor</span></div></li></ul><h4 id="相对域名"><a href="#相对域名" class="headerlink" title="相对域名"></a>相对域名</h4><p>假设当前地址为 <code>http://localhost:4000/html/)</code></p><ul><li><p>子资源</p><div style="display: flex">  <span class="custom-box custom-box-993">2023/02/18/URL/</span></div>url 不以 `/` 开头，浏览器会尝试在包含当前资源的子目录中查找。当前案例，将在 `html` 目录下继续查找</li><li><p>回到目录树中</p><div style="display: flex">  <span class="custom-box custom-box-993">../2023/02/18/URL/</span></div>回到上层目录，在上一层目录中查找文件</li></ul><h2 id="url-知识学习相关预备"><a href="#url-知识学习相关预备" class="headerlink" title="url 知识学习相关预备"></a>url 知识学习相关预备</h2><h3 id="怎么样设计个人网站"><a href="#怎么样设计个人网站" class="headerlink" title="怎么样设计个人网站"></a>怎么样设计个人网站</h3><p>很多项目的失败是由于缺乏明确的目标。<br>项目启动前需要关心三个问题，即项目构思（project ideation）：</p><ul><li>要完成什么？</li></ul><ul><li>按重要程序进行排序</li></ul><ul><li>网站如何实现个人目标</li><li>做什么？以怎样的顺序做？才能实现目标？</li></ul><h3 id="互联网是如何工作的"><a href="#互联网是如何工作的" class="headerlink" title="互联网是如何工作的"></a>互联网是如何工作的</h3><p>网线将两台电脑联系在一起，实现了两台电脑的通信。若 10 台电脑，每个电脑 9 个插头，则需要45根网线<br>路由器（router）一个特殊的小电脑，网络上每台电脑都链接到路由器上。路由器确保每台电脑上发出的信息准确到达另一台电脑。路由器十个插口，十条网线，分别连接十台电脑。</p><img  src=http://www.plantuml.com/plantuml/svg/dT8x2iCm383XtQSGwT8E0JllGCZIA_G2nXL988cBwnPw-v8X9Hf4GQFunJS8sU36QR4HuNH3Dwv-ziC7agjV7g-80RH9m3vXdxM1hek_nVIExybXtolxpyceaqcTd3gvr2ceKqYTaZgbrAceKqcTcZgrr6ceqqYTbZgjq36QE4OpZWheebs76I7uRLEfu--cPtr9-pqTlv4fkQ0KR2dPKh6bPal3bfOhszre-G80><p>在连接成百上千台电脑时，可以考虑使用多台路由器，相互连接</p><img  src=http://www.plantuml.com/plantuml/svg/dTDB2iCW50NGkQkGTD8E17z94mYPT0lTW5X90aairXQw-_vewakGWZEzLuu3dyhfhX-LDtXpDBgRx63REyuETZnVlN6OiWoh2_xkASDrxUU3v6HklJPDWzG_XqE7fpe2EYBLaT2HgKuEdJpLAQ1Jf3fxwEnJdH8wPQfJGQTAT1W53gCH1pcZlPhQmM1dtoTN2LybOfN89_HPO49-qZBYwqWW57uMigKxqin2EF-nIiGh6Q_oHILGE4kWuYWSZrXLngigUjVhNHRL0m00><p>电线或电话将电缆连接到你家，电话基础设施已经可以把你家连接到世界的任何角落，所以它就是我们需要的线。为了连接电话这种网络我们需要一种基础设备叫做<strong>调制解调器（modem）</strong>，<u>调制解调器可以把网络信息变成电话设施可以处理的信息</u>，反之亦然。<br>我们要将信息发送到想要到的地方，需要把我们的网络连接到网联网服务商（ISP）</p><img  src=http://www.plantuml.com/plantuml/svg/dT8x2iCm383XtQSGwT8E0JllGCZIA_G2nXL988cBwnPw-v8X9Hf4GQFunJS8sU36QR4HuNH3Dwv-ziC7agjV7g-80RH9m3vXdxM1hek_nVIExybXtolxpyceaqcTd3gvr2ceKqYTaZgbrAceKqcTcZgrr6ceqqYTbZgjq36QE4OpZWheebs76I7uRLEfu--cPtr9-pqTlv4fkQ0KR2dPKh6bPal3bfOhszre-G80><h3 id="网站，网页，网络服务员，搜索引擎"><a href="#网站，网页，网络服务员，搜索引擎" class="headerlink" title="网站，网页，网络服务员，搜索引擎"></a>网站，网页，网络服务员，搜索引擎</h3><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>网页</td><td>webpage</td><td>能够在 web 浏览器上展示的文档</td></tr><tr><td>网站</td><td>website</td><td>由多个页面组合在一起，并以多种方式相互连接的网页的集合</td></tr><tr><td>网络服务器</td><td>web server</td><td>在互联网上托管网站的计算机</td></tr><tr><td>搜索引擎</td><td>web engine</td><td>帮助你寻找其他见面的网站，如百度</td></tr></tbody></table><ul><li>网页（webpage）<br>由超文本标记语言（HTML）编写的文档，可插入样式、脚本、图片、视频等多媒体资源。网络上所有的页面都可以通过一个独一无二的地址访问到</li><li>网站（website）<br>共享唯一域名且相互链接的网站的集合</li><li>网络服务器（web server）<br>一个网络服务器是一台托管一个多个站点的计算机</li><li>搜索引擎（web search engine）<br>帮助用户在其它网站中寻找网页的特定网站<br>浏览器是接收并显示网页的网站</li></ul><h4 id="网络服务器"><a href="#网络服务器" class="headerlink" title="网络服务器"></a>网络服务器</h4><p>可以代指硬盘或者软件，或者他们协同工作的整体。</p><ul><li>硬件部分 —— 是一个计算机，用于存储网络服务软件 + 网站组成文件（HTML 文件，图片，CSS 样式文件表，JavaScript 文件）。该计算机接入互联网并与其他接入互联网的计算机进行物理数据交换</li><li>软件部分<br>网络服务器——包括了<u>控制网络用户如何访问托管文件</u>的几个部分<br>HTTP 服务器——理解 URL（网络地址） 和 HTTP（浏览器用来查看网络协议）软件。通过存储的域名访问服务器。<img  src=http://www.plantuml.com/plantuml/svg/NOwnJiD044Jhx5TiJ4HdkOzE9q61A159ZzRdTNoHyPdRIr94z0W9KIFHKC4Fy4b1V0QNd0CIpHOpRsPdR3lJhYf6vUhQ6YvcxDVifQWeK4d2Dt8GD4ZlRM2Sq9w892x9JycRnjvIu8BwlhM6WdLTBea0CEGhF3dxi_3SkqsqaGIphy_dx_U7tSi7gjCowJfBcRGYKQzFkyUtI6MerEJ_B8rR6DMsPRo8Hs3asGJg5b6udC-lXfuOFCxMMgcI6rfR5zC0zm37JNdBTSZry7nwAC1hlbkn11YQScyNpHuQGh-KzAuJXXy0>要发布一个网站，需要静态 与 动态 服务器</li><li>静态服务器（static web server）服务器将它托管的文件原封不动传给浏览器</li></ul><ul><li>硬件（计算机） + 软件（HTTP 服务）</li></ul><ul><li>动态网络服务器（dynamic web server）应用服务器会在 HTTP 服务器把托管的文件发送给浏览器之前<strong>对文件进行动态更新</strong></li></ul><ul><li>硬件（计算机）+ 软件（HTTP 服务，应用服务器，数据库）<br>托管文件<br>一个网络服务器首先要存储这个网站的文件，包括 html、图片、CSS、js 脚本等。<br>可以在自己的电脑上存储以上文件，但专业的网络服务器存储有以下优势：</li></ul><ul><li>一直启动运行</li><li>一直与互联网连接</li><li>一直拥有一样的 ip 地址，互联网服务供应商（Internet Service Provider，简称 ISP）不会一直会一个家庭地下提供固定的 ip</li><li>由一个第三方提供者维护<br>通过HTTP交流<br>一个网络服务器提供了 HTTP(超文本传输协议)支持。协议是为两台电脑间交流制定的制定的。http 协议是文本化（textual），无状态化（stateless）的协议。</li><li>文本化（textual）所有的命令都是纯文本的（plain-text）和人类可读的（human-readable）。</li><li>无状态（stateless）应用服务器帮助记录客户或服务器之前的交流、业务进展或输入信息</li></ul><p>只有用户可制定 http 请求，服务器只能响应 http 请求。<br>当通过 HTTP 请求一个文件时，客户必须提供这个文件的URL。<br>网络服务器必须应答每一个 HTTP 请求，至少也要回复一个错误信息。</p><p>在网络服务器上，服务器负责处理和应答传入的请求</p><ul><li>当收到一个请求时，HTTP 服务器首先要检查所请求的 URL 是否与一个存在的文件相匹配。</li><li>如果是，网络服务器会传送文件内容回到浏览器。如果不是，一个应用服务器会建立必要的文件。</li><li>如果两种处理都不可能，网络服务器会返回一个错误信息到浏览器，最常见的是“404 未找到” [“404 Not Found”]。（这错误太常见以至于很多网页设计者花费许多时间去设计 404 错误页面 [404 error pages]。）</li></ul><p>动态和静态内容</p><h4 id="超链接-HyperLink"><a href="#超链接-HyperLink" class="headerlink" title="超链接(HyperLink)"></a>超链接(HyperLink)</h4><p>超链接（HyperLink）简称 link，是网络背后的核心概念<br>网络架构底层<br>1989 年，蒂姆·伯纳斯 - 李（Tim Berners-Lee）提出了网站三个支柱：</p><ul><li>URL 跟踪 web 文档的地址系统</li><li>HTTP 一个传输协议，以便在给定 URL 时查找文档</li><li>HTML 允许嵌入超链接的文档格式<br>链接可以将任何文本与URL相关联，用户只要激活链接（手指点击或鼠标点击，键盘 Enter 键击活）就可以到达目标文档</li><li>链接类型</li></ul><ul><li>内链<br>网页之间的链接，是网站基础</li><li>外链<br>从当前网站链接到其他网站，外链是 web 的基础。外部链接提供给您自己维护信息之外的信息</li><li>传入链接<br>从其他网站，链接到自己网页的链接</li></ul><p><strong>锚</strong><br>锚是将一个网页中的段落相连。点击锚点链接，跳转到相应部分，而不是重新加载页面<br><strong>链接和引擎</strong><br>链接对用户和搜索引擎都很重要。搜索引擎抓取一个网站时，会按照网页上提供的链接对网站进行搜索。<br>搜索引擎可以通过链接来发现网站的各种网页，使用链接的可见文本来确定哪些搜索查询适合到达目标网页。<br><em><strong>链接会影响搜索引擎链接到您的网站的方式</strong></em></p><ul><li>链接的可见文本会影响哪些搜索查询会找到给定的网址。</li><li>一个网页所拥有的链接越多，它在搜索结果中排名越高。</li><li>外部链接影响源和目标网页的搜索排名，但有多少不明确。<br>SEO (search engine optimization) 是如何使网站在搜索结果中排名高的研究。改善网站的链接使用是一种有用的搜索引擎优化技术。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> grocery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML-为什么</title>
      <link href="/2023/02/22/HTML-%E4%B8%BA%E4%BB%80%E4%B9%88/"/>
      <url>/2023/02/22/HTML-%E4%B8%BA%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<h2 id="1-p-标签里为什么不能包含块级元素"><a href="#1-p-标签里为什么不能包含块级元素" class="headerlink" title="1. p 标签里为什么不能包含块级元素"></a>1. p 标签里为什么不能包含块级元素</h2><blockquote><p><a href="w3.org/TR/html4/sgml/dtd.html">DTD(Document Type Definition)</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT P - O (%inline;)*            -- paragraph --&gt;</span><br></pre></td></tr></table></figure><blockquote><p>表示 p 元素只能包含内联元素，<a href="https://www.w3.org/TR/html401/struct/text.html#h-9.3.1">The P element represents a paragraph. It cannot contain block-level elements (including P itself).</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIME 类型</title>
      <link href="/2023/02/17/MIME-%E7%B1%BB%E5%9E%8B/"/>
      <url>/2023/02/17/MIME-%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="关于-MIME-类型"><a href="#关于-MIME-类型" class="headerlink" title="关于 MIME 类型"></a>关于 MIME 类型</h2><p>多用途互联网邮件扩展类型（Multipurpose Internet Mail Extensions）媒体类型是一种标准，用来表示文档、文件或字节流性质和格式。<br><code>type/subType</code></p><table><thead><tr><th>类型</th><th>描述</th><th>典型类型</th></tr></thead><tbody><tr><td>text</td><td>普通文本，人类可读</td><td>text/plain 纯文本文档;<br />text/html html文档;<br/> text/css css 文件;<br/> text/javascript JavaScript 文件</td></tr><tr><td>image</td><td>某种图像，包含动态图，如 gif。使用 image 类型，但不包括视频</td><td>image/gif gif 图片 <br/>image/png png 图片<br/> image/jpeg jpeg 图片<br/> image/bmp, image/webp, image/x-icon, image/vnd.microsoft.icon</td></tr><tr><td>audio</td><td>某种音视文件</td><td>audio/midi, audio/mpeg, audio/webm, audio/ogg, audio/wav</td></tr><tr><td>video</td><td>某种视频文件</td><td>video/webm, video/ogg</td></tr><tr><td>application</td><td>某种二进制文件</td><td>application/octet-stream;<br/> application/pkcs12, application/vnd.mspowerpoint, application/xhtml+xml, <br />application/xml xml 文件；<br/> application/pdf pdf 文件；<br/>aplication/json json 文件<br/></td></tr></tbody></table><p><em><strong>text 类型，默认 text/plain，application 类型，默认 application/octet-stream</strong></em></p>]]></content>
      
      
      
        <tags>
            
            <tag> grocery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-生成器函数</title>
      <link href="/2023/02/14/JavaScript-%E7%94%9F%E6%88%90%E5%99%A8%E5%87%BD%E6%95%B0/"/>
      <url>/2023/02/14/JavaScript-%E7%94%9F%E6%88%90%E5%99%A8%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h2><p>JavaScript 依赖于单纯程执行模型，导致的问题是服务请求未完成前，UI 页面都在等待渲染状态，用户看到是空白页面。<br>生成器函数能生成一组值的序列，每个值的生成都是基于每次请求，并不同于标准函数那样立即生成。</p><blockquote><p>yield 用于生成独立的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个生成器函数</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title class_">SnacksGenerator</span>() &#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;cookie&#x27;</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;dried fruit&#x27;</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;chips&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for-of 循环取出生成的值序列</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> snack <span class="keyword">of</span> <span class="title class_">SnacksGenerator</span>()) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(snack)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>yield* 把执行权交给下一个生成器</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义生成器一</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title class_">Ingredient</span>() &#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;chilies&#x27;</span>;</span><br><span class="line"><span class="keyword">yield</span>* <span class="title class_">SnacksGenerator</span>(); <span class="comment">// 执行权交给 SanacksGenerator</span></span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;mushroom&#x27;</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;lamb&#x27;</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;sesame sauce&#x27;</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;peppercorns&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义生成器二</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title class_">SnacksGenerator</span>() &#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;cookie&#x27;</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;dried fruit&#x27;</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;chips&#x27;</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">of</span> <span class="title class_">Ingredient</span>()) &#123;</span><br><span class="line"><span class="title function_">assets</span>(<span class="string">&#x27;assets&#x27;</span>, item !== <span class="literal">null</span>, item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>for-of 循环取出生成器中生成的值序列，迭代器进行迭代的语法糖</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个生成器，可生成 ingredient 序列</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title class_">Ingredient</span>() &#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;chilies&#x27;</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;mushroom&#x27;</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;lamb&#x27;</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;sesame sauce&#x27;</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;peppercorns&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 调用生成器 ingredient 创建一个迭代器 _ 以下是 for-of 的实现</span></span><br><span class="line"><span class="comment">let IngredientIterator = Ingredient()</span></span><br><span class="line"><span class="comment">let item; // 保存生成器产生的值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 迭代器进行迭代的语法糖 </span></span><br><span class="line"><span class="comment">while(!(item = IngredientIterator.next()).done) &#123;</span></span><br><span class="line"><span class="comment">assets(&#x27;assets&#x27;, item !== null, item.value)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里 for-of 注意是遍历生成器的值的序列，并不是迭代器哦</span></span><br><span class="line"><span class="keyword">for</span>(item <span class="keyword">of</span> <span class="title class_">Ingredient</span>()) &#123;</span><br><span class="line"><span class="title function_">assets</span>(<span class="string">&#x27;assets&#x27;</span>, item !== <span class="literal">null</span>, item.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='#a33'>调用生成器，不会直接执行生成器，而是产生一个迭代器对象与生成器通信。迭代器对象暴露的最基本的接口是 <code>next</code>，<code>next</code> 用来向生成器求一个值，从而控制生成器，遇到 <code>yield</code> 返回中间对象。多次循环，直至 <code>&#123;value: undefined, done: true&#125;</code></font></p><h3 id="生成器与迭代器工作流"><a href="#生成器与迭代器工作流" class="headerlink" title="生成器与迭代器工作流"></a>生成器与迭代器工作流</h3><div style="background: #fff"><pre class="mermaid">    flowchart TD    invokeGenerator[调用生成器] -->|"Generator()"| iterator("迭代器 Iterator")    iterator -->|"next()"| yield{生成器中是否还有yield?}    yield -->|yes| Yes("    {        value: 'cookie', // 结果值        done: false // 指示器    }")    yield -->|no| No("    {        value: undefined, // 结果值        done: true // 指示器    }")    No -->|"done: ture"| End</pre></div><h3 id="生成器与迭代器通信"><a href="#生成器与迭代器通信" class="headerlink" title="生成器与迭代器通信"></a>生成器与迭代器通信</h3><h4 id="yield-next"><a href="#yield-next" class="headerlink" title="yield / next"></a>yield / next</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成器传参</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title class_">Generator</span>(param)&#123;</span><br><span class="line"><span class="keyword">yield</span> param</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为生成器提供一个初始值 initialValue</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Iterator</span> = <span class="title class_">Generator</span>(<span class="string">&#x27;initialValue&#x27;</span>)</span><br><span class="line"><span class="comment">// 用 next 方法向生成器请求一个值</span></span><br><span class="line"><span class="title class_">Iterator</span>.<span class="title function_">next</span>() </span><br><span class="line"><span class="comment">// 可以用 next 方法为等待中的 yield 表达式提供值</span></span><br><span class="line"><span class="title class_">Iterator</span>.<span class="title function_">next</span>(<span class="string">&#x27;is wait yield?&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>next 方法可以为等待中的 yield 提供值，所以第一个 next 方法传参无效，因为第一次执行生成器代码，没有等待中的 yield.</p></blockquote><h4 id="try-catch"><a href="#try-catch" class="headerlink" title="try-catch"></a>try-catch</h4><p>迭代器通过 throw 方法向生成器抛出异常</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建生成器</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title class_">Generator</span>() &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="keyword">yield</span> <span class="string">&#x27;try-catch&#x27;</span></span><br><span class="line"> &#125;<span class="keyword">catch</span>(e) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Iterator</span> = <span class="title class_">Generator</span>()</span><br><span class="line"><span class="title class_">Iterator</span>.<span class="title function_">next</span>()</span><br><span class="line"><span class="title class_">Iterator</span>.<span class="keyword">throw</span>(<span class="string">&#x27;throw an exception&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="生成器的执行状态"><a href="#生成器的执行状态" class="headerlink" title="生成器的执行状态"></a>生成器的执行状态</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title class_">GeneratorFn</span>(name) &#123;</span><br><span class="line"><span class="keyword">yield</span> name + <span class="string">&#x27; Suspended&#x27;</span></span><br><span class="line"><span class="keyword">yield</span> name + <span class="string">&#x27; Executing&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title class_">GeneratorFn</span>()</span><br><span class="line">iterator.<span class="title function_">next</span>()</span><br><span class="line">iterator.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure><img  src=http://www.plantuml.com/plantuml/svg/jP5DIyD048Rl-ok6lJHHgtTfUn4Hpps9z90cOnj8DoNPI4M4AXwg5FNGYnGKGT63eWU_Q9J-cMoQct_1JT9FJoAufzcTsNdUUKUPKo6RBG0jUcuTcO465BdcS4gOpH4SirBbHBUPos6TewDnsu4yh25BOwKoYbGWUNb8hbmGhQxmUuFEPTWw4-TtNn_jSIok3uFUITW-Y5xU1iUlONC_jrGk40c6c4Uab4rpo5basE2AMWAA3TGzRhBAK1MtwoIfWabPJ2TXlna--zFam9-XHP_tmNilFBgDhjhfYwn9hwBr17J7H4jAqMe8yv21iIaP2j7ZWpYzYOT9_gLTfU0iYVeTqRq0khkjMHukGsPiobI31J1i9fDRbejxT7RYZOJgeAPNqIXDxoB9q5_QaYuhgTF_sPZL4VglnamQZ8pXZlVJ65YnQtKBEHhV><h3 id="执行上下文跟踪生成器函数"><a href="#执行上下文跟踪生成器函数" class="headerlink" title="执行上下文跟踪生成器函数"></a>执行上下文跟踪生成器函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个生成器函数</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">generator</span>(<span class="params">snack</span>) &#123;</span><br><span class="line"><span class="keyword">yield</span> snack + <span class="string">&#x27;Production&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> iterator = <span class="title function_">generator</span>(<span class="string">&#x27;chips&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="调用生成器函数之前的应用状态"><a href="#调用生成器函数之前的应用状态" class="headerlink" title="调用生成器函数之前的应用状态"></a>调用生成器函数之前的应用状态</h4><blockquote></blockquote><img  src=http://www.plantuml.com/plantuml/svg/PL1DJW8n55vFJ_426pGIKHOaP38RWXo04vIPD-F4sfgsg4WcCI76VrVgMjt83eqR3WG3nx2b1X6xQVgzz_tLLxh7C20Xeqf1dtWivTYs64H2Quo8rw7XGI95bqSDmOG4bYRxkYKHESb8I6LaQUjBFMHCdBWjBnPSExWOnx5xjzCpX9rTP-Y6MbAkZgX4hesol_qJJMcZ3VEFmUnncBzSMRU5Quk93cKDeuMd6gY2mlHYEFqypw_Vvwzta_7DP7oRFryMB26pKHSL7Ql9ZrCf3etJ2d4-ki-_dcOFe-dRe02-3wNc5XIhrLgjKjc05KeGW1LDDKggJV0wcDuOcoBckyhc42z1xeR6M9cB9WXBR8ylNECk3tKg-2QKDlgPpPcHlwNAqlvrEVYNcgm3zVfI_PUrOlWD><hr><h4 id="调用生成器函数之后的应用状态"><a href="#调用生成器函数之后的应用状态" class="headerlink" title="调用生成器函数之后的应用状态"></a>调用生成器函数之后的应用状态</h4><blockquote></blockquote><img  src=http://www.plantuml.com/plantuml/svg/TLAxJiCm59tZhx3Q0Og8A5IYeegoeD8FO4GC9d5I2sCZnuMMAX8IGhoPA3Emq0qG2mj_GqC_0xjvqFIHmP6lxtdSOrk1x51i0uUY881TOEmXPzyNlCNSJKwvW9JuJUaBZ1amA65uM_T3bqk9NH021mbt5go3AUN7ZHZdSIRZSj7pl7Y_JKumN5sBIUD3AH0B3f70J2fcvAl_BEhY-iR656S8h9La5AIL3qYRC3yPgq7v7g9rTaG4Fz2iA825mNb_y74wVBkBFdk_zs-3bxC2j2ouM5-6nKgbMYsNIt0COjjGco4I2oIv08QfFc0eaqaXJCNIIZqlT_4TzTudvUQeAJ6b5J0rUGqkE4ro62meWIIJp0C8rAfgC7EnnKPYNeivad2s11TBtR2Wo4BThEZWyFtizw4VFLrgXT7jnUbigZnnUpoQwEfr-7pxytNzytKJFLve5YDCCQbW3ZOQSGuC65COSwT9N1UpNTFEcz1kywvCePzXrlUV59XcpLgdBWAaoK5p_3nLdUIkrR9S_rd7efu1o0cacpy0><hr><h4 id="生成函数执行之后"><a href="#生成函数执行之后" class="headerlink" title="生成函数执行之后"></a>生成函数执行之后</h4><blockquote><p>生成函数执行之后，generator 函数执行上下文出栈，但不被销毁，因为 iterator 保持着对 generator 函数执行上下文的引用</p></blockquote><img  src=http://www.plantuml.com/plantuml/svg/TP99JiCm58RNyIcUsWKK4J5K0b5LtLIb1-049dM2XR6HOw208Y4XLEOLPGriODS22n0Ijo6Xny2kEpTaaSWlx_-_DxWOgaD6IiXZE0pX63cRsDiEfDZZjR9WGWAZmPOA924SEOnoic7oeIQK8ZKK8G_BMfhia30c3gfMvmkkR3Zh-xuzRz0Z0alBrjJ-L1BpS1TBmfLsne7-fbbdLzRMfZmZL5pejO8DUOVMAGzwRLMPsCIimlUf53l65OUGYSzUujUJJkicUM_-thRYfzCC58imMvc7R3w_khguc8CHIQa4fXYgYCHAIEIu-a5EbN0RMETc6XRNZrN6WOtlfDcU1Fx3qpXD2xdklG0ptXRT3MSqe3ULGHKer6yTWs1OHnVcxt5FKS7dO3Pt76MqMMIIjHrqsgU_To_9mxaXTFTdvrFM4oNrqU4a5y-Tn-kVpykVpwlalc5SdCWOMLKVEIRiDfaYZ10NYe0qrmc4FwKk35k0L9FuuorkVEco4HglrsN4LsvfQikeFoLmkrIJCW55avf2OMIX0-UHuQOeXXYTEjXCoYLmKohu0m00><hr><h4 id="调用跌代器的-next-方法"><a href="#调用跌代器的-next-方法" class="headerlink" title="调用跌代器的 next 方法"></a>调用跌代器的 next 方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个生成器函数</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">generator</span>(<span class="params">snack</span>) &#123;</span><br><span class="line"><span class="keyword">yield</span> snack + <span class="string">&#x27;Production&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> iterator = <span class="title function_">generator</span>(<span class="string">&#x27;chips&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> res = iterator.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure><blockquote><p>再次激活 Generator 执行上下文，并推入栈。从上一次执行位置之后继续执行</p></blockquote><img  src=http://www.plantuml.com/plantuml/svg/TPAxJiCm58Rd-2ciTe0Y8cuI5LNL1PK-02DYC8cJMhWsibskYeI447ScO0OMs02niF0sDErZSDmqRLf2XaIsp_-Vx_nELPi3Jcl8uqHhV8ISBU9jXqgsXRygkLIOix1fGaMfG0vdWgxRUknBOwYF8kGHvUV93YZdSg-Hw08fJB9T388WMQ-pGueN5XFJvD0e8lGEKLGOS2OXVFEiYyihAtyy8rIT6un2RESMssSY78pLu7AByBhOPKgsh2lHkD0vVUry7FVURkBF--xjM-Vvf82hLJnTdyN5fQLoUNw-X3EIMWrR66Qe8aOgvBZm84THtUQcWe6E1Z29dnuqg4WgruIDAU58z-hZ96VVyVtx9Ca_8C0165f0A1KyvJNPZfw21eEuXdX8mnlsS3ZYw3SBsi8pJ8ePF5qwYWfW5a4jkE7U-qdtxZL-FBSD-lUQvBOAITFzR6ZnnKllwVhdw_Bdwof-EBCcJfHgqdvZilw4_yWoMQKQTwF9V9-AJRSs3W6mur0kfu4PLerYGcaIs5Ns3xOb4rtGfAPIoLpQq3aJO8vYr0PAX-ddNBIRG_0B><hr><h4 id="iterator-next-执行之后"><a href="#iterator-next-执行之后" class="headerlink" title="iterator.next() 执行之后"></a>iterator.next() 执行之后</h4><blockquote><p>生成器挂起，返回生成器表达式的值与生成器状态值对象</p></blockquote><img  src=http://www.plantuml.com/plantuml/svg/TLAxJiCm59tZhxXgXr94nACIYAhgWafN9Bx094wmC7PbExogI4W8yMQYpC026o0M5lw6flqCxAOfRGaP4kNwdiSzrpMb3ncf8uzXfQ2Dd2tixOHIHDnV4qn8O3JSrg4aX2E7KKusRJ_uGclYenXvMFfvi4F2cDXlfhX0S9sMYq4GfF-Rz8Z0ub9AcXvgYRbgOKcuDimuDDyywkBowkeVpXZLveUZOAkyImye3uTZDPdOmgp1zwWKkvOLAoXqJr-wxyVzrvlaezExVUq-dHIWLeEPnXmKAvMLbOM5Cen1wdMmPgWc4ciXaUEQ1pcIg8ZfAhJtC8j85KhUDcqfs932ZpnD1I_DcR2uEGamKoJES4t2Kw9rRbDCRMQrngJHiw-aypPjz1-VngPngRZ9B3DJCWB3D4VkaJ9lKuFmryT0B8ZumFOip9JRSS6GnQRNi47_xQHtzv8yd5k1mThJMDVC8iZ1UAR9nNF_yVhxy_BxyogvFxCaJfpTbT6G4xZ1Y3cu64sAk8m4sgt_sIZA9WDNsWjhMwQ4q3IcMXrRmeXvB90SnA-CQHsbcRCuDyV13m00><hr><p>最后再执行 <code>iteractor.next()</code> 没有 <code>yield</code> 表达式，<code>return &#123;value: undefined, done: true&#125;</code> 生成器进入结束状态。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-闭包和作用域</title>
      <link href="/2023/02/04/Javascript-%E9%97%AD%E5%8C%85%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>/2023/02/04/Javascript-%E9%97%AD%E5%8C%85%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x * <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>()()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn1</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span></span><br><span class="line"><span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x * <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn1</span>()()</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包是纯函数式编程语言的主要特征之一。<br>闭包允许函数访问并操作函数外的变量，只要闭包或变量存在于声明函数时所在的作用域内，闭包即可使用函数使用这些变量或函数。</p><h3 id="闭包-demo"><a href="#闭包-demo" class="headerlink" title="闭包 demo"></a>闭包 demo</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> outerValue = <span class="string">&#x27;outerValue&#x27;</span></span><br><span class="line"><span class="keyword">var</span> later</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outerFn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">innerFn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> innerValue = <span class="string">&#x27;innerValue&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(outerValue, innerValue)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">later = innerFn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">outerFn</span>() </span><br><span class="line"><span class="title function_">later</span>() <span class="comment">// outerValue innerValue</span></span><br></pre></td></tr></table></figure><p>闭包创建了被定义时的作用域内的变量或函数的安全汽泡，函数获得了执行时的引用。因此，即使 outerFn 函数执行结束被销毁，但引用存在。<br><strong>每一个通过闭包访问变量的函数都有作用域链，作用域包含闭包的全部信息</strong><br><font color='#a33'>使用闭包，所有信息都会存在内存中。直到 Javascript 引擎确保这些信息不再使用，即可以进行安全的垃圾回收或卸载页面才会清理。</font></p><img  src=http://www.plantuml.com/plantuml/svg/AqfDBadCIyz9LSWlBKajKaWiLb02mcekpfp4fDGSY6XOOavfAama9n4emiLPXAhHBG-a1qaqCoyFBWhL2HQ2cWKJAoZAp2lnXri2jZyvFwyuFoTLBoS_NGDXlwOIcYvFk74OkX0sGNI1CBeUNLqxL1VLSe4Lehi8f0uv53Z10O3GxfR71THQ2m00><h3 id="闭包-——-封装私有变量"><a href="#闭包-——-封装私有变量" class="headerlink" title="闭包 —— 封装私有变量"></a>闭包 —— 封装私有变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 私有变量</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">getNum</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">setNum</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">num++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> counter = <span class="keyword">new</span> <span class="title class_">Counter</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="property">num</span>); <span class="comment">// undefined 通过闭包封装的私有变量外部无法访问</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="title function_">getNum</span>()) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h4 id="JavaScript-中没有真正的私有变量属性，只是通过闭包实现一种可接受的“私有变量”方案"><a href="#JavaScript-中没有真正的私有变量属性，只是通过闭包实现一种可接受的“私有变量”方案" class="headerlink" title="JavaScript 中没有真正的私有变量属性，只是通过闭包实现一种可接受的“私有变量”方案"></a>JavaScript 中没有真正的私有变量属性，只是通过<strong>闭包</strong>实现一种可接受的“私有变量”方案</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">User</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 私有变量</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;helen&#x27;</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">setName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">name += <span class="string">&#x27; is called&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> userA = <span class="keyword">new</span> <span class="title class_">User</span>()</span><br><span class="line">userA.<span class="title function_">setName</span>()</span><br><span class="line"><span class="keyword">var</span> userB = &#123;&#125;</span><br><span class="line">userB.<span class="property">getName</span> = userA.<span class="property">getName</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userB.<span class="title function_">getName</span>()) <span class="comment">// helen is called</span></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><p>JavaScript 允许将一个对象的属性复制给另外一个对象，导致如 demo，name 属性并非真正私有变量，<em><strong>但可成为一种隐藏信息的有用方式</strong></em></p></blockquote><h3 id="闭包-——-回调函数"><a href="#闭包-——-回调函数" class="headerlink" title="闭包 —— 回调函数"></a>闭包 —— 回调函数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">animateIt</span>(<span class="params">elementId</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(elementId)</span><br><span class="line"><span class="keyword">var</span> tick = <span class="number">0</span></span><br><span class="line"><span class="comment">// 匿名函数作为计时器的参数</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">tick++;</span><br><span class="line"><span class="keyword">if</span> (tick &lt; <span class="number">100</span>) &#123;</span><br><span class="line">element.<span class="property">style</span>.<span class="property">left</span> = element.<span class="property">style</span>.<span class="property">top</span> = tick + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">clearInterval</span>(timer)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">10</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">animateIt</span>(<span class="string">&#x27;box1&#x27;</span>)</span><br></pre></td></tr></table></figure><p>闭包内部的函数不仅可以在闭包创建的时刻访问这些变量，而且当闭包内部的函数执行时，还可以更新这些变量的值。闭包不是在创建的那一时刻的状态的快照，而是一个真实的状态封装，只要闭包存在，就可以对变量进行修改。</p><h4 id="结合词法环境，理解闭包"><a href="#结合词法环境，理解闭包" class="headerlink" title="结合词法环境，理解闭包"></a>结合词法环境，理解闭包</h4><img  src=http://www.plantuml.com/plantuml/svg/XP4_Jy906CRdtgUub4KIGP21fAbT21fdH-DmjDTwuRWprrDHGc9YZF_TS5ONtT2uiFXjeF8nl6iB5CIuzNrxp_F-tkUrGtb2iGDS93pO0KO3kSr0y4FcrJZb0fvWIlbn831cmF0vaqaxv_j-Kk-GKmpBwy2WXE7afnI8XGT8O2P15xWKXU4oQqg2VPawQ_6E9e4Ubn9xIcUlfMX84xH8cx00X5APmEZwTVny5prTQTkOFA2yWMXDyU2sXBQz5TUE0r48pT75s-ZZB14D1pV3mMtqU6bgRJUL8qPQIE9jMPvPR1uoLnBE9YQNNr7lVT4ayG36RuD2mPcdKYkbMIHmTNP416-fa3AGu_vzzDdxVkYFNivD1G5NwgimLwbKgwLI7cOaYggJ6Mj1FyMT9Zv3MfmKRp8_wVzHc69TMT3so14ateRPuEsowHIBHNjDjHnWIE8sBLZI7oqizBwXv085UCQooMA42UnAljFLXr1Fvo-eqrkC2ImsB6lg6mioKy3oWopB16JX_dfaMRkxU5hjxVq0><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>在程序的特定部分中，标识符的可见性。作用域是程序的一部分，特定名字绑定特定的变量。</p><h3 id="通过执行上下文来跟踪代码-——-Javascript-引擎如何跟踪函数的执行并回到函数的位置"><a href="#通过执行上下文来跟踪代码-——-Javascript-引擎如何跟踪函数的执行并回到函数的位置" class="headerlink" title="通过执行上下文来跟踪代码 —— Javascript 引擎如何跟踪函数的执行并回到函数的位置"></a>通过执行上下文来跟踪代码 —— Javascript 引擎如何跟踪函数的执行并回到函数的位置</h3><p>Javascript 中，代码执行的基础单元是函数。<br>Javascript 中每条语句的执行，都处于特定的执行上下文。Javasacript 分为两种代码，全局代码和函数。同样，执行上下文也分为函数执行上下文和全局执行上下文。全局执行上下文只有一个，当 Javascript 代码执行时即创建。函数执行上下文可有多个，每调用一个函数，创建一个新的函数执行上下文。</p><h3 id="函数执行上下文"><a href="#函数执行上下文" class="headerlink" title="函数执行上下文"></a>函数执行上下文</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">user</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title function_">getOrderList</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getOrderList</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title function_">assets</span>(<span class="string">&#x27;assets&#x27;</span>, <span class="literal">true</span>, <span class="string">`this is user&#x27;s order list`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">user</span>()</span><br></pre></td></tr></table></figure><blockquote><p><font color="#a33">Javascript 是单线程模型，同一时刻只能执行特定的代码</font><br>Javascript 引擎使用执行上下文跟踪函数的执行。使用执行上下文栈（调用栈）跟踪执行上下文。具体如下：</p></blockquote><ul><li>Javascript 程序开始，全局执行上下文已创建，开始执行<strong>全局执行上下文</strong></li></ul><img  src=http://www.plantuml.com/plantuml/svg/Aov9JCvMSAr8JIujoSpFSyxFAqcjA568vk9yshhYwSQ6PvtBNopiURAZwycExcVJshbY0G00><ul><li><code>user()</code> 函数调用，<code>user</code>执行上下文入栈，全局执行上下文暂停</li></ul><img  src=http://www.plantuml.com/plantuml/svg/Aov9JCvMSAr8JIujoSpFSyxFAqcjA568vkAqIR8hBKujKdZQllVPr0tFEfU_MDZpP4VNantTpwQrSt7gwkfoSJvjNV5qOmEQd4PnQN51QbwA9bSi0000><ul><li><code>getOrderList()</code> 函数调用后， <code>user()</code>函数执行上下文暂停， <code>getOrderList()</code> 函数执行上下文入栈</li></ul><img  src=http://www.plantuml.com/plantuml/svg/Aov9JCvMSAr8JIujoSpFSyxFAqcjA568vkAqIR9BJotnBqf9BVB9B2vHUDg-zzdK3SywbxzOsFDaHzUJ7TtFfhLpSUhgwd9nbXQd5c5Ny7vFHt5fSK5gNihxFPrGrKzRLppTs82cK0EgJ9Ch5W00><ul><li><code>getOrderList()</code> 函数执行完成后，<code>getOrderList</code> 函数上下文出栈，<code>user</code> 函数恢复执行</li></ul><img  src=http://www.plantuml.com/plantuml/svg/Aov9JCvMSAr8JIujoSpFSyxFAqcjA568vkAqIR8hBKujKdZQllVPr0tFEfU_MDZpP4VNantTpwQrSt7gwkfoSJvjNV5qOmEQd4PnQN51QbwA9bSi0000><ul><li><code>user</code> 函数执行完后，<code>user</code> 函数上下文出栈，全局执行上下文恢复执行</li></ul><img  src=http://www.plantuml.com/plantuml/svg/Aov9JCvMSAr8JIujoSpFSyxFAqcjA568vk9yshhYwSQ6PvtBNopiURAZwycExcVJshbY0G00><h3 id="使用词法环境跟踪变量的作用域"><a href="#使用词法环境跟踪变量的作用域" class="headerlink" title="使用词法环境跟踪变量的作用域"></a>使用词法环境跟踪变量的作用域</h3><p>词法环境（lexical enviroment）是 JavaScript 引擎内部用来跟踪标识符与特定变量之间的映射关系。<br>词法环境，即作用域（scopes）是 JavaScript 作用域的内部实现机制。<br>函数、代码片断、try-catch 语句可以具有独立的标识映射表。</p><h4 id="代码嵌套与词法环境"><a href="#代码嵌套与词法环境" class="headerlink" title="代码嵌套与词法环境"></a>代码嵌套与词法环境</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userId = <span class="number">0</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUserInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> url=<span class="string">&#x27;/getUserInfo/&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">async</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> host=<span class="string">&#x27;localhost:8080&#x27;</span></span><br><span class="line"><span class="title function_">request</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> method = <span class="string">&#x27;get&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userId)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">user</span>()</span><br></pre></td></tr></table></figure><img  src=http://www.plantuml.com/plantuml/svg/nLFBRjD055rdlk8gR00fZtPL1SUBLX2LBMA1eYmSUv9OdSm4UznILP4A9RGyb0rjaQY4026rAsY4X29e_wPsikCNc1axiPCOgIkGlB2Fxpdtt9Vcycs2TMGQZWKx263LC3Sg3lEejSO8S-0H9eHjLHoCgVZRO9I7-5RBvXXraLQ85C3bWWh1ozFnfpV1nmEXbW4bsw3Be6aEVknXb-iw62va_VtBuEWy3BuQlheQlWwEzxCnOqam37URcjUC5-5Dp1-ws5cd3NOjKfEmka7MH4Nu2HVyYlgUK7jd_c0tXIeUMK--sh8j2zDQNfTk5Re4kGcQawW2Px2Pb0Yw26JRc6CqCKZxw_UeojxmgCbjHY5HqyrREzqi0ieu1iuw9RXlR1eFJCVkSF0lZeAt_V7vtkZmB2pQVz4RNNxLwdgrUfTksWvhOyfhDQrGr_t1Xs3tzFU5gAll7vpultu6xtwCtZyVzR_vd_T69qE_zttyz31sfkOmxqo1_yzJj4tphY8uwOlW1ly7nX2qZKuqu5W4RXZ4Dd6TUFWEiIakoJTvPndmv5ojibwK7_6S6mnkv-IgXEiGBOdIZdSXcQ1ZqmsbdRSOvzXIT-SvfAmN4eo2pA9c5if7Cqt8AoGfJEncYwl3Lv8jvlAoJfXf4FbQMYck50KSTLog2jdfM1B24ROWlHgs8WDjp5jCT4BOZMYpfvcRNawiWTHfHNrQw0eAht5Iv-oFPKWuJVv2YQrA3IbLgxCRKgkXwNMaP4kDdzpvNysdiL1A5_FvnOJ-bsD_y0mj35F6fYURCDAtI_7cMZ-b_040><p>词法环境主要基于代码嵌套，通过代码嵌套可以实现代码结构包含另一代码结构。<br>无论何时创建函数都会创建一个与之关联的词法环境，并存在函数的[[Eviroment]]内部属性上。也会创建内部环境环境的引用。<br>JavaScript 引擎调用函数内置的[[Eviroment]]属性与创建时的环境相关联。</p><h3 id="理解-JavaScript-变量"><a href="#理解-JavaScript-变量" class="headerlink" title="理解 JavaScript 变量"></a>理解 JavaScript 变量</h3><blockquote><p><a href="/2018/05/29/JavaScript-%E5%8F%98%E9%87%8F/">JavaScript-变量</a></p></blockquote><h3 id="词法环境中注册标识符-——-在函数声明之前调用函数"><a href="#词法环境中注册标识符-——-在函数声明之前调用函数" class="headerlink" title="词法环境中注册标识符 —— 在函数声明之前调用函数"></a>词法环境中注册标识符 —— 在函数声明之前调用函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userId, getUserInfo, arrowFn, statementFn) <span class="comment">// undefined ƒ getUserInfo() &#123;&#125; undefined undefined</span></span><br><span class="line"><span class="keyword">var</span> userId = <span class="number">1</span></span><br><span class="line"><span class="title function_">getUserInfo</span>()</span><br><span class="line"><span class="comment">// arrowFn() // Uncaught TypeError: arrowFn is not a function</span></span><br><span class="line"><span class="comment">// statementFn() // Uncaught TypeError: statementFn is not a function</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUserInfo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">arrowFn</span> = (<span class="params"></span>) =&gt; &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> statementFn = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="Uncaught-TypeError-statementFn-is-not-a-function"><a href="#Uncaught-TypeError-statementFn-is-not-a-function" class="headerlink" title="Uncaught TypeError: statementFn is not a function"></a><font color="color:#a33">Uncaught TypeError: statementFn is not a function</font></h4><p>JavaSript 代码的执行分两个阶段进行</p><blockquote><p>第一阶段 —— 注册当前词法环境中声明的变量和函数并赋初值</p></blockquote><img  src=http://www.plantuml.com/plantuml/svg/Iyv9B2vMSC_9JqhCgURYr5KeBKujyaonKYZDIqbDoynBJG499XOLvPUxvQ695fSabgJcfkQLeClewd9nQgULvYMNPERdAQIdbeI23CrBo-Ug1G00><blockquote><p>第二阶段 —— 赋值，执行</p></blockquote><img  src=http://www.plantuml.com/plantuml/svg/Iyv9B2vMSC_9JqhCgURYr5KeBKujyaonKZ04SHABYlBBtVAi5D9Ayv9BClFpD3IhQq4InIM99QcvgNabM2HrTRaujM5Y2kcf9Q4W8_FIyhbg0G00><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><img  src=http://www.plantuml.com/plantuml/svg/RP31IiD054Nt-Of7LYe4KVVz4Tj5qCG6GeHaS2tMsWgr4QrjK4EmYcPJqoAKMitVz2LsvIyucPdK6DpCCCESU-wRjOrrK9GA63h8s8gJct7QZN3O-FuCP21rpP805Diug1EbifjuKOq-Qz_XnnpT4_eOe_UloGDUTJZBBsLG7L2t9Crqj0od95u-rygAfDt7PeYJuu8n0xTpBqLpP_8Muba7crDyRGZLKt_f3zFRKt5y72TUbmViK5QuI_Ru6iylXDsB5l5zsWin2D0V5ETbcAdffAndU95Qp4Qq0PWQsTmxj1m2w7hBbYkpa5M5mWzcJLPnhFXl71-e5yAHQWEV9nkF9LQjgYqeVv3EN_wX2YN-igADjM_eKhwpzGS0><h3 id="词法环境注册标识符-——-函数重载"><a href="#词法环境注册标识符-——-函数重载" class="headerlink" title="词法环境注册标识符 —— 函数重载"></a>词法环境注册标识符 —— 函数重载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn&#x27;</span>, fn) <span class="comment">// fn ƒ fn() &#123;&#125;</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="number">3</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn&#x27;</span>, fn) <span class="comment">// fn 3</span></span><br></pre></td></tr></table></figure><blockquote><p>第一阶段，JavaScript 引擎进行代码扫描，合建词法环境，注册变量、声明函数</p></blockquote><img  src=http://www.plantuml.com/plantuml/svg/Aox9BqfCJrL8AyrBBidCprD8B5PGWd4qD1MgQvMuSXCB5DnpyfCISnIKSpBJCqhSYr9JynIgkJWLql8Kj7HrxU3QkMe1><blockquote><p>第二阶段，赋值并执行</p></blockquote><img  src=http://www.plantuml.com/plantuml/svg/oqqiK73FoKzAp55GpibCpoXnBqfDpLEevk9KICjJiBLJCEQg1G00><h2 id="通过词法环境理解闭包"><a href="#通过词法环境理解闭包" class="headerlink" title="通过词法环境理解闭包"></a>通过词法环境理解闭包</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">setNum</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">getNum</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img  src=http://www.plantuml.com/plantuml/svg/ZPBDJjj058NNcQUu8XiYnP0s2oHZUODGnQQRBaaNjZCn5fCPoHuN48eKAPK2uhSg80Ge0IGGeYq9wgAqXVPbCiPPzHLgCqE2K1UzEzyvFdE-Oni1NoBOH0wnWW2MKSQsd7dNPo4jJp72V22UEyTV-HXJb24UnMzIFPGPvxYCQiWOLmOM8MoXwYrwr5LcKua9npuO1enEvxF5uiH4eP23QVhEyraLKmwccTv8mweEXSIBCew1u0hNmR3DbsF6k6qEN4JpBjhjngUVucxZVkUYv9UeM3aKFtz4Uzsuin5ztRtVx8ZJnkCBmsjAjEIBgqRlzY3-revlBkFEMU_kAF4GxNRlvakqMe-ELiLrlT-u45lx_UOMKW0E2n_pp-IpbbLC9WSpDE0MTN2QFllGZar2F9bsCoPhIQ42p5-7LPJHD0rbNFdmdF259AHu0QAF6sccp-UIRa0TjTxtwyUIFUM8V--8mrQ2BAvQlLzhelCzlZvnfFZFxJgVymA8rfjY-mEeBK81PxxbOf2Hm0fWf19IXtkCgjre3fPh8qdisa3i_aCiT_OJDP8LwRhorZHJMGvEtE69gW4z4IjENKz_WjbaXf_jRJB8_N_fNm00><hr><blockquote><p>词法环境用于保持跟踪函数中定义的变量</p></blockquote><img  src=http://www.plantuml.com/plantuml/svg/hLDDRzD043rdVyN8kIHIKm8vL39H3erAn0KEd53LmyRUEcutkyXUqq8L2GcX0aNSu8Y02vpukFK2loP9-pCOxwvZP-CRNKLHzkNDl3VZvtwgdd4s805DGZWZ0BiqE1ubCXFXK7APm6F6kJmP9Om9_FTG2cNmaqci628y5imWAg4YVK8J9fHbFegVCxXzXyn8_vRL0PgtcyQdiOW819ocAOou75E-9vx6YPnYDT0KlCMhxulVBwxU_rnyVUa1zFlGsjjgzdexEzrk6ohamG2WoUDeehJ9kxcXxL0gnVA16Z34MHHBV3ZCHA1YAH0B2aoEZrY0TcU55yjsp5WK5kT_bXz-BTzyk_xoxWQiYMpgGxUY7Z7r89iwuWQyMMreG4NMhkE-I1KL0TEgGJ7oZq_plnUULdgurQIqXwSDAoxg69anpvWxOQgjayOs7j8mWsXTB0wExNUkPiPQVdxjGLCdI-z7XzAaOuXnOgSARPWxofOfCTNpoxVpoulbntDF5y-A1aQsR63kHOFALciQu6UzlBC_YSEGYOFEODsP7KicD695Yku9hL44hzK-c-MjgqopeJMQnLfjsAH7DNI3ZTVun5bRPsMtZ0XnHqEE6q3YPiFthUESRH_l9YSgESL3TzLzlqXOpd8wrD675VfglwJyYVX6qJwUydg0Xq35_yRBxllvArbN5Vr7LUMjhA-N6Tx_0G00>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 函数上下文</title>
      <link href="/2023/02/02/Javascript-%E5%87%BD%E6%95%B0%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
      <url>/2023/02/02/Javascript-%E5%87%BD%E6%95%B0%E4%B8%8A%E4%B8%8B%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h2 id="函数上下文"><a href="#函数上下文" class="headerlink" title="函数上下文"></a>函数上下文</h2><p>函数的隐式参数 <code>this</code> 表示被调用的函数上下文的对象。代表函数调用相关对象。**<code>this</code> 指向受函数定义、位置和调用方式影响**</p><h3 id="函数调用与this"><a href="#函数调用与this" class="headerlink" title="函数调用与this"></a>函数调用与this</h3><img  src=http://www.plantuml.com/plantuml/svg/ZL71Ji904BttA_RCXRidFeKgDJQ1IWH3l97Gfa58mIWbgLfB8f6OM6eWiCLMVcPtMax-WaCNbUZ5s-JDlFTctXHgTVciNb6rKaMkIZd2pHW6WPJxgjAWbTnC20A860lkjxud465q35u4an6FUensFgAkw2QtSx36o2N5-ebQEo3dMaavLZMbL1J4pRtxRsu3bpjjP4J2uZj6LtmQfgyZi4EO3SI2GdKxJw1hylwLWDFfM4mbZYv8QFFBcFjkOWMCDbDplkS1hhvfUliX_F40EzXD-IvxxsJaJTD9roOvailbl5ojbY_oXxW-sLVWlIdMR6LjLNn7A79ZoUBhdUv3dz5diU_s4ud_mX_dFxaJPB6m3SD5ylO4xRNeC7g9ru1jPYTQkp0TNLXZ37Wk33rkp8XKKF3VukUV><h2 id="修改函数上下文"><a href="#修改函数上下文" class="headerlink" title="修改函数上下文"></a>修改函数上下文</h2><blockquote><p>使用 bind、call、apply 仅只修改函数声明，函数表达式 <code>this</code>，对于箭头函数无能为力。箭头函数 <code>this</code> 指向声明时所处函数上下文</p></blockquote><p>bind、call、apply 都是用第一个参数来指定 <code>this</code> 的，也就是说函数体内若使用 <code>this</code>，那么它指的就是执行函数体内使用 <code>this</code>，<code>this</code> 指的就是 <code>bind、call、apply</code> 的第一个参数。具体使用及函数返回值，参考下文</p><h3 id="Function-prototype-apply"><a href="#Function-prototype-apply" class="headerlink" title="Function.prototype.apply()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">Function.prototype.apply()</a></h3><blockquote><p>func.apply(thisArg, [argsArray])，返回调用有指定 this 值和参数的函数的结果。则返回 undefined。</p></blockquote><h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> _this = &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span> + <span class="string">&#x27; &#x27;</span> + (a + b + c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)) <span class="comment">// [object Window] 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn.<span class="title function_">apply</span>(_this, [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])) <span class="comment">// [object Object] 15</span></span><br></pre></td></tr></table></figure><h4 id="demo-1"><a href="#demo-1" class="headerlink" title="demo"></a>demo</h4><p><font color="#a33">有一组自变量必须在多次调用间共享</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">plus</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">num</span> + num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">let</span> numberObj1 = &#123;<span class="attr">num</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> numberObj2 = &#123;<span class="attr">num</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(plus.<span class="title function_">apply</span>(numberObj1, arr)) <span class="comment">// 16</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(plus.<span class="title function_">apply</span>(numberObj2, arr)) <span class="comment">// 17</span></span><br></pre></td></tr></table></figure><h4 id="demo-2"><a href="#demo-2" class="headerlink" title="demo"></a>demo</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组合并</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>], b = [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">a.<span class="title function_">push</span>(...b) <span class="comment">// 3，返回数组 length, 修改数组 a = [1,2,3,4]</span></span><br><span class="line">a.<span class="property">push</span>.<span class="title function_">apply</span>(a, b) <span class="comment">// 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="Function-prototype-call"><a href="#Function-prototype-call" class="headerlink" title="Function.prototype.call()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call">Function.prototype.call()</a></h3><blockquote><p><code>call()</code> 使用一个指定的 <code>this</code> 值和单独给出一个或多个参数来调用一个函数<br><font color="#a33">对象实例 A 需要调 对象 B 的方法，采用 call 传入对象实例 A，执行调用</font><br>使用调用者提供的 this 值和参数调用该函数的返回值。若该方法没有返回值，则返回 undefined。同 apply</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * thisArg 在 function 函数运行时使用的 this 值</span></span><br><span class="line"><span class="comment"> * 如果这个函数处于非严格模式下，则指定为 null 或 undefined 时会自动替换为指向全局对象，原始值会被包装。</span></span><br><span class="line"><span class="comment"> * arg1, arg2, ...指定的参数列表。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span>.<span class="title function_">call</span>(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">public</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>&#x27;s age is <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;helen&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">12</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;audery&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public.<span class="title function_">call</span>(person1)</span><br><span class="line">public.<span class="title function_">call</span>(person2)</span><br></pre></td></tr></table></figure><p>在 window 环境下，直接调用 <code>public()</code>，相当于 <code>window.public()</code>，这时的 <code>this</code> 代表 <code>window</code> 对象。使用<code>call</code> 传入参数对象 person，就相当于指定当前函数调用的执行上下文为 <code>person</code> 对象</p><h4 id="demo-3"><a href="#demo-3" class="headerlink" title="demo"></a>demo</h4><p><font color="#a33"><code>this</code>可能不是该方法看到的实际值：<strong>如果这个函数处于非严格模式下，则指定为 null 或 undefined 时会自动替换为指向全局对象</strong>，原始值会被包装。</font><br><font color="#f33">注意在做严格模式测试时 <code>use strict</code> 必须写在代码第一行，否则测试无效</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &#x27;use strict&#x27;;</span></span><br><span class="line"><span class="keyword">var</span> sData = <span class="string">&#x27;Helen&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">display</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sData value is %s &#x27;</span>, <span class="variable language_">this</span>.<span class="property">sData</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">display.<span class="title function_">call</span>();  <span class="comment">// sData value is Helen，严格模式下，Uncaught TypeError: Cannot read properties of undefined (reading &#x27;sData&#x27;)</span></span><br><span class="line">display.<span class="title function_">call</span>(<span class="literal">null</span>);  <span class="comment">// sData value is Helen，严格模式下，同上</span></span><br><span class="line">display.<span class="title function_">call</span>(<span class="literal">undefined</span>);  <span class="comment">// sData value is Helen，严格模式下，同上</span></span><br><span class="line">display.<span class="title function_">call</span>(&#123;&#125;);  <span class="comment">// sData value is undefined</span></span><br></pre></td></tr></table></figure><h4 id="demo-4"><a href="#demo-4" class="headerlink" title="demo"></a>demo</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用一个具有给定 this 的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TempObj</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">tempArray</span> = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tempObj = <span class="keyword">new</span> <span class="title class_">TempObj</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定作用域为 tempObj</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">call</span>(tempObj, ...tempObj.<span class="property">tempArray</span>))</span><br></pre></td></tr></table></figure><h4 id="demo-5"><a href="#demo-5" class="headerlink" title="demo"></a>demo</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组合并</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>], b = [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">a.<span class="title function_">push</span>(...b) <span class="comment">// 4，返回数组 length，修改数组 a, 数组 a = [1,2,3,4]</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">a.<span class="title function_">concat</span>(b) <span class="comment">// [1, 2, 3, 4] 创建了一个新数组，不会修改数组 a</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">a.<span class="property">push</span>.<span class="title function_">call</span>(a, ...b) <span class="comment">// 同直接调用 push 方法，返回数组 length 为 4，修改数组 a, 数组 a = [1,2,3,4]</span></span><br></pre></td></tr></table></figure><h4 id="demo-6"><a href="#demo-6" class="headerlink" title="demo"></a>demo</h4><blockquote><p>每个数据类型都有自己的 toString 方法，但实现方式不同。现在需要 emptyArray，调用对象 toString ，拿到对象 toString 方法的返回值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> emptyArray = []</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">toString</span>() <span class="comment">// &quot;[object Window]&quot;</span></span><br><span class="line">emptyArray.<span class="title function_">toString</span>() <span class="comment">// &quot;&quot;</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">toString</span>.<span class="title function_">call</span>(emptyArray) <span class="comment">// &quot;[object Array]&quot;</span></span><br></pre></td></tr></table></figure><p><code>toString</code> window 环境中调用的，返回 <code>window.toString()</code> 的返回值。使用 <code>call</code>，指定参数[] 为 this，用来判断数据类型</p><h3 id="Function-prototype-bind"><a href="#Function-prototype-bind" class="headerlink" title="Function.prototype.bind()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">Function.prototype.bind()</a></h3><blockquote><p>Function.prototype.bind 执行结果返回新函数，这个新函数的 this 绑定对象，会固定为调用 bind() 时指定的对象`</p></blockquote><h4 id="demo-7"><a href="#demo-7" class="headerlink" title="demo"></a>demo</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">forEach</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="title function_">callback</span>(<span class="variable language_">this</span>.<span class="property">i</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">i</span>: <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn = forEach.<span class="title function_">bind</span>(obj)</span><br><span class="line"><span class="title function_">fn</span>(<span class="keyword">function</span>(<span class="params">i</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i, <span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * bind 方法返回的是一个函数</span></span><br><span class="line"><span class="comment"> * 在 forEach.bind(obj) 将 this 绑定到 obj 对象</span></span><br><span class="line"><span class="comment"> * 返回函数 forEach(callback) &#123;</span></span><br><span class="line"><span class="comment">     console.warn(callback(this.i), 1)</span></span><br><span class="line"><span class="comment">   &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="demo-8"><a href="#demo-8" class="headerlink" title="demo"></a>demo</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bindDemo = &#123;</span><br><span class="line"><span class="attr">clicked</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">click</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">clicked</span> = <span class="literal">true</span></span><br><span class="line"><span class="title function_">assets</span>(<span class="string">&#x27;assets&#x27;</span>, <span class="variable language_">this</span>.<span class="property">clicked</span>, <span class="variable language_">this</span> + <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, bindDemo.<span class="property">click</span>.<span class="title function_">bind</span>(bindDemo)) </span><br></pre></td></tr></table></figure><blockquote><p>click 函数调用绑定方法，<font color='#a33'>创建一个新函数</font>，该函数体一致，函数行为一致。this 指向绑定参数</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 转义字符和文本元素</title>
      <link href="/2022/12/26/HTML-%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/"/>
      <url>/2022/12/26/HTML-%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><table><thead><tr><th>字符</th><th>名称转义</th><th>编辑转义</th><th>描述</th></tr></thead><tbody><tr><td>“</td><td>&amp;quot;</td><td>&amp;#034;</td><td>双引号</td></tr><tr><td>&amp;</td><td>&amp;amp;</td><td>&amp;038;</td><td>与符号</td></tr></tbody></table><h2 id="文本元素"><a href="#文本元素" class="headerlink" title="文本元素"></a>文本元素</h2><ul><li>b 元素 <b> 字体加粗 bold 显示 </b></li><li>i 元素 <i> 字体显示为斜体 italic </i></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Network-localhost/127.0.0.1/0.0.0.0的区别联系</title>
      <link href="/2022/10/21/Network-localhost-127-0-0-1-0-0-0-0%E7%9A%84%E5%8C%BA%E5%88%AB%E8%81%94%E7%B3%BB/"/>
      <url>/2022/10/21/Network-localhost-127-0-0-1-0-0-0-0%E7%9A%84%E5%8C%BA%E5%88%AB%E8%81%94%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>名称</th><th>定义</th><th>特性</th></tr></thead><tbody><tr><td>localhost</td><td>回路网络（loopback）的一个<strong>标准的主机名</strong>,对应 ip（127.0.0.1）ipv4/(::1)ipv6</td><td></td></tr><tr><td>127.0.0.1 or ::1</td><td>是一个<strong>回送地址</strong>，主机IP堆栈内部的IP地址</td><td></td></tr><tr><td>0.0.0.0 or ::</td><td>一个不可<strong>路由的元地址</strong>，用于指定无效、未知、或不适用的目标</td><td></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>System</title>
      <link href="/2022/10/19/System/"/>
      <url>/2022/10/19/System/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql-dmg-安装-cannot-be-opened-because-the-developer-cannot-be-verified"><a href="#mysql-dmg-安装-cannot-be-opened-because-the-developer-cannot-be-verified" class="headerlink" title="mysql.dmg 安装 ** cannot be opened because the developer cannot be verified"></a>mysql.dmg 安装 ** cannot be opened because the developer cannot be verified</h2><blockquote><p>macOS 上的可执行程序都需要经过苹果授予的证书签名后才能正常执行，<strong>自行编译或下载的可执行文件没有签名</strong></p></blockquote><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ol><li>   系统偏好（System Preferences）-&gt; 安全与隐私（Security &amp; Privacy）-&gt; 打开右下脚锁</li><li>   运行被拦截的软件，出现 cannot be opened because the developer cannot be verified, 点击 cancel</li><li>   点击 系统偏好 里 Allow Anyway</li><li>   再次运行需要安装的软件</li></ol><h2 id="brew-install-mysql"><a href="#brew-install-mysql" class="headerlink" title="brew install mysql"></a>brew install mysql</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ brew install mysql // 安装 mysql</span><br><span class="line">$ brew services start mysql // 启动 mysql 服务</span><br><span class="line">$ mysql -u root // 连接 mysql 服务器</span><br></pre></td></tr></table></figure><h2 id="ERROR-2002-HY000-Can’t-connect-to-local-MySQL-server-through-socket-‘-tmp-mysql-sock’"><a href="#ERROR-2002-HY000-Can’t-connect-to-local-MySQL-server-through-socket-‘-tmp-mysql-sock’" class="headerlink" title="ERROR 2002(HY000): Can’t connect to local MySQL server through socket ‘/tmp/mysql.sock’"></a>ERROR 2002(HY000): Can’t connect to local MySQL server through socket ‘/tmp/mysql.sock’</h2><blockquote><p>It’s probably because MySQL is installed but not yet running mysql 安装后没有启动服务</p></blockquote><h3 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew services start mysql</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> macos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TS-编译</title>
      <link href="/2022/03/06/TS-%E7%BC%96%E8%AF%91/"/>
      <url>/2022/03/06/TS-%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<h2 id="命令行中编译选项"><a href="#命令行中编译选项" class="headerlink" title="命令行中编译选项"></a>命令行中编译选项</h2><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-w/–watch</td><td>在监视模式下运行编译器</td></tr></tbody></table><h2 id="tsConfig-json"><a href="#tsConfig-json" class="headerlink" title="tsConfig.json"></a>tsConfig.json</h2><p>tsConfig.json 是 ts 编译器的配置文件，ts 编译器将根据 tsConfig.json 中的配置信息对代码进行编译。</p><blockquote><p>根目录下存在 <code>tsConfig.json</code>， terminal 中运行以下命令行，<span class='custom-box custom-box-933'>将编译当前目录及子目录中的所有 ts 文件</span></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tsc</span><br></pre></td></tr></table></figure><h3 id="配置介绍"><a href="#配置介绍" class="headerlink" title="配置介绍"></a>配置介绍</h3><h4 id="include"><a href="#include" class="headerlink" title="include"></a>include</h4><p><span class='custom-box custom-box-393'><code>include</code> 指定需要编译的文件路径</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsConfig.js</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;include&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;./src/**/*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;...&quot;</span></span><br><span class="line">    ],  <span class="comment">// 配置需要编译的文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>**</code> 递归匹配任意子文件夹</li><li><code>*</code> 匹配任意文件</li></ul><h4 id="exclude"><a href="#exclude" class="headerlink" title="exclude"></a>exclude</h4><p><span class='custom-box custom-box-393'><code>exclude</code> 指定不需要编译的文件路径</span><br><span class='custom-box custom-box-933'><code>exclude</code> 默认配置为 <code>[&quot;node_modules&quot;, &quot;bower_components&quot;,&quot;jspm_packages&quot;]</code></span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsConfig.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;include&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;./src/**/*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;...&quot;</span></span><br><span class="line">    ],  <span class="comment">// 配置需要编译的文件</span></span><br><span class="line">    <span class="string">&quot;exclude&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;./src/compiled/*&quot;</span></span><br><span class="line">    ] <span class="comment">// 配置不需要编译的文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h4><p><span class='custom-box custom-box-393'><code>extends</code> 指定需要继承的配置文件</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsConfig.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;include&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;./src/**/*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;...&quot;</span></span><br><span class="line">    ],  <span class="comment">// 配置需要编译的文件</span></span><br><span class="line">    <span class="string">&quot;exclude&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;./src/compiled/*&quot;</span></span><br><span class="line">    ], <span class="comment">// 配置不需要编译的文件</span></span><br><span class="line">    <span class="string">&quot;extends&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;../config.json&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="files"><a href="#files" class="headerlink" title="files"></a>files</h4><p><span class='custom-box custom-box-393'><code>files</code> 具体指明编译的文件列表</span><span class='custom-box custom-box-933'>只有需要编译的文件少时才会用到</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;files&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;./index.ts&quot;</span>,</span><br><span class="line">        <span class="string">&quot;./app.ts&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="compilerOptions"><a href="#compilerOptions" class="headerlink" title="compilerOptions"></a>compilerOptions</h4><p>ts 编译器选项</p><blockquote><p><code>target</code> 要将 ts 编译为 ES 的哪个版本</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;files&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;./variable/01.ts&quot;</span> <span class="comment">// 该文件下存在变量赋值为 BigInt 类型，所以 ts 编译版本不能低于 ES2020</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;target&quot;</span>: <span class="string">&quot;ES2020&quot;</span> <span class="comment">// &#x27;es3&#x27;, &#x27;es5&#x27;, &#x27;es6&#x27;, &#x27;es2015&#x27;, &#x27;es2016&#x27;, &#x27;es2017&#x27;, &#x27;es2018&#x27;, &#x27;es2019&#x27;, &#x27;es2020&#x27;, &#x27;es2021&#x27;, &#x27;es2022&#x27;, &#x27;esnext&#x27;.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>module</code> 指定使用的模块化规范，<a href="/2019/03/26/Javascript-%E6%A8%A1%E5%9D%97%E5%8C%96/">【更多关于模块化】</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;target&quot;</span>: <span class="string">&quot;es6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;module&quot;</span>: <span class="string">&quot;es6&quot;</span> <span class="comment">// &#x27;none&#x27;, &#x27;commonjs&#x27;, &#x27;amd&#x27;, &#x27;system&#x27;, &#x27;umd&#x27;, &#x27;es6&#x27;, &#x27;es2015&#x27;, &#x27;es2020&#x27;, &#x27;es2022&#x27;, &#x27;esnext&#x27;, &#x27;node16&#x27;, &#x27;nodenext&#x27;.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>lib</code> 指定项目中要使用的库<br><font color='red'>Cannot find name ‘console’. Do you need to change your target library? Try changing the ‘lib’ compiler option to include ‘dom’.</font></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">// lib 库设置选项包括：</span></span><br><span class="line">        <span class="comment">//  &#x27;es5&#x27;, &#x27;es6&#x27;, &#x27;es2015&#x27;, &#x27;es7&#x27;, &#x27;es2016&#x27;, &#x27;es2017&#x27;, &#x27;es2018&#x27;, &#x27;es2019&#x27;, &#x27;es2020&#x27;, &#x27;es2021&#x27;, &#x27;es2022&#x27;, &#x27;es2023&#x27;, &#x27;esnext&#x27;, &#x27;dom&#x27;, &#x27;dom.iterable&#x27;, &#x27;webworker&#x27;, &#x27;webworker.importscripts&#x27;, &#x27;webworker.iterable&#x27;, &#x27;scripthost&#x27;, &#x27;es2015.core&#x27;, &#x27;es2015.collection&#x27;, &#x27;es2015.generator&#x27;, &#x27;es2015.iterable&#x27;, &#x27;es2015.promise&#x27;, &#x27;es2015.proxy&#x27;, &#x27;es2015.reflect&#x27;, &#x27;es2015.symbol&#x27;, &#x27;es2015.symbol.wellknown&#x27;, &#x27;es2016.array.include&#x27;, &#x27;es2017.date&#x27;, &#x27;es2017.object&#x27;, &#x27;es2017.sharedmemory&#x27;, &#x27;es2017.string&#x27;, &#x27;es2017.intl&#x27;, &#x27;es2017.typedarrays&#x27;, &#x27;es2018.asyncgenerator&#x27;, &#x27;es2018.asynciterable&#x27;, &#x27;es2018.intl&#x27;, &#x27;es2018.promise&#x27;, &#x27;es2018.regexp&#x27;, &#x27;es2019.array&#x27;, &#x27;es2019.object&#x27;, &#x27;es2019.string&#x27;, &#x27;es2019.symbol&#x27;, &#x27;es2019.intl&#x27;, &#x27;es2020.bigint&#x27;, &#x27;es2020.date&#x27;, &#x27;es2020.promise&#x27;, &#x27;es2020.sharedmemory&#x27;, &#x27;es2020.string&#x27;, &#x27;es2020.symbol.wellknown&#x27;, &#x27;es2020.intl&#x27;, &#x27;es2020.number&#x27;, &#x27;es2021.promise&#x27;, &#x27;es2021.string&#x27;, &#x27;es2021.weakref&#x27;, &#x27;es2021.intl&#x27;, &#x27;es2022.array&#x27;, &#x27;es2022.error&#x27;, &#x27;es2022.intl&#x27;, &#x27;es2022.object&#x27;, &#x27;es2022.sharedmemory&#x27;, &#x27;es2022.string&#x27;, &#x27;es2022.regexp&#x27;, &#x27;es2023.array&#x27;, &#x27;es2023.collection&#x27;, &#x27;esnext.array&#x27;, &#x27;esnext.collection&#x27;, &#x27;esnext.symbol&#x27;, &#x27;esnext.asynciterable&#x27;, &#x27;esnext.intl&#x27;, &#x27;esnext.disposable&#x27;, &#x27;esnext.bigint&#x27;, &#x27;esnext.string&#x27;, &#x27;esnext.promise&#x27;, &#x27;esnext.weakref&#x27;, &#x27;esnext.decorators&#x27;, &#x27;decorators&#x27;, &#x27;decorators.legacy&#x27;.</span></span><br><span class="line">        <span class="attr">lib</span>: [<span class="string">&quot;es6&quot;</span>, <span class="string">&quot;dom&quot;</span>] <span class="comment">// 一般不需要修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>outDir</code> 指定编译后文件的存储目录</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;./dist&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>outFile</code> 将代码合并为一个文件<br><span class='custom-box custom-box-933'>设置 <code>outFile</code> 扣，所有的全局作用域中的代码会合并到同一个文件中</span><br><font color='red'>Only ‘amd’ and ‘system’ modules are supported alongside –outFile.</font></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;module&quot;</span>: <span class="string">&quot;amd&quot;</span>, <span class="comment">// Asynchronous Module Definition，Require.js 规范</span></span><br><span class="line">        <span class="string">&quot;outFile&quot;</span>: <span class="string">&quot;./dist/outFile.js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>allowJs</code> 是否编译 js 文件，默认 false 不编译；<code>checkJs</code> 是否对 js 文件进行 ts 语法检查，默认不检查</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// check.js</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">a = <span class="string">&#x27;hello&#x27;</span> <span class="comment">//不能将类型“string”分配给类型“number”。ts(2322)</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;module&quot;</span>: <span class="string">&quot;amd&quot;</span>, <span class="comment">// Asynchronous Module Definition，Require.js 规范</span></span><br><span class="line">        <span class="string">&quot;outFile&quot;</span>: <span class="string">&quot;./dist/outFile.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;allowJs&quot;</span>: <span class="literal">true</span>, <span class="comment">// 默认 false</span></span><br><span class="line">        <span class="string">&quot;checkJs&quot;</span>: <span class="literal">true</span>, <span class="comment">// 默认 false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>removeComments</code> 编译时移除注释</li><li><code>noEmit</code> 不生成编译后的文件 <span class='custom-box custom-box-993'>使用频率低，语法检查时使用</span></li><li><code>noEmitOnError</code> 编译错误时不生成编译后文件</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;module&quot;</span>: <span class="string">&quot;amd&quot;</span>, <span class="comment">// Asynchronous Module Definition，Require.js 规范</span></span><br><span class="line">        <span class="string">&quot;outFile&quot;</span>: <span class="string">&quot;./dist/outFile.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;removeComments&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;noEmitOnError&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;noEmit&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>noImplicitAny</code> 不允许使用隐匿 <code>any</code> 类型</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.ts</span></span><br><span class="line"><span class="comment">// 使用隐式 any</span></span><br><span class="line"><span class="comment">// 参数 &quot;a&quot; 隐式具有 &quot;any&quot; 类型，但可以从用法中推断出更好的类型。ts(7044)</span></span><br><span class="line"><span class="comment">// 参数 &quot;b&quot; 隐式具有 &quot;any&quot; 类型，但可以从用法中推断出更好的类型。ts(7044)</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p><code>noImplicitAny</code> 开启</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsConfig.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;module&quot;</span>: <span class="string">&quot;amd&quot;</span>, <span class="comment">// Asynchronous Module Definition，Require.js 规范</span></span><br><span class="line">        <span class="string">&quot;outFile&quot;</span>: <span class="string">&quot;./dist/outFile.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;removeComments&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;noEmitOnError&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;noEmit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;noImplicitAny&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>Error:</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用隐式 any</span></span><br><span class="line"><span class="comment">// 参数“a”隐式具有“any”类型。ts(7006)</span></span><br><span class="line"><span class="comment">// 参数“b”隐式具有“any”类型。ts(7006)</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>noImplicitAny</code> 不允许不明确类型的this {noImplicitAny:true}</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.ts</span></span><br><span class="line"><span class="comment">// this 的值取决于它的调用方式，浏览器直接调用 this，this 则指向 window</span></span><br><span class="line"><span class="comment">// 对象方法调用，this 指向当前对象</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse/app.ts:16:25 - error TS2683: &#x27;this&#x27; implicitly has type &#x27;any&#x27; because it does not have a type annotation.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span>(<span class="params"><span class="variable language_">this</span>: any</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>strictNullChecks</code> 检查语法是否存在空值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsConfig.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;module&quot;</span>: <span class="string">&quot;amd&quot;</span>, <span class="comment">// Asynchronous Module Definition，Require.js 规范</span></span><br><span class="line">        <span class="string">&quot;outFile&quot;</span>: <span class="string">&quot;./dist/outFile.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;removeComments&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;noEmitOnError&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;noEmit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;noImplicitAny&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;strictNullChecks&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>)</span><br><span class="line">box.<span class="property">innerHtml</span> = <span class="string">&#x27;&lt;div&gt;null&lt;/div&gt;&#x27;</span></span><br></pre></td></tr></table></figure><p><font color='red'>TS2531: Object is possibly ‘null’</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>)</span><br><span class="line">box?.<span class="property">innerHtml</span> = <span class="string">&#x27;&lt;div&gt;null&lt;/div&gt;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>strict</code> 所有严格检查的总开关</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.bash_profile/.bashrc/.zshrc</title>
      <link href="/2021/07/06/bash-profile/"/>
      <url>/2021/07/06/bash-profile/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/macos/terminal.png" alt="img.png"><br>灾难性事件，电脑硬盘挂了。那么近几天我所做的是恢复之前的配置<br/><br><font color="#f99"><br>    需求如上图：<br>    terminal 中显示 git 分支，当前路径，主机及用户名<br></font></p><h2 id="几个-bash-配置文件的说明"><a href="#几个-bash-配置文件的说明" class="headerlink" title="几个 bash 配置文件的说明"></a>几个 bash 配置文件的说明</h2><ul><li>  <code>/etc/profile</code> 为系统的每个用户设置环境信息，当用户第一次登录时，该文件被执行，并从 <code>/etc/profile.d</code> 目录的配置文件中搜集 shell 的设置</li><li>  <code>/etc/bashrc</code> 为每个运行 bash shell 的用户执行此文件，当 bash shell 被打开时，该文件被读取</li><li>  <code>~/.bash_profile</code> 每个用户可以使用该文件输入专用于自己使用的 shell 信息，<strong>当用户登录时</strong> 该文件仅仅执行一次。默认情况下，他设置一些环境变量，执行用户的 .bashrc 文件</li><li>  <code>~/.bashrc</code> 该文件包含专用于你的 bash shell 的 bash 信息，当登录时以及每次打开新的 shell 时，该文件读取</li></ul><p>另外,/etc/profile中设定的变量(全局)的可以作用于任何用户,而~/.bashrc等中设定的变量(局部)只能继承/etc/profile中的变量,他们是”父子”关系.</p><h2 id="login-shell"><a href="#login-shell" class="headerlink" title="login shell"></a>login shell</h2><p>通过终端输入用户名和密码，进入 terminal 的 shell 环境，<code>ssh 进入远程主机</code>。</p><h2 id="no-login-shell-环境"><a href="#no-login-shell-环境" class="headerlink" title="no-login shell 环境"></a>no-login shell 环境</h2><p>无需用户名和密码进入的 shell 环境，<code>从桌面终端进入</code> 的 shell 环境就是 no-login shell。</p><blockquote><p>想通过 login shell 运行的命令放在 <code>.bash_profile</code>中，想通过 no login shell 运行的命令则放入 .bashrc 中</p></blockquote><blockquote><p>Mac OS 中，运行 termianl 时系统默认运行 login shell。所以 $home 中没 .bashrc</p></blockquote><h2 id="bashrc-配置图片需求"><a href="#bashrc-配置图片需求" class="headerlink" title=".bashrc 配置图片需求"></a>.bashrc 配置图片需求</h2><p><u>terminal 中显示 git 分支，当前路径，主机及用户名</u></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">find_git_branch() &#123;</span><br><span class="line">        git branch 2&gt; /dev/null | sed -n -e &#x27;s/^\* \(.*\)/[\1]/p&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PRCMPT_COMMAND=&quot;find_git_branch; $PROCMPT_COMMAND&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># zsh 下 ps1 配置</span></span></span><br><span class="line">export PS1=&quot;[%9F%n@%10F%M %13F%~ $(find_git_branch)]%15F&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export LS_OPTIONS=’–color=auto’ # 如果没有指定，则自动选择颜色</span><br><span class="line">export CLICOLOR=&#x27;Yes&#x27; #是否输出颜色</span><br><span class="line">export LSCOLORS=&#x27;CxfxcxdxbxegedabagGxGx&#x27; #指定颜色</span><br><span class="line">~                                                   </span><br></pre></td></tr></table></figure><h2 id="bash-profile"><a href="#bash-profile" class="headerlink" title=".bash_profile"></a>.bash_profile</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#.bash_profile 文件中添加如下代码</span><br><span class="line">if [ -f ~/.bashrc ]; then</span><br><span class="line">   source ~/.bashrc</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#如此 terminal 读取 .bash_profile 文件后 会 load .bashrc 文件内容</span><br></pre></td></tr></table></figure><blockquote><p>运行 <code>source .bash_profil</code> 使配置生效。<font color="#f33">目前这种方式仅一次有效</font></p></blockquote><h2 id="zshrc"><a href="#zshrc" class="headerlink" title=".zshrc"></a>.zshrc</h2><p>zsh mac 下最好用的终端，新建 <code>~/.zshrc</code>，添加 <code>source ~/.bash_profile</code> 使 <code>.bashrc</code> 下的配置永久有效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zshrc 下配置</span></span><br><span class="line">source ~/.bash_profile </span><br></pre></td></tr></table></figure><h2 id="ERROR-切换分支后，分支号没有实时更新"><a href="#ERROR-切换分支后，分支号没有实时更新" class="headerlink" title="ERROR 切换分支后，分支号没有实时更新"></a><font color="#f33">ERROR 切换分支后，分支号没有实时更新</font></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># ~/.zshrc</span></span></span><br><span class="line">source ~/.bashrc</span><br><span class="line"></span><br><span class="line">find_git_branch() &#123;</span><br><span class="line">        git branch 2&gt; /dev/null | sed -n -e &#x27;s/^\* \(.*\)/[\1]/p&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setopt PROMPT_SUBST</span><br><span class="line">export PROMPT=&#x27;%9F%n@%10F%M%f %13F%~%f %F&#123;green&#125;$(find_git_branch)%f %F&#123;normal&#125;$%f &#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> macos </tag>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>坑-JavaScript</title>
      <link href="/2021/06/28/%E5%9D%91-JavaScript/"/>
      <url>/2021/06/28/%E5%9D%91-JavaScript/</url>
      
        <content type="html"><![CDATA[<h2 id="Uncaught-SyntaxError-Illegal-break-statement（非法的-break-语句）"><a href="#Uncaught-SyntaxError-Illegal-break-statement（非法的-break-语句）" class="headerlink" title="Uncaught SyntaxError: Illegal break statement（非法的 break 语句）"></a>Uncaught SyntaxError: Illegal break statement（非法的 break 语句）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>].<span class="title function_">map</span>(<span class="function"><span class="params">i</span> =&gt;</span> &#123;<span class="keyword">if</span>(i==<span class="number">3</span>) <span class="keyword">throw</span> <span class="title class_">Error</span>(); <span class="variable language_">console</span>.<span class="title function_">log</span>(i)&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>break 语句中止<strong>当前循环</strong>，<strong>switch语句</strong>或<strong>label 语句</strong>，并把程序控制流转到紧接着被中止语句后面的语句。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>;  i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] === <span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i])</span><br><span class="line">&#125; <span class="comment">// 1,2</span></span><br></pre></td></tr></table></figure><p><font color="#f33">map,forEach 中使用<u>try…catch + throw Error 模拟 break</u></font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>].<span class="title function_">map</span>(<span class="function"><span class="params">i</span> =&gt;</span> &#123;<span class="keyword">if</span>(i==<span class="number">3</span>) <span class="keyword">throw</span> <span class="title class_">Error</span>(); <span class="variable language_">console</span>.<span class="title function_">log</span>(i)&#125;)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;&#125; <span class="comment">// 1,2</span></span><br></pre></td></tr></table></figure><p><font color="#f33">未解决疑问，在定义之前调用原型方法无效</font></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown 使用小技巧</title>
      <link href="/2021/06/11/mackdown-%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2021/06/11/mackdown-%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="markdown-与-mermaid"><a href="#markdown-与-mermaid" class="headerlink" title="markdown 与 mermaid"></a>markdown 与 mermaid</h2><p><span class="custom-flag-933">注释片段不能包含代码块，否则会影响 mermaid 渲染</span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- ```javascript --&gt;</span><br><span class="line">&lt;!-- console.log(1)</span><br><span class="line">... // some expression</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;!-- ``` --&gt;</span><br></pre></td></tr></table></figure><p><span class="custom-flag-933">markdown mermaid graph 不能用 <code>end</code> 标签</span></p><h2 id="个人-markdown-编写规则"><a href="#个人-markdown-编写规则" class="headerlink" title="个人 markdown 编写规则"></a>个人 markdown 编写规则</h2><ul><li>#a33 特别注意的问题</li><li>&gt; 知识点</li><li>#f99 弱提醒</li></ul><h2 id="markdown-显示部分，省略其余"><a href="#markdown-显示部分，省略其余" class="headerlink" title="markdown 显示部分，省略其余"></a>markdown 显示部分，省略其余</h2><blockquote><span id="more"></span></blockquote><h2 id="markdown-中使用-mermaid-编制流程图"><a href="#markdown-中使用-mermaid-编制流程图" class="headerlink" title="markdown 中使用 mermaid 编制流程图"></a>markdown 中使用 mermaid 编制流程图</h2><blockquote><p>graph TD <font color="#f33">td 要大写</font></p></blockquote><h2 id="markdown-中编辑一些代码动图"><a href="#markdown-中编辑一些代码动图" class="headerlink" title="markdown 中编辑一些代码动图"></a>markdown 中编辑一些代码动图</h2><p><a href="https://juejin.cn/post/6909481718156099597#heading-0">keynote 制作代码编辑动图</a></p><h2 id="markdown-中插入图片，需要重启服务"><a href="#markdown-中插入图片，需要重启服务" class="headerlink" title="markdown 中插入图片，需要重启服务"></a>markdown 中插入图片，需要重启服务</h2><h2 id="table-中-换行"><a href="#table-中-换行" class="headerlink" title="table 中 换行"></a>table 中 换行</h2><blockquote><p>使用 <code>&lt;br /&gt;</code> 标签</p></blockquote><h2 id="markdown-中怎么定义变量并累加其实字符串，如下："><a href="#markdown-中怎么定义变量并累加其实字符串，如下：" class="headerlink" title="markdown 中怎么定义变量并累加其实字符串，如下："></a>markdown 中怎么定义变量并累加其实字符串，如下：</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 定义变量</span><br><span class="line">[<span class="symbol">url</span>]: <span class="link">https://baidu.com</span></span><br><span class="line">[<span class="string">url测试</span>][<span class="symbol">url</span>]+/a/b/index.html</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express</title>
      <link href="/2021/06/08/Express/"/>
      <url>/2021/06/08/Express/</url>
      
        <content type="html"><![CDATA[<p><a href="expressjs.com.cn">Express 中文网</a>，是用于开发 <span class='custom-box custom-box-393'>Web 网站服务器</span> 与 <span class='custom-box custom-box-393'>API 接口服务器</span></p><h2 id="认识-express"><a href="#认识-express" class="headerlink" title="认识 express"></a>认识 <code>express</code></h2><blockquote><p><span class='custom-box custom-box-933'>基于 Node.js 平台</span><span class='custom-box custom-box-339'>快速、开放、极简</span>的 <span class='custom-box custom-box-933'>Web 开发框架。</span><br>是 npm 上的第三方包，提供了快速创建 Web 服务器的便捷方法，类似于 NodeJs 中内置的 http 模块，<span class='custom-box custom-box-933'>专门用来创建 Web 服务器的</span><br>Express is a routing and middleware web framework that has minimal functionality of its own<br>Express 是一个路由和中间件 web 框架，本身功能很少。<br><font color='red'>An Express application is essentially a series of middleware function calls.<br><u><strong>Express 应用程序本质上是一系列中间件函数调用。</strong></u></font></p></blockquote><h3 id="安装-express"><a href="#安装-express" class="headerlink" title="安装 express"></a>安装 express</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i express@4.17.1</span><br></pre></td></tr></table></figure><h3 id="使用-express-创建-web-服务器"><a href="#使用-express-创建-web-服务器" class="headerlink" title="使用 express 创建 web 服务器"></a>使用 <code>express</code> 创建 web 服务器</h3><pre class="mermaid"> flowchart LR s1[导入] --> s2[创建 Web 服务器] s2 --> s3[启动 Web 服务器]</pre><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 2. 创建 web 服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">// 3. 启动 web 服务</span></span><br><span class="line">express.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Express-的基本使用"><a href="#Express-的基本使用" class="headerlink" title="Express 的基本使用"></a>Express 的基本使用</h3><h4 id="1-监听-GET-请求"><a href="#1-监听-GET-请求" class="headerlink" title="1. 监听 GET 请求"></a>1. 监听 GET 请求</h4><p>通过 app.get(url, function(req, res){}) 方法，监听客户端的 GET 请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数1：客户端请求的 URL 地址</span></span><br><span class="line"><span class="comment"> * 参数2：请求对应的处理函数</span></span><br><span class="line"><span class="comment"> *  req: 请求对象</span></span><br><span class="line"><span class="comment"> *  res: 响应对象</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;请求 URL&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>)&#123;&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="2-监听-POST-请求"><a href="#2-监听-POST-请求" class="headerlink" title="2. 监听 POST 请求"></a>2. 监听 POST 请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数1：客户端请求 URL</span></span><br><span class="line"><span class="comment"> * 参数2：请求对应的处理函数</span></span><br><span class="line"><span class="comment"> *  req: 请求对象</span></span><br><span class="line"><span class="comment"> *  res: 响应对象</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;请求 URL&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-SEND-将处理好的内容发送给客户端"><a href="#3-SEND-将处理好的内容发送给客户端" class="headerlink" title="3. SEND 将处理好的内容发送给客户端"></a>3. SEND 将处理好的内容发送给客户端</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;...&#125;) <span class="comment">// 向客户端发送请求内容</span></span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;success&#x27;</span>) <span class="comment">// 向客户端发送文本信息</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>请求参数<br><span class='custom-box custom-box-393'>查询参数</span> 通过 req.query 获取客户端（/user/age=15&amp;gender=male）<br><span class='custom-box custom-box-393'>查询动态参数</span>  通过 req.params 获取客户端（/user/1），动态参数可以是多个</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意 url 参数要加 ?(?age=15&amp;gender=male) 【clientUrl http://127.0.0.1:9000/users/?age=15&amp;gender=male】</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/users/?age=15&amp;gender=male&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>, <span class="string">&#x27;req.query&#x27;</span>) <span class="comment">// &#123; age: &#x27;15&#x27;, gender: &#x27;male&#x27; &#125; req.query</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;<span class="attr">id</span>: <span class="number">1</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// req.params 获取动态参数 /user/:id 【clientUrl http://127.0.0.1:9000/user/1】</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/:id/:name&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>, <span class="string">&#x27;req.params&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;<span class="attr">id</span>:<span class="number">1</span>&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="能够使用-express-static-快速托管静态资源"><a href="#能够使用-express-static-快速托管静态资源" class="headerlink" title="能够使用 express.static() 快速托管静态资源"></a>能够使用 <code>express.static()</code> 快速托管静态资源</h4><p><span class='custom-box custom-box-393'>express.static() 用于创建静态资源服务器</span> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 可以将 public 目录下的图片、CSS文件、JavaScript 文件对外开放访问</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>托管多个静态资源<br>多次调用 <code>express.static()</code> 函数，托管多个静态资源目录。<br><span class='custom-box custom-box-933'>访问静态资源时，多个目录中有相同名称的资源时，<code>express.static()</code> 函数会根据目录的添加顺序查找所需的文件</span></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;files&#x27;</span>))</span><br></pre></td></tr></table></figure><blockquote><p>挂载路径前缀<br>在托管的静态资源访问路径前 <span class='custom-box custom-box-393'>挂载路径前缀</span>，避免因挂载顺序问题，导致不能访问到指定资源的问题。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/public&#x27;</span>,express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="express-路由"><a href="#express-路由" class="headerlink" title="express 路由"></a><code>express</code> 路由</h2><p>路由指的是 <span class='custom-box custom-box-393'>映射关系</span>，在 Express 中，路由指的是 <span class='custom-box custom-box-393'>客户端请求与服务器处理函数的 <strong><u>映射关系</u></strong></span><br>Express 中路由由 <span class='custom-box custom-box-393'>请求类型(METHOD:POST/GET),请求 URL 地址（PATH）, 处理函数（HANDLE）</span>组成。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">app.<span class="title function_">METHOD</span>(<span class="variable constant_">PATH</span>, <span class="variable constant_">HANDLE</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="路由的匹配过程"><a href="#路由的匹配过程" class="headerlink" title="路由的匹配过程"></a>路由的匹配过程</h3><p>当请求到服务器之后，需要经过路由的匹配，匹配成功后，才会调用对应的处理函数<br>匹配时，按照路由的顺序进行，请求类型与请求 URL 匹配成功，Express 将请求转交给 handle 函数。</p><pre class="mermaid"> flowchart LR start((客户端请求)) subgraph app  req1["app.get('/', fn1)"]  req2["app.get('/', fn2)"]  req3["app.get('/', fn3)"]  reqMore["更多..."] end subgraph 处理函数  fn1["fn1(req, res){// 处理函数}"]  fn2["fn2(req, res){// 处理函数}"]  fn3["fn3(req, res){// 处理函数}"]  req1 -->|分发| fn1  req2 -->|分发| fn2  req3 -->|分发| fn3 end start --> app</pre><h3 id="模块化路由"><a href="#模块化路由" class="headerlink" title="模块化路由"></a>模块化路由</h3><p>为了方便对路由进行模块化管理，<span class='custom-box custom-box-933'>Express 不建议将路由直接挂载在 app 上，推荐将路由抽离为单独的模块</span></p><h4 id="创建路由模块"><a href="#创建路由模块" class="headerlink" title="创建路由模块"></a>创建路由模块</h4><pre class="mermaid"> flowchart LR subgraph routerModulejs step1[导入 express] --> step2[创建路由对象] step2 --> step3[挂载路由] step3 --> step4[导出路由] end subgraph indexjs step5[导入路由模块] --> step6[注册路由模块] end step4 --> step5</pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routerModule.js</span></span><br><span class="line"><span class="comment">// 1. 导入 express</span></span><br><span class="line"><span class="comment">// 2. 创建路由对象</span></span><br><span class="line"><span class="comment">// 3. 挂载路由</span></span><br><span class="line"><span class="comment">// 4. 导出路由 </span></span><br></pre></td></tr></table></figure><h4 id="使用路由模块"><a href="#使用路由模块" class="headerlink" title="使用路由模块"></a>使用路由模块</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./routerModule.js&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, router) <span class="comment">// 注册路由模块</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="express-中间件"><a href="#express-中间件" class="headerlink" title="express 中间件"></a><code>express</code> 中间件</h2><h3 id="什么是中间件"><a href="#什么是中间件" class="headerlink" title="什么是中间件"></a>什么是中间件</h3><blockquote><p>中间件（Middleware），业务流程的<u><strong>中间处理环节</strong></u>。<br>Middleware functions are functions that have access to the request object(req)、response object(res), and the next middleware function in the application’s request-response cycle. the next middleware function is commonly denoted by a variable named next.<br>中间件函数可以访问请求对象、响应对象以及在请求响应周期内的下一个中间件函数。下一个中间件函数通常由一个变量名 next 表示。 </p></blockquote><p>You can load application-level and router-level middleware with an optional mount path.<br>你可以加载带有可选装载路径的应用级别中间件路由级别中间件。</p><h3 id="中间件的作用"><a href="#中间件的作用" class="headerlink" title="中间件的作用"></a>中间件的作用</h3><p><span class='custom-box custom-box-933'>多个中间件之间，共享同一份 req 和 res</span>。基于这个特性，<u><strong>我们可以在上流的中间件中，统一为 req 或 res 对象添加自定义的属性或方法，供下游的中间件或路由进行使用。</strong></u></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中间件与路由之间共享 req/res 实例</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>)=&gt;</span>&#123;</span><br><span class="line">    req.<span class="property">receivedTime</span> = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求到达服务器的时间：&#x27;</span>, req.<span class="property">receivedTime</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="定义一个中间件"><a href="#定义一个中间件" class="headerlink" title="定义一个中间件"></a>定义一个中间件</h3><p>Express 中间件，<span class='custom-box custom-box-393'>本质上是一个带有 <code>next</code> 参数的 funtion 处理函数</span><br><span class='custom-box custom-box-933'>中间件函数的形参列表中，必须包含一个 next 参数</span>。路由处理函数中只包含 req 和 res。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 挂载中间件</span></span><br><span class="line"><span class="comment"> * app.get http method for which the middleware function applies</span></span><br><span class="line"><span class="comment"> * &#x27;/&#x27; Path(route) for which the middleware function applies</span></span><br><span class="line"><span class="comment"> * function(req, res, next)&#123;&#125; the middleware function</span></span><br><span class="line"><span class="comment"> *  req http request argument to the middleware function,called &#x27;req&#x27; by convention</span></span><br><span class="line"><span class="comment"> *  res http response argument to the middleware function, called &#x27;res&#x27; by convention</span></span><br><span class="line"><span class="comment"> *  next callback argument to the middleware funtion, called &#x27;next&#x27; by convention</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>)&#123;</span><br><span class="line">    <span class="comment">// next 函数是实现多个中间件连续调用的关键，它表示把流转关系转交给下一个中间件或路由</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="定义全局生效的中间件"><a href="#定义全局生效的中间件" class="headerlink" title="定义全局生效的中间件"></a>定义全局生效的中间件</h4><p>客户端发起的任何请求，到达服务器之后，都会触发的中间件，叫做全局生效的中间件。<br><span class='custom-box custom-box-393'>通过 <code>app.use()</code> 中间件函数，可定义一个全局生效的中间件</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义中间件函数</span></span><br><span class="line">cont middleware = (req, res, next) &#123;</span><br><span class="line">    <span class="comment">// 流转关系转交给下一个中间件或路由</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注册全局生效的中间件函数</span></span><br><span class="line">app.<span class="title function_">use</span>(middleware)</span><br></pre></td></tr></table></figure><p>中间件简化形式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局中间件的简化形式</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="定义局部生效的中间件"><a href="#定义局部生效的中间件" class="headerlink" title="定义局部生效的中间件"></a>定义局部生效的中间件</h4><blockquote><p>不使用 app.use() 定义的中间件为局部生效中间件。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> middleware = <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`this is a locally effective middleware`</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, middleware, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Index&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><p>You can load a series of middleware functions together,which creates a sub-stack of the middleware system at a mount point.<br>你可以一起加载多个中间件函数，将会在挂载点创建中间件子堆栈。</p><hr><h4 id="定义多个中间件"><a href="#定义多个中间件" class="headerlink" title="定义多个中间件"></a>定义多个中间件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">res, req, next</span>) =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第一个中间件&#x27;</span>)&#125;)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">res, req, next</span>) =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第二个中间件&#x27;</span>)&#125;)</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, reqs</span>) =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求路由&#x27;</span>)&#125;)</span><br><span class="line"><span class="comment">// 第一个中间件 --&gt; 第二个中间件 --&gt; 请求路由</span></span><br></pre></td></tr></table></figure><h4 id="多个局部生效的中间件"><a href="#多个局部生效的中间件" class="headerlink" title="多个局部生效的中间件"></a>多个局部生效的中间件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> middleware1 = <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`this is the first locally effective middleware`</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> middleware2 = <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`this is the second locally effective middleware`</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以下两种写法都可以使用局部中间件</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, middleware1, middleware2, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Index&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/users&#x27;</span>, [middleware1, middleware2], <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Index&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="中间件使用注意事项"><a href="#中间件使用注意事项" class="headerlink" title="中间件使用注意事项"></a>中间件使用注意事项</h3><ul><li>  一定要在路由之前注册中间件；</li><li>  客户端发送过来的请求，可以连续调用多个中间件进行处理；</li><li>  执行完中间件的业务代码后，不要忘记调用 next() 函数；</li><li>  为了防止代码逻辑混乱，调用 next() 函数之后不要再写其它代码；</li><li>  连续调用多个中间件时，多个中间件之间，共享 req 和 res;</li></ul><h3 id="中间件的分类"><a href="#中间件的分类" class="headerlink" title="中间件的分类"></a>中间件的分类</h3><ol><li> 应用级别中间件(Application-level middleware)<blockquote><p>通过<code>app.use()</code>或<code>app.get()</code>或<code>app.post()</code>，<span class='custom-box custom-box-933'>绑定到 app 实例上的中间件</span>，称为应用级别中间件。</p></blockquote></li><li> 路由级别中间件(Router-level middleware)<blockquote><p>绑定到 <code>express.Router()</code> 实例上的中间件，叫做路由级别中间件。<span class='custom-box custom-box-933'>注意：应用级别中间件是绑定在 <code>app</code> 上，路由级别中间件绑定在 <code>express.Router()</code> 实例上。</span></p></blockquote></li><li> 错误级别中间件(Error-level middleware)<blockquote><p>错误级别中间件的作用：捕获整个项目中发生的异常错误，从而防止项目异常崩溃。<span class='custom-box custom-box-933'>错误级别中间件必须在所有路由之后注册</span></p></blockquote></li><li>Express 内置中间件(Built-in middleware)<ul><li>  express.static 快速托管静态资源的内置中间件；</li><li>  express.json 解析 JSON 格式的请求体数据；<a href="https://github.com/HelenZhangLP/demo/blob/master/node/src/demo9/index.js">demo for express.json</a></li><li>express.urlencoded 解析 URL-encoded 格式的请求数据;<a href="https://github.com/HelenZhangLP/demo/blob/master/node/src/demo10/index.js">demo for express.urlencoded</a><blockquote><p>其中 <code>express.json</code> 和 <code>express.urlencoded</code> 只能在 4.16.0+ 以后的版本中使用</p></blockquote></li></ul></li><li> 第三方中间件(Third-party middleware)</li></ol><h3 id="应用级别中间件-Application-level-middleware"><a href="#应用级别中间件-Application-level-middleware" class="headerlink" title="应用级别中间件(Application-level middleware)"></a>应用级别中间件(Application-level middleware)</h3><p>Bind application-level middleware to an instance of the app object by using the app.use() and app.METHOD functions, where METHOD is the HTTP method of the request that the middleware function handles (such as GET,PUT,POST) in lowercase.<br>通过使用 <code>app.use()</code>和<code>app.METHOD()</code> 函数绑定应用级别中间件到应用程序对象实例。其中，<code>METHOD</code> 是 中间件函数以小写形式处理的 <code>HTTP 请求 method</code>（如：GET,PUT,POST）</p><h4 id="不带挂载路径的中间件，每次-app-接受请求时执行"><a href="#不带挂载路径的中间件，每次-app-接受请求时执行" class="headerlink" title="不带挂载路径的中间件，每次 app 接受请求时执行"></a>不带挂载路径的中间件，每次 app 接受请求时执行</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 express </span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req, res, next</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;define application-level middleware&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="带有挂载路径的中间件函数，任何类型的-http-请求当前路径中间件都会被执行"><a href="#带有挂载路径的中间件函数，任何类型的-http-请求当前路径中间件都会被执行" class="headerlink" title="带有挂载路径的中间件函数，任何类型的 http 请求当前路径中间件都会被执行"></a>带有挂载路径的中间件函数，任何类型的 http 请求当前路径中间件都会被执行</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/user/:id&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>)&#123;</span><br><span class="line">    consolt.<span class="title function_">log</span>(<span class="string">&#x27;request type&#x27;</span>, req.<span class="property">method</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="带有中间件子堆栈的数组，处理-get-请求"><a href="#带有中间件子堆栈的数组，处理-get-请求" class="headerlink" title="带有中间件子堆栈的数组，处理 get 请求"></a>带有中间件子堆栈的数组，处理 get 请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">lg</span>(<span class="params">req, res, next</span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;lg&#x27;</span>);<span class="title function_">next</span>()&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">req, res, next</span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;log&#x27;</span>);<span class="title function_">next</span>()&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stuff = [lg, log]</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/:id&#x27;</span>, stuff, <span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;userInfo&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="错误级别中间件"><a href="#错误级别中间件" class="headerlink" title="错误级别中间件"></a>错误级别中间件</h3><blockquote><p>错误级别中间件的 function 中，<span class='custom-box custom-box-339'>必须包含4个形参，</span>分别是 err,req,res,next </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 导入 express 模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 2 创建 express 服务器实例</span></span><br><span class="line"><span class="keyword">const</span> server = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4 定义路由</span></span><br><span class="line">server.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 定义错误</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;服务器错误&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;响应请求&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5 中件间捕获整个项目中发生的异常错误，从而防止项目异常崩溃。</span></span><br><span class="line">server.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;错误：&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Error：&#x27;</span> + err.<span class="property">message</span> )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 调用 app.listen 方法，指定端口号启动 web 服务器</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8090</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Express server running at http://127.0.0.1:8090`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Express-内置中间件"><a href="#Express-内置中间件" class="headerlink" title="Express 内置中间件"></a>Express 内置中间件</h3><p>Express 4.16.0 版本开始，Express 内置了 3 个常用中间件</p><ul><li>  <code>express.static</code> 快速托管静态资源（html,css,图片等）的内置中间件；</li><li>  <code>express.json</code> 解析 JSON 格式的请求体数据（4.16.0+ 可用）;</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// post 请求，body 中带请求体</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/getUser&#x27;</span>,<span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// req.body 接收客户端传过来的数据</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>) <span class="comment">// undefined，默认情况下，没有配置解析表单数据中间件，req.body = undefined</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置解析 application/json 格式数据的内置中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line"><span class="comment">// post 请求，body 中带 json 格式请求数据</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/getUser&#x27;</span>,<span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>) <span class="comment">// &#123;id: &#x27;u12950&#x27;&#125;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>  <code>express.urlencoded</code> 解析 URL-encoded 格式的请求体数据（4.16.0+ 可用）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// post 请求，body 中带 x-www-form-urlencoded 格式数据</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/getUser&#x27;</span>,<span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// req.body 接收客户端传过来的数据</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>) <span class="comment">// &#123;&#125;，默认情况下，没有配置解析表单数据中间件，req.body = undefined</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析 application/x-www/form-urlencoded 格式数据中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br><span class="line"><span class="comment">// post 请求，body 中带 x-www-form-urlencoded 格式数据</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/getUser&#x27;</span>,<span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// req.body 接收客户端传过来的数据</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>) <span class="comment">// &#123;id: &#x27;u12950&#x27;&#125;，默认情况下，没有配置解析表单数据中间件，req.body = &#123;&#125;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这些中间件，极大的提高了 Express 项目的开发效率及体验。</p><h3 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h3><p>第三方中间件可按需下载配置，从而提高开发效率。</p><h4 id="第三方中间件-body-parser"><a href="#第三方中间件-body-parser" class="headerlink" title="第三方中间件 body-parser"></a>第三方中间件 body-parser</h4><p>body-parser 用于解析请求体数据，在 <a href="mailto:&#101;&#x78;&#x70;&#x72;&#101;&#x73;&#115;&#64;&#52;&#46;&#49;&#54;&#46;&#48;">&#101;&#x78;&#x70;&#x72;&#101;&#x73;&#115;&#64;&#52;&#46;&#49;&#54;&#46;&#48;</a> 之前经常使用</p><pre class="mermaid"> flowchart LR install[npm install body-parser] --> require[导入中间件 body-parser] require --> use["app.use() 注册使用中间件"]</pre><p><a href="https://github.com/HelenZhangLP/demo/blob/master/node/src/demo11/index.js">demo for body-parser</a></p><h3 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h3><p><span class='custom-box custom-box-939'>手动模拟 express.urlencoded 中间件，解析 POST 提交到服务器的表单数据</span></p><pre class="mermaid"> flowchart TB step1[定义中间件] --> step2[监听req的data事件] step3[监听req的end事件] -->|使用 qureystring | step4[模块解析请求体数据] step5[将解析的数据对象挂载到 req.body] --> step6[封装自定义对象为模块] step2 --> step3 step4 --> step5</pre><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bodyparse.js</span></span><br><span class="line"><span class="comment">// 自定义中间件</span></span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;qureystring&#x27;</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">middleware</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="comment">// 监听 req 对象的 data 事件，获取客户端发送到服务器的数据</span></span><br><span class="line">    <span class="comment">// 数据量大时，无法一次性发送完毕，客户端会进行数据切割，分批发送到服务器。req 的 data 事件可能会触发多次，需要每次触发 data 事件时，获取到的数据只是完整数据的一部分，需要手动拼接接收的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span> <span class="comment">// 存储客户端发送过来的请求体</span></span><br><span class="line">    <span class="comment">// 监听 req 的 data 事件，拼接客户端发送回来的数据</span></span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">        str += chunk</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听 req 的 end 事件；TODO：把字符串格式的请求体数据，解析成对象格式</span></span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> body = qs.<span class="title function_">parse</span>(str)</span><br><span class="line">        req.<span class="property">body</span> = body;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = middleware</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------- next page ----------</span></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> bodyparse = <span class="built_in">require</span>(<span class="string">&#x27;./bodyparse&#x27;</span>)</span><br><span class="line"><span class="comment">// 注册使用中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyparse)</span><br></pre></td></tr></table></figure><h3 id="中间件的处理流程"><a href="#中间件的处理流程" class="headerlink" title="中间件的处理流程"></a>中间件的处理流程</h3><p>当一个请求到达 Express 服务器之后，可以连续调用多个中间件，从而 <span class='custom-box custom-box-393'>对这次请求进行<u>预处理</u></span>。</p><pre class="mermaid"> flowchart LR client((客户端)) subgraph Express服务器  middleware1([中间件1]) -->|"next()"| middleware2([中间件2])  middleware2 -->|"next()"| middleware3([中间件3])  middleware3 -->|"next()"| middleware4([中间件...])  middleware4 -->|"next()"| ending[["<b>路由</b><br/>处理完毕，响应这次请求"]] end client -->|请求| middleware1 ending -->|响应| client</pre><h3 id="跨域（Cross-Origin-Resource-Sharing）中间件"><a href="#跨域（Cross-Origin-Resource-Sharing）中间件" class="headerlink" title="跨域（Cross-Origin Resource Sharing）中间件"></a>跨域（Cross-Origin Resource Sharing）中间件</h3><p><a href="/2019/02/22/%E8%B7%A8%E5%9F%9F/#%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB%EF%BC%88CORS%EF%BC%89%E5%BD%93%E5%89%8D%E4%B8%BB%E6%B5%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">更多关于跨域…</a></p><pre class="mermaid"> flowchart LR install[安装 npm install cors] --> require["require('cors')"] require --> registeration["app.use(cors())"]</pre><h3 id="在-Express-中使用-session-认证"><a href="#在-Express-中使用-session-认证" class="headerlink" title="在 Express 中使用 session 认证"></a>在 Express 中使用 session 认证</h3><h4 id="安装-express-session-中间件"><a href="#安装-express-session-中间件" class="headerlink" title="安装 express-session 中间件"></a>安装 express-session 中间件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install express-session</span><br></pre></td></tr></table></figure><h4 id="配置和使用-express-session-中间件"><a href="#配置和使用-express-session-中间件" class="headerlink" title="配置和使用 express-session 中间件"></a>配置和使用 express-session 中间件</h4><blockquote><p>express-session 中间件配置成功后，可通过 req.session 来访问和使用 session 对象。进而可以向 session 中存数据<br>req.session.destory() 函数 清空服务器保存的 session 信息</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入 session 中间件</span></span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>)</span><br><span class="line"><span class="comment">// 2. 配置 session 中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// secret 属性的值可以为任意字符串</span></span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">true</span></span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">// 3. 向 session 中存储数据</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 判断客户端是否提交正确的信息</span></span><br><span class="line">    <span class="keyword">const</span> &#123;userName, password&#125; = req.<span class="property">body</span></span><br><span class="line">    <span class="keyword">if</span>(userName !== <span class="string">&#x27;admin&#x27;</span> || password !== <span class="string">&#x27;123&#x27;</span>) <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123;<span class="attr">status</span>: <span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;用户名或密码错误！&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// session 存储数据</span></span><br><span class="line">    req.<span class="property">session</span>.<span class="property">user</span> = req.<span class="property">body</span> <span class="comment">// 将用户信息存储到 session</span></span><br><span class="line">    req.<span class="property">session</span>.<span class="property">isLogin</span> = <span class="literal">true</span> <span class="comment">// 将用户登录状态存储到 session</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回结果给客户端</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;<span class="attr">status</span>:<span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&#x27;登录成功&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 4. 获取 session 中存储的数据</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;api/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;user&#125; = req.<span class="property">session</span></span><br><span class="line">    <span class="keyword">if</span> (user) &#123;</span><br><span class="line">        res.<span class="title function_">send</span>(&#123;<span class="attr">status</span>: <span class="number">0</span>, user&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;<span class="attr">status</span>: <span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;没有该用户&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 5. req.session.destory() 函数，清空服务器信息</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/logout&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 清空服务器 session </span></span><br><span class="line">    req.<span class="property">session</span>.<span class="title function_">destory</span>()</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;退出登录&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Express-中使用-JWT-身份认证"><a href="#Express-中使用-JWT-身份认证" class="headerlink" title="Express 中使用 JWT 身份认证"></a>Express 中使用 JWT 身份认证</h3><h4 id="安装-JWT-包"><a href="#安装-JWT-包" class="headerlink" title="安装 JWT 包"></a>安装 JWT 包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install jsonwebtoken express-jwt</span><br></pre></td></tr></table></figure><ul><li>jsonwebtoken 用于生成 JWT 字符串</li><li>express-jwt 将 JWT 字符串解析还原成 JSON 对象</li></ul><h4 id="定义-secret-密钥"><a href="#定义-secret-密钥" class="headerlink" title="定义 secret 密钥"></a>定义 secret 密钥</h4><p>为了保证 JWT 字符串的安全性，防止 JWT 字符串在网络传输过程中被人破解，我们需要专门定义一个用于加密和解密的 secret 密钥。<br>生成 JWT 字符串时，需要使用 secret 密钥对用户信息进行加密，最终得到加密好的 JWT 字符串<br>当把 JWT 字符串解析还原成 JSON 对象时，需要使用 secret 密钥进行解密<br>secret 密钥本质是任意字符串</p><h4 id="生成-JWT-字符串"><a href="#生成-JWT-字符串" class="headerlink" title="生成 JWT 字符串"></a>生成 JWT 字符串</h4><p>调用 jsonwebtoken 包提供的 sign() 方法，将用户的信息加密成 JWT 字符串，响应给客户</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cont jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三个参数：用户信息，加密密钥，配置对象</span></span><br><span class="line"><span class="keyword">const</span> token = jwt.<span class="title function_">sign</span>(user, secretKey, &#123;<span class="attr">expiresIn</span>: <span class="string">&#x27;30s&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="JWT-还原为-JSON-对象"><a href="#JWT-还原为-JSON-对象" class="headerlink" title="JWT 还原为 JSON 对象"></a>JWT 还原为 JSON 对象</h4><p>客户端访问权限接口时，需要主动通过请求头中的 Authorization 字段将 Token 字符串发送到服务器进行身份认证。<br>服务器可以通过 express-jwt 中间件，自动将客户端发送的 Token 解析还原成 JSON 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.use() 注册中间件</span></span><br><span class="line"><span class="comment">// expressJWT() 解析 Token 中间件</span></span><br><span class="line"><span class="comment">// unless() 指定不需要鉴权的接口</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">expressJWT</span>(&#123;<span class="attr">secret</span>: secretKey&#125;).<span class="title function_">unless</span>(&#123;<span class="attr">path</span>: [<span class="regexp">/\^/</span>api\/\/]&#125;))</span><br></pre></td></tr></table></figure><h4 id="捕获解析-JWT-失败后产生的错误"><a href="#捕获解析-JWT-失败后产生的错误" class="headerlink" title="捕获解析 JWT 失败后产生的错误"></a>捕获解析 JWT 失败后产生的错误</h4><p>当使用 express-jwt 解析 token 字符串时，如果客户端发送过来的 Token 字符串不合法或过期，会产生解析失败的错误，影响项目正常运行，我们可以通过 Express 错误中间件，捕获并进行错误处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// token 解析失败</span></span><br><span class="line">    <span class="keyword">if</span> (err.<span class="property">name</span> === <span class="string">&#x27;UnauthorizedError&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123;<span class="attr">status</span>: <span class="number">401</span>, <span class="attr">message</span>: <span class="string">&#x27;未知错误&#x27;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其它原因导致错误</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;<span class="attr">status</span>: <span class="number">500</span>, <span class="attr">message</span>: <span class="string">&#x27;服务器错误&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> WebServer </tag>
            
            <tag> node </tag>
            
            <tag> Express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具 webstorm</title>
      <link href="/2021/05/29/%E5%B7%A5%E5%85%B7-webstorm/"/>
      <url>/2021/05/29/%E5%B7%A5%E5%85%B7-webstorm/</url>
      
        <content type="html"><![CDATA[<p>Runtime version: 11.0.10+9-b1341.41 x86_64</p><h2 id="show-current-file-in-sidebar"><a href="#show-current-file-in-sidebar" class="headerlink" title="show current file in sidebar"></a>show current file in sidebar</h2><blockquote><p>sidebar 右上角 <code>select opened file</code></p></blockquote><h2 id="选中多行相同的文本，类似于-sublime-中的-ctrl-D"><a href="#选中多行相同的文本，类似于-sublime-中的-ctrl-D" class="headerlink" title="选中多行相同的文本，类似于 sublime 中的 ctrl+D"></a>选中多行相同的文本，类似于 sublime 中的 ctrl+D</h2><blockquote><p>Add Selection for Next Occurrence(存在的事物) control+G</p></blockquote><h2 id="复制上一行"><a href="#复制上一行" class="headerlink" title="复制上一行"></a>复制上一行</h2><blockquote><p>Duplication Entire lines shift+L</p></blockquote><h2 id="编辑时自动换行"><a href="#编辑时自动换行" class="headerlink" title="编辑时自动换行"></a>编辑时自动换行</h2><blockquote><p>Preferences -&gt; Editor -&gt; General -&gt; soft wraps -&gt; check soft wraps options</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Refs</title>
      <link href="/2021/05/11/React-refs/"/>
      <url>/2021/05/11/React-refs/</url>
      
        <content type="html"><![CDATA[<h2 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h2><p>基于修改数据/状态，让视图更新，达到需要的效果</p><h2 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h2><p>基于 <code>ref</code> 获取 DOM 元素，操作 DOM 实现需求和效果</p><h3 id="非受控组件应用场景："><a href="#非受控组件应用场景：" class="headerlink" title="非受控组件应用场景："></a>非受控组件应用场景：</h3><ul><li>  管理焦点、文本选择、媒体播放</li><li>  触发强制动画</li><li>  集成第三方 DOM 库</li></ul><h3 id="基于-ref-可以实现的功能："><a href="#基于-ref-可以实现的功能：" class="headerlink" title="基于 ref 可以实现的功能："></a>基于 ref 可以实现的功能：</h3><ul><li>  赋值给标签，获取 DOM 元素；</li><li>  赋值给类子组件，获取子组件的属性、方法</li><li>  赋值给函数子组件，获取子组件的 DOM 元素【配合 React.forwardRef 进行转发】</li></ul><h2 id="类组件-ref-相关"><a href="#类组件-ref-相关" class="headerlink" title="类组件 ref 相关"></a>类组件 ref 相关</h2><h3 id="获取-DOM-——-lt-h2-ref-39-title-39-gt-Refs-非受控组件-lt-h2-gt"><a href="#获取-DOM-——-lt-h2-ref-39-title-39-gt-Refs-非受控组件-lt-h2-gt" class="headerlink" title="获取 DOM —— &lt;h2 ref=&#39;title&#39;&gt;Refs 非受控组件&lt;/h2&gt;"></a>获取 DOM —— <code>&lt;h2 ref=&#39;title&#39;&gt;Refs 非受控组件&lt;/h2&gt;</code></h3><p><span class='custom-box custom-box-933'>“refs”已弃用。ts(6385)</span><br><span class='custom-box custom-box-339'>React.StrictMode 下</span><font color='red'>react-dom.development.js:86 Warning: A string ref, “title”, has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead.</font><br><span class='custom-box custom-box-339'>原理：</span>react 私有属性 refs 新增属性 refs: {title: h2}</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">RefsDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">refs</span>.<span class="property">title</span>) <span class="comment">// &lt;h2&gt;Refs 非受控组件&lt;/h2&gt;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">refs</span>.<span class="property">title</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;#62ab00&#x27;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">ref</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span>Refs 非受控组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取-DOM-——-lt-h2-ref-x-gt-this-refFn-x-gt-Ref-赋值函数形式定义非受控组件-lt-h2-gt"><a href="#获取-DOM-——-lt-h2-ref-x-gt-this-refFn-x-gt-Ref-赋值函数形式定义非受控组件-lt-h2-gt" class="headerlink" title="获取 DOM —— &lt;h2 ref={x =&gt; this.refFn = x }&gt;Ref 赋值函数形式定义非受控组件&lt;/h2&gt;"></a>获取 DOM —— <code>&lt;h2 ref=&#123;x =&gt; this.refFn = x &#125;&gt;Ref 赋值函数形式定义非受控组件&lt;/h2&gt;</code></h3><p><span class='custom-box custom-box-339'>原理：</span>创建一个实例属性 refFn，DOM 元素直接挂载实例属性 refFn 上 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">RefsDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">refFn</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">refFn</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;#668999&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">ref</span>=<span class="string">&#123;x</span> =&gt;</span> this.refFn = x&#125;&gt;ref 设置为一个函数<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取-DOM-——-React-createRef"><a href="#获取-DOM-——-React-createRef" class="headerlink" title="获取 DOM —— React.createRef()"></a>获取 DOM —— <code>React.createRef()</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">RefsDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    cef = <span class="title class_">React</span>.<span class="title function_">createRef</span>() <span class="comment">// 创建 ref</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">cef</span>) <span class="comment">// cef : &#123;current: h2&#125;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cef</span>.<span class="property">current</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;#ff9923&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">ref</span>=<span class="string">&#123;this.cef&#125;</span>&gt;</span>React.createRef 创建非受控组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类子组件中使用-Ref-获取-DOM-并进行业务处理"><a href="#类子组件中使用-Ref-获取-DOM-并进行业务处理" class="headerlink" title="类子组件中使用 Ref 获取 DOM 并进行业务处理"></a>类子组件中使用 Ref 获取 DOM 并进行业务处理</h2><p>获取当前调用组件创建的实例，后面可以根据实例获取子组件中的相关信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">RefsDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">Child</span>) <span class="comment">// 获取到的是子组件 &lt;Child /&gt; 实例</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">Child</span>.<span class="property">div</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;#ac9000&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Child</span> <span class="attr">ref</span>=<span class="string">&#123;x</span> =&gt;</span> this.Child = x&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&#x27;Child 子组件&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;x</span> =&gt;</span> this.div = x&#125;&gt;&#123;this.state.content&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取函数子组件的-DOM-并进行业务处理"><a href="#获取函数子组件的-DOM-并进行业务处理" class="headerlink" title="获取函数子组件的 DOM 并进行业务处理"></a>获取函数子组件的 DOM 并进行业务处理</h2><p><font color='red'>Warning: Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?</font><br><span class='custom-box custom-box-393'>解决：</span>需要配合<code>React.forwardRef</code>，用于获取函数组件内的某个元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">RefsDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ChildFn</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;#a33&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>函数组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ChildFn</span> <span class="attr">ref</span>=<span class="string">&#123;x</span> =&gt;</span> this.ChildFn = x&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ChildFn</span> = <span class="title class_">React</span>.<span class="title function_">forwardRef</span>(<span class="keyword">function</span> <span class="title function_">ChildFn</span>(<span class="params">props, ref</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span>函数组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="函数组件中使用-ref"><a href="#函数组件中使用-ref" class="headerlink" title="函数组件中使用 ref"></a>函数组件中使用 ref</h2><ul><li>1 <code>ref=&#123;x =&gt; dom = x&#125;</code> 方式，将 DOM 元素赋值给 dom 变量</li><li>2 通过 【dom = React.createRef() 创建 ref 对象 &amp;&amp; dom.current 获取 dom &amp;&amp; ref = {dom} 绑定jsx dom 元素】 创建 ref 对象获取 DOM</li><li>3 useRef hooks 创建 ref 对象 &amp;&amp; dom.current 获取 dom &amp;&amp; ref = {dom} 绑定jsx dom 元素<br><a href="">具体代码实现见</a></li></ul><p><span class='custom-box custom-box-933'>对比 React.createRef 与 useRef 在函数组件中的使用，React.createRef 更新时创建新的 ref 对象，浪费性能。useRef 则不会。<a href="">具体代码实现见</a></span></p><h2 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h2><h3 id="子组件为类组件"><a href="#子组件为类组件" class="headerlink" title="子组件为类组件"></a>子组件为类组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>It&#x27;s Child Component<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> component = <span class="title function_">useRef</span>(<span class="literal">null</span>)</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(component.<span class="property">current</span>) <span class="comment">// 打印子组件实例</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Child</span> <span class="attr">ref</span>=<span class="string">&#123;component&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子组件为函数组件"><a href="#子组件为函数组件" class="headerlink" title="子组件为函数组件"></a>子组件为函数组件</h3><p><span class='custom-box custom-box-933'>子组件为函数组件，函数组件用 React.forwardRef 进行转发</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ChildFn</span> =  <span class="title class_">React</span>.<span class="title function_">forwardRef</span>(<span class="keyword">function</span> <span class="title function_">ChildFn</span> (props, ref) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span>It&#x27;s function component<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">DemoFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> component = <span class="title function_">useRef</span>(<span class="literal">null</span>)</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(component.<span class="property">current</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ChildFn</span> <span class="attr">ref</span>=<span class="string">&#123;component&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useImperativeHandle-钩子，实现父组件调用子组件属性和方法"><a href="#useImperativeHandle-钩子，实现父组件调用子组件属性和方法" class="headerlink" title="useImperativeHandle 钩子，实现父组件调用子组件属性和方法"></a>useImperativeHandle 钩子，实现父组件调用子组件属性和方法</h3><blockquote></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * refparams 父组件传过来的 ref</span></span><br><span class="line"><span class="comment"> * createHandle 要传给父组件的属性和方法对象</span></span><br><span class="line"><span class="comment"> * [deps] 依赖项，依赖项的值发生变化，返回最新的属性和方法传给父组件；如果没有依赖项，只要子组件 render，都会将属性和方法返回给父组件。</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="title function_">useImperativeHandle</span>(refparams, createHandle, [deps])</span><br></pre></td></tr></table></figure><p>具体实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ChildFn</span> =  <span class="title class_">React</span>.<span class="title function_">forwardRef</span>(<span class="keyword">function</span> <span class="title function_">ChildFn</span> (props, ref) &#123;</span><br><span class="line">    <span class="keyword">let</span> [state, setState] = <span class="title function_">useState</span>(<span class="string">&#x27;函数组件中使用状态&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回子组件方法给父组件</span></span><br><span class="line">    <span class="title function_">useImperativeHandle</span>(ref, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            state,</span><br><span class="line">            setState</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span>It&#x27;s function component<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">DemoFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> component = <span class="title function_">useRef</span>(<span class="literal">null</span>)</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(component.<span class="property">current</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ChildFn</span> <span class="attr">ref</span>=<span class="string">&#123;component&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React.Component &amp;&amp; React.PureComponent</title>
      <link href="/2021/05/11/React-Component-pureComponent/"/>
      <url>/2021/05/11/React-Component-pureComponent/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Object.keys(obj) 与 Reflect.ownKeys(obj) 获取 对象 keys</p></blockquote><h2 id="浅比较"><a href="#浅比较" class="headerlink" title="浅比较"></a>浅比较</h2><blockquote><p>只比较对象的第一级，第一级以下，深层不进行比较</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; obj </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">Boolean</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isObj</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj !== <span class="literal">null</span> &amp;&amp; <span class="regexp">/^object|function$/</span>.<span class="title function_">test</span>(<span class="keyword">typeof</span> obj)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre class="mermaid"> flowchart LR start((开始)) --> step1{"isObj比较"} step1 -->|是| step2{"===比较"} step2 -->|是| step3{"keys.length比较"} step3 -->|是| step4{"是否存在相同的key\n值是否相等"} step4 -->|是| res1[浅比较相同] step4 -->|否| res[不是同一对象] step3 -->|否| res step2 -->|否| res step1 -->|否| res</pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 浅比较函数</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; obj1 </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; obj2 </span></span><br><span class="line"><span class="comment">* <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">shallowEqual</span>(<span class="params">obj1, obj2</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. obj1,obj2 是否都是对象类型</span></span><br><span class="line">  <span class="keyword">if</span>(!<span class="title function_">isObj</span>(obj1) || !<span class="title function_">isObj</span>(obj2)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">// 2. obj1 是否等于 obj2</span></span><br><span class="line">  <span class="keyword">if</span>(obj1 === obj2) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">// 3. keys.length 是否一致</span></span><br><span class="line">  <span class="keyword">let</span> obj1Keys = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj1),</span><br><span class="line">      obj2Keys = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj2)</span><br><span class="line">  <span class="keyword">if</span>(obj1Keys.<span class="property">length</span> !== obj2Keys.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;obj1Keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> element = obj1Keys[i]</span><br><span class="line">    <span class="comment">// obj2.hasOwnProperty(element) 对象自身属性中是否具体指定的属性 element</span></span><br><span class="line">    <span class="comment">// Object.is(obj1[element], obj2[element]) 元素值是否相同</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(element, !obj2.<span class="title function_">hasOwnProperty</span>(element) , !<span class="title class_">Object</span>.<span class="title function_">is</span>(obj1[element], obj2[element]))</span><br><span class="line">    <span class="keyword">if</span>(!obj2.<span class="title function_">hasOwnProperty</span>(element) || !<span class="title class_">Object</span>.<span class="title function_">is</span>(obj1[element], obj2[element])) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// obj1 与 ojb2 比较</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通类型——属性相同，值不同</span></span><br><span class="line"><span class="comment"> * 引用类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> obj1, obj2</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj1 = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">  <span class="attr">obj</span>: obj,</span><br><span class="line">  <span class="comment">// arr: [1,2]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">obj</span>, <span class="string">&#x27;obj1&#x27;</span>) <span class="comment">// &#123;a: &#x27;a&#x27;&#125; &#x27;obj1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = obj</span><br><span class="line">obj2 = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">  <span class="attr">obj</span>: o</span><br><span class="line">  <span class="comment">// arr: [1,2]</span></span><br><span class="line">&#125;</span><br><span class="line">obj2.<span class="property">obj</span>.<span class="property">ccc</span> = <span class="number">111</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">obj</span>, <span class="string">&#x27;obj2&#x27;</span>) <span class="comment">// &#123;a: &#x27;a&#x27;, ccc: 111&#125; &#x27;obj2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">shallowEqual</span>(obj1, obj2)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>obj2.obj 与 obj1.obj 具有相同的 key，值都是对象类型，虽然引用地址不同，但因为只作了第一级只比较，所以浅比较认为他们是相同的对象。</p></blockquote><h2 id="React-Component-与-React-PureComponent-的区别"><a href="#React-Component-与-React-PureComponent-的区别" class="headerlink" title="React.Component 与 React.PureComponent 的区别"></a>React.Component 与 React.PureComponent 的区别</h2><blockquote><p>PureComponent 会给类组件默认加一个 shouldComponentUpdate 周期函数，在该生命周期中，会对新老属性、状态做浅比较，比较结果返回 false，视图不会更新。<br><a href="https://github.com/HelenZhangLP/react-18/blob/master/src/Component/pureComponent.jsx">如 Demo</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">addBox = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;boxs&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    boxs.<span class="title function_">push</span>(<span class="number">4</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        boxs</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-933'>通过 setState ，boxs 会被认为是相同的引用地址。shouldComponentUpdate，同一个 boxs 引用地址不变，shouldComponentUpdate 返回 false 不能实现视图更新</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addBox = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">boxs</span>.<span class="title function_">push</span>(<span class="number">4</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">forceUpdate</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-393'>采用 this.forceUpdate 跳过 shouldComponentUpdate 检验，实现视图更新</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">addBtn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;boxs&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    boxs.<span class="title function_">push</span>(<span class="number">4</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">boxs</span>: [...boxs]&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-393'><code>this.setState(&#123;boxs: [...boxs]&#125;)</code> 通过解构，定义一个同样值的新数组，作为对象属性 boxs 的值，数组虽然值相同，但引用地址不同。shouldComponentUpdate 校验返回 true，实现了视图更新</span></p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Npm Error</title>
      <link href="/2021/03/30/%E5%9D%91-Npm-Error/"/>
      <url>/2021/03/30/%E5%9D%91-Npm-Error/</url>
      
        <content type="html"><![CDATA[<h2 id="npm-ERR-code-ECONNREFUSED"><a href="#npm-ERR-code-ECONNREFUSED" class="headerlink" title="npm ERR! code ECONNREFUSED"></a>npm ERR! code ECONNREFUSED</h2><blockquote><p>npm ERR! FetchError: request to <a href="https://registry.npmjs.org/npm">https://registry.npmjs.org/npm</a> failed, reason: connect ECONNREFUSED 127.0.0.1:1034</p></blockquote><p><font color='red'><strong>代理引起的</strong></font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm config get proxy</span><br><span class="line">http://127.0.0.1:1034/</span><br><span class="line">$ npm config set proxy null</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Handwriting Webpack</title>
      <link href="/2021/03/29/Webpack-handwriting/"/>
      <url>/2021/03/29/Webpack-handwriting/</url>
      
        <content type="html"><![CDATA[<h2 id="认识-webpack"><a href="#认识-webpack" class="headerlink" title="认识 webpack"></a>认识 webpack</h2><blockquote><p><code>Webpack 是一个**模块打包器**</code>。<br><u>能够根据模块的依赖关系递归地构建一个依赖关系图（Dephendency Graph）</u>，<br>    当中包含了应用程序的所有模块，最后打包成一个或多个bundle</p></blockquote><h2 id="webpack-功能"><a href="#webpack-功能" class="headerlink" title="webpack 功能"></a>webpack 功能</h2><p>  Webpack 打包出的静态资源在 HTML 中引用。 </p><ul><li>Webpack 能将 CSS 和图片等打包到同一个包；</li><li>Webpack 打包前还能对文件进行预编译；</li><li>Webpack 可以配置多个入口，将包拆分;</li><li>Webpack 还能进行热替换。</li></ul><h2 id="手写-Webpack——实现代码见-git-hub"><a href="#手写-Webpack——实现代码见-git-hub" class="headerlink" title="手写 Webpack——实现代码见 git hub"></a><a href="https://github.com/HelenZhangLP/Handwriting-webpack">手写 Webpack——实现代码见 git hub</a></h2><h3 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h3><p>使用 CommonJS 编写代码，组件化编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── README.md</span><br><span class="line">└── src</span><br><span class="line">    ├── add.js</span><br><span class="line">    ├── index.html</span><br><span class="line">    └── index.js</span><br></pre></td></tr></table></figure><pre class="mermaid">graph TD    A[index.html] -->|script src...| B(index.js);    B -->|require| C[add.js];    C -->|export| B</pre><h3 id="模拟-export-模块导出"><a href="#模拟-export-模块导出" class="headerlink" title="模拟 export 模块导出"></a>模拟 export 模块导出</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add.js</span></span><br><span class="line"><span class="keyword">export</span>.<span class="property">default</span> = <span class="keyword">function</span>(<span class="params">argument1, argument2</span>) &#123;<span class="keyword">return</span> argument1 + argument2&#125;</span><br></pre></td></tr></table></figure><h3 id="模拟-require-导入模块"><a href="#模拟-require-导入模块" class="headerlink" title="模拟 require 导入模块"></a>模拟 require 导入模块</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">&#x27;add.js&#x27;</span>).<span class="property">default</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="实现思路解析"><a href="#实现思路解析" class="headerlink" title="实现思路解析"></a>实现思路解析</h2><ol><li> index.js 中需要拿到 add.js 代码得到 add function</li><li> require 需要返回 add function 或 export 对象，如下伪代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// require 方法实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">require</span>(<span class="params">file</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> add</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>2-1.  require 通过参数 file 文件名，读取 add.js 的文件信息。方法如下：(以下代码有点矛盾，伪代码，只为方便理解)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">require</span>(<span class="params">file</span>) &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * content 为字符串</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> content = fs.<span class="title function_">readFile</span>(file, <span class="string">&#x27;utf-8&#x27;</span>) </span><br><span class="line">    <span class="keyword">return</span> add || <span class="keyword">export</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">reqiure</span>(<span class="string">&#x27;add.js&#x27;</span>)</span><br></pre></td></tr></table></figure>2-2.  eval 运行解析字符串，并且用自运行函数触发 eval 在 require 执行时被调用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">require</span>(<span class="params">file</span>) &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * content 为字符串</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> content = fs.<span class="title function_">readFile</span>(file, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> <span class="built_in">exports</span> = &#123;&#125;   <span class="comment">// add.js 中 add function 为 export 中的一个属性，所以这里需要定义 export     </span></span><br><span class="line">  (<span class="keyword">function</span>(<span class="params"><span class="built_in">exports</span>, content</span>)&#123;</span><br><span class="line">    <span class="built_in">eval</span>(content)</span><br><span class="line">  &#125;)(<span class="built_in">exports</span>, content)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">exports</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">reqiure</span>(<span class="string">&#x27;add.js&#x27;</span>)</span><br></pre></td></tr></table></figure>可以运行以下代码测试：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">require</span>(<span class="params">file</span>) &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * content 为字符串</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> content = <span class="string">&quot;export.default = function(argument1, argument2) &#123;return argument1 + argument2&#125;&quot;</span></span><br><span class="line">  <span class="comment">// add.js 中 add function 为 export 中的一个属性，所以这里需要定义 export  </span></span><br><span class="line">  <span class="keyword">let</span> <span class="built_in">exports</span> = &#123;&#125;   </span><br><span class="line">  (<span class="keyword">function</span>(<span class="params"><span class="built_in">exports</span>, content</span>)&#123;</span><br><span class="line">    <span class="built_in">eval</span>(content)</span><br><span class="line">  &#125;)(<span class="built_in">exports</span>, content)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">exports</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">&#x27;add.js&#x27;</span>)</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="扩展-——-递归解决嵌套-require"><a href="#扩展-——-递归解决嵌套-require" class="headerlink" title="扩展 —— 递归解决嵌套 require"></a>扩展 —— 递归解决嵌套 require</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">list</span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">require</span>(<span class="params">file</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">exports</span> = &#123;&#125;;</span><br><span class="line">        (<span class="keyword">function</span>(<span class="params"><span class="built_in">exports</span>, code</span>) &#123;</span><br><span class="line">            <span class="built_in">eval</span>(code)</span><br><span class="line">        &#125;)(<span class="built_in">exports</span>, list[file])</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">exports</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;index.js&#x27;</span>)</span><br><span class="line">&#125;)(&#123;</span><br><span class="line">    <span class="string">&#x27;index.js&#x27;</span>: <span class="string">`var add = require(&#x27;add.js&#x27;).default; console.log(add(2,3))`</span>,</span><br><span class="line">    <span class="string">&#x27;add.js&#x27;</span>: <span class="string">`exports.default = function(a,b)&#123;return a+b&#125;`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="ES6-modules-改造-CommonJs-实现"><a href="#ES6-modules-改造-CommonJs-实现" class="headerlink" title="ES6 modules 改造 CommonJs 实现"></a>ES6 modules 改造 CommonJs 实现</h2><h3 id="代码改造"><a href="#代码改造" class="headerlink" title="代码改造"></a>代码改造</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (a,b) =&gt; a + b</span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> add <span class="keyword">from</span> <span class="string">&#x27;add.js&#x27;</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p><code> npm i @babel/core @babel/preset-env @babel/parser @babel/traverse -D</code></p><ul><li>@babel/core 是调用 babel 的 API 进行转码的包</li><li>@babel/preset-env 一个新的 preset，根据配置目标运行环境启用需要的 babel 插件</li><li>babel/parser 解析代码中生成的 AST(Abstract Syntax Tree, AST) 抽象语法树</li><li>@babel/traverse 遍历抽象语法树节点 AST</li></ul><p><strong>以下两个暂不需要安装</strong></p><ul><li>babel-preset-react 用于转义 react 的 JSX 语法</li><li>babel-loader 执行转义的核心包</li></ul><h3 id="实现思路具体代码见-github"><a href="#实现思路具体代码见-github" class="headerlink" title="实现思路具体代码见 github"></a>实现思路<a href="https://github.com/HelenZhangLP/Handwriting-webpack/blob/main/webpack.js">具体代码见 github</a></h3><img  src=http://www.plantuml.com/plantuml/svg/NL2zJiCm4Dxz54UHsWHHj-hGeGD3a9100eQEYC6DBwc9OqVsML0XtXt7eI4m-RvVd-qRPJhXH0i7KJQriy78MwkjWylrUityA7iIXF39e9yS_NZ45ZSRZ2IEiUr6768IeFXNABGgiT2XjnVMING3hrLzfCH_iQEI2DXsT0A9ldIg8sKD6owVLS6KFOP3BDKu0-6XCaK2ZBrSlS9oUGCrqgELGUEzgIpxWv8Ut-Dnu3oRWgIEVUTX1m_xvoVkoIbJg-gKJIDPfJJc-SJia88pdFEHIxKsK1U83KTYuhfdk8EBodFyK9xy_cJARC5NCe8SvdE8Ijj8vQR28l-DHltTASAxkCdKine-YR_vnJMKrX0Qohy1><blockquote><p>node webpack.js<br>验证当前文件生成的 bundle.js<br>index.html 引入 <code>&lt;script src=&quot;./bundle.js&quot;&gt;&lt;/script&gt;</code><br>验证输出结果</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 打包工具 </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TS-属性修饰符</title>
      <link href="/2021/03/14/TS-%E5%B1%9E%E6%80%A7%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
      <url>/2021/03/14/TS-%E5%B1%9E%E6%80%A7%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">    (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属性封装修饰符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@public</span> 属性默认修饰符，默认值，类实例，子类，子类实例无限制访问 public 属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@private</span> 对象实例不能访问、修改对象属性，子类及子类实例都不能访问私有属性，但可以通过@访问器属性 访问</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@protected</span> 类实例无法访问受保护属性，子类可以访问受保护属性, 但子类实例不可以，子类实例可以通过 @访问器属性 访问受保护属性</span></span><br><span class="line"><span class="comment">     *  @访问器属性 解决了私有属性不能访问和修改私有属性的问题</span></span><br><span class="line"><span class="comment">     *  @访问器属性 可以在修改值时，可以添加非法值验证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Property</span> &#123;</span><br><span class="line">        private <span class="attr">_age</span>: number;</span><br><span class="line">        public <span class="attr">_public</span>: string = <span class="string">&#x27;public&#x27;</span> <span class="comment">// 默认公有属性</span></span><br><span class="line">        protected <span class="attr">_protect</span>: string = <span class="string">&#x27;protect&#x27;</span> <span class="comment">// 受保护的属性</span></span><br><span class="line"></span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">age: number</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_age</span> = age</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// getAge() &#123;</span></span><br><span class="line">        <span class="comment">//     return this.age</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// setAge(n: number) &#123;</span></span><br><span class="line">        <span class="comment">//     // 添加非法验证</span></span><br><span class="line">        <span class="comment">//     if (!n) return</span></span><br><span class="line">        <span class="comment">//     this.age = n</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 访问器属性 getter</span></span><br><span class="line">        <span class="comment">// 访问器仅在面向 ECMAScript 5 和更高版本时可用。ts(1056)</span></span><br><span class="line">        <span class="comment">// Error: Accessors are only available when targeting ECMAScript 5 and higher.</span></span><br><span class="line">        <span class="keyword">get</span> <span class="title function_">age</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_age</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 访问器属性 setter</span></span><br><span class="line">        <span class="keyword">set</span> <span class="title function_">age</span>(<span class="params">n: number</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!n) <span class="keyword">return</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_age</span> = n</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> pete = <span class="keyword">new</span> <span class="title class_">Property</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">// 修改属性值</span></span><br><span class="line">    <span class="comment">// console.log(pete, pete.name, pete.age) // 对象实例不能访问私有属性</span></span><br><span class="line">    <span class="comment">// pete.name = &#x27;fly guy&#x27; // Property &#x27;name&#x27; is private and only accessible within class &#x27;Property&#x27;</span></span><br><span class="line">    <span class="comment">// pete.setAge(3)</span></span><br><span class="line">    <span class="comment">// console.log(pete, pete.getAge())</span></span><br><span class="line">    pete.<span class="property">age</span> = <span class="number">10</span> <span class="comment">// 访问器属性可以直接通过赋值的方式修改属性值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Encapsulate</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Property</span> &#123;</span><br><span class="line">        <span class="title function_">get_public</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_public</span> <span class="comment">// 子类访问父类 public 属性</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">get</span> <span class="title function_">protected</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_protect</span> <span class="comment">// 子类访问父类 protected 属性</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get pravite() &#123;</span></span><br><span class="line">        <span class="comment">//     return this._age // 子类访问父类不能访问 pravite 属性</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> encapsulate = <span class="keyword">new</span> <span class="title class_">Encapsulate</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(encapsulate.<span class="property">_public</span>, <span class="string">&#x27;子类实例访问父类公共属性&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(encapsulate.<span class="property">age</span>, <span class="string">&#x27;子类实例可以访问父类私有属性&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(encapsulate.<span class="property">protected</span>)</span><br><span class="line">    <span class="comment">// console.log(encapsulate._protect, &#x27;子类实例可以访问父类受保护属性&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明类时，构造函数直接声明入参，无需再次赋值</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Sample</span> &#123;</span><br><span class="line">        <span class="comment">// 注意：入参必须注明属性修饰符</span></span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">public t: string</span>) &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Sample</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">t</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React State</title>
      <link href="/2021/03/09/React-state/"/>
      <url>/2021/03/09/React-state/</url>
      
        <content type="html"><![CDATA[<ul><li>React 是单向数据流，自顶向下数据流，由父节点向子节点由上到下传递，通过更新 React 组件状态，实现重新渲染用户界面操作。</li><li>React 组件可以看成一个*** 状态机 ***（组件通过与用户交互，实现不同的状态，然后通过渲染 UI 保证用户界面和数据的一致性）。</li><li>React 通过 setState() 方法来更新状态（state）</li></ul><h2 id="state-初始化"><a href="#state-初始化" class="headerlink" title="state 初始化"></a>state 初始化</h2><h3 id="state-设计的几点原则；"><a href="#state-设计的几点原则；" class="headerlink" title="state 设计的几点原则；"></a>state 设计的几点原则；</h3><ul><li>state 代表一个组件 UI 呈现的完整的最小状态集，是渲染组件时所用到的数据的来源</li><li>用作组件 UI 展现形式的判断依据，反应组件的 UI 变化<font color="red">没有任何中间状态，也不存在通过其他状态计算来的中间状态</font><!-- * 组件的整个生命周期中保持不变，若是，则不是一个状态 --><h3 id="React16"><a href="#React16" class="headerlink" title="React16"></a>React16</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">pop</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="comment">// construct 用于初始化组件的 state及绑定事件</span></span><br><span class="line">  <span class="title function_">construct</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="comment">// 调用父类的 construct 方法，即调用 react.Component 的构造方法。用于完成 reasct 组件的初始化工作，保证 props 传入组件</span></span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">isShow</span>: <span class="literal">false</span>, <span class="comment">// 展现形式的判断依据</span></span><br><span class="line">      <span class="attr">pop</span>: <span class="string">&#x27;弹层&#x27;</span>, <span class="comment">// 渲染时所用到的数据</span></span><br><span class="line">      <span class="attr">purchaseList</span>: [],</span><br><span class="line">      <span class="attr">totalCost</span>: <span class="number">0</span> <span class="comment">// 根据 purchaseList 中 的 price 计算得来的，属性于中间多余属性。</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;isShow, pop&#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      isShow ? <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;pop&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> : <span class="literal">null</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="React18"><a href="#React18" class="headerlink" title="React18"></a>React18</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">z</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span>...<span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * partialState 支持部分状态，this.setState(&#123;x: 1&#125;) 支持仅修改多个属性中的某几个，不影响其它属性状态</span></span><br><span class="line"><span class="comment"> * callback componentDidUpdate 之后执行，componentDidUpdate 在任何状态更改后触发，回调函数，可以在指定状态更新后处理</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(partialState, [callback])</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Component</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setState</span> = <span class="keyword">function</span> (<span class="params">partialState, callback</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure><h3 id="setState-回调函数-callback-的执行机制"><a href="#setState-回调函数-callback-的执行机制" class="headerlink" title="setState 回调函数 callback 的执行机制"></a>setState 回调函数 callback 的执行机制</h3><p><span class='custom-box custom-box-393'>无论 shouldComponentUpdate 返回 <code>true</code> 还是 <code>false</code>，callback 都会执行</span></p><pre class="mermaid">  flowchart TB  start((开始))  callback["this.setState({},<b>callback</b>)"]  start --> callback  callback --> shouldComponentUpdate{shouldComponentUpdate}  shouldComponentUpdate -->|yes| componentWillUpdate[componentWillUpdate]  componentWillUpdate --> render[render]  shouldComponentUpdate -->|no 返回执行callback| callback  callback --> render  render --> componentDidUpdate[componentDidUpdate]</pre><h3 id="setState-执行是异步还是同步"><a href="#setState-执行是异步还是同步" class="headerlink" title="setState 执行是异步还是同步"></a>setState 执行是异步还是同步</h3><p>使用 React 内置的 setState() 修改 state，<span class='custom-box custom-box-393'>每当使用 setState() 时，React 会将需要更新的 state 合并后放入状态队列，触发调和过程（Reconciliation）</span>，再根据新的状态结构重新渲染 UI 界面，<span class='custom-box custom-box-933'>React 会根据差异对界面进行最小化重新渲染</span></p><h4 id="React18-中"><a href="#React18-中" class="headerlink" title="React18 中"></a>React18 中</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">z</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    btnEvent = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;x,y,z&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">x</span>: ++x&#125;)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;state x&#x27;</span>, x) <span class="comment">// setState --&gt; render1 异步</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">y</span>: ++y&#125;)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;state y&#x27;</span>, y) <span class="comment">// setState --&gt; render1 异步</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">z</span>: ++z&#125;) </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;state z&#x27;</span>, z) <span class="comment">// setState --&gt; render2 异步</span></span><br><span class="line">        &#125;);  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;x,y,z&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Render:&#x27;</span>, x, y, z)</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>x:&#123;x&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>y:&#123;y&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>z:&#123;z&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.btnEvent&#125;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>React18 中，setState 执行是 <span class='custom-box custom-box-933'>异步操作</span><br>React18 的更新队列处理机制，基于异步操作，<span class='custom-box custom-box-393'>最终实现批处理</span>从而减少更新次数，降低性能消耗。</p></blockquote><pre class="mermaid">flowchart TBsubgraph "setState"sentences1["this.setState({x: ++x})"]sentences2["this.setState({y: ++y})"]sentences3["this.setState({z: ++z})"]endsubgraph "任务队列Reconciliation"  task1[修改x]  task2[修改y]  task3[修改z]endsentences1 -->|添加任务到队列|task1sentences2 -->|添加任务到队列|task2sentences3 -->|添加任务到队列|task3render[render]任务队列Reconciliation -->|批处理| render</pre><h4 id="React16-中"><a href="#React16-中" class="headerlink" title="React16 中"></a>React16 中</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">      <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">z</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  btnEvent = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123;x,y,z&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">x</span>: ++x&#125;)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setState x:&#x27;</span>, x) <span class="comment">// setState --&gt; render1 异步</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">y</span>: ++y&#125;)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setState y:&#x27;</span>, y) <span class="comment">// setState --&gt; render1 异步</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">z</span>: ++z&#125;)   </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setState z:&#x27;</span>, z) <span class="comment">// render2 --&gt; setState 同步</span></span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;x,y,z&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Render:&#x27;</span>, x, y, z)</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>x:&#123;x&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>y:&#123;y&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>z:&#123;z&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.btnEvent&#125;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>React16 对于异步操作（如：定时器，通过 addEventListener 手动绑定 Dom 事件） setState 的处理方式与 React18 不同，它会变成同步</p></blockquote><pre class="mermaid">flowchart TBsubgraph "setState"sentences1["this.setState({x: ++x})"]sentences2["this.setState({y: ++y})"]sentences3["setTimeout(() => {        this.setState({z: ++z})           console.log('setState z:', z) // render2 --> setState 同步      });"]endsubgraph "任务队列Reconciliation"  task1[修改x]  task2[修改y]endsentences1 -->|添加任务到队列|task1sentences2 -->|添加任务到队列|task2render[render]任务队列Reconciliation -->|批处理| rendersentences3 -->|同步|render</pre><h2 id="flushSync-强制刷新执行渲染"><a href="#flushSync-强制刷新执行渲染" class="headerlink" title="flushSync 强制刷新执行渲染"></a>flushSync 强制刷新执行渲染</h2><h3 id="依赖当前的-state-计算下一个-state"><a href="#依赖当前的-state-计算下一个-state" class="headerlink" title="依赖当前的 state 计算下一个 state"></a>依赖当前的 state 计算下一个 state</h3><blockquote><p>采用 <code>flushSync</code> 强制刷新执行渲染</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;flushSync&#125; <span class="keyword">from</span> <span class="string">&#x27;React-dom&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    state = &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>, <span class="attr">z</span>: <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">    btnEvent = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;x,y,z&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="title function_">flushSync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">x</span>: ++x&#125;)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;state x&#x27;</span>, x)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">y</span>: ++y&#125;)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;state y&#x27;</span>, y)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">z</span>: x + y&#125;) </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;state z&#x27;</span>, z)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;x,y,z&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Render:&#x27;</span>, x, y, z)</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>x:&#123;x&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>y:&#123;y&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>z:&#123;z&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.btnEvent&#125;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-939'>代码执行顺序</span></p><pre class="mermaid">flowchart TB step1["this.setState({x: ++x});"] -->|"state x 1"| updater step2["this.setState({y: ++y})"] -->|"state y 1"| updater updater -->|flushSync| render render --> step3["this.setState({z: x + y}) "] step3 --> render render -->|"state z 4"| e((end))style step1 fill:orange,stroke: orangestyle step2 fill:orange,stroke:orangestyle step3 fill:orange,stroke:orangestyle render fill:#f9f, stroke: #f9f</pre><h3 id="点击一次-btn，页面渲染-20-次"><a href="#点击一次-btn，页面渲染-20-次" class="headerlink" title="点击一次 btn，页面渲染 20 次"></a>点击一次 btn，页面渲染 20 次</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">z</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    btnEvent = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;x, y, z&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="title function_">flushSync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">                    <span class="attr">x</span>: ++x,</span><br><span class="line">                    <span class="attr">y</span>: ++y,</span><br><span class="line">                    <span class="attr">z</span>: ++z</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;x,y,z&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Render:&#x27;</span>, x, y, z)</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>x:&#123;x&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>y:&#123;y&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>z:&#123;z&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.btnEvent&#125;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *index.jsx:33 Render: 1 1 1</span></span><br><span class="line"><span class="comment">  index.jsx:33 Render: 2 2 2</span></span><br><span class="line"><span class="comment">  index.jsx:33 Render: 3 3 3</span></span><br><span class="line"><span class="comment">  index.jsx:33 Render: 4 4 4</span></span><br><span class="line"><span class="comment">  index.jsx:33 Render: 5 5 5</span></span><br><span class="line"><span class="comment">  index.jsx:33 Render: 6 6 6</span></span><br><span class="line"><span class="comment">  index.jsx:33 Render: 7 7 7</span></span><br><span class="line"><span class="comment">  index.jsx:33 Render: 8 8 8</span></span><br><span class="line"><span class="comment">  index.jsx:33 Render: 9 9 9</span></span><br><span class="line"><span class="comment">  index.jsx:33 Render: 10 10 10</span></span><br><span class="line"><span class="comment">  index.jsx:33 Render: 11 11 11</span></span><br><span class="line"><span class="comment">  index.jsx:33 Render: 12 12 12</span></span><br><span class="line"><span class="comment">  index.jsx:33 Render: 13 13 13</span></span><br><span class="line"><span class="comment">  index.jsx:33 Render: 14 14 14</span></span><br><span class="line"><span class="comment">  index.jsx:33 Render: 15 15 15</span></span><br><span class="line"><span class="comment">  index.jsx:33 Render: 16 16 16</span></span><br><span class="line"><span class="comment">  index.jsx:33 Render: 17 17 17</span></span><br><span class="line"><span class="comment">  index.jsx:33 Render: 18 18 18</span></span><br><span class="line"><span class="comment">  index.jsx:33 Render: 19 19 19</span></span><br><span class="line"><span class="comment">  index.jsx:33 Render: 20 20 20</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><h3 id="更新一次，渲染结果-20"><a href="#更新一次，渲染结果-20" class="headerlink" title="更新一次，渲染结果 20"></a>更新一次，渲染结果 20</h3><pre class="mermaid">flowchart TB  updater["  updater 队列  prevState => { let {x, y, z} = prevState return { x: ++x, y: ++y, z: ++z } },  prevState => { let {x, y, z} = prevState return { x: ++x, y: ++y, z: ++z } },  ...  prevState => { let {x, y, z} = prevState return { x: ++x, y: ++y, z: ++z } }"]</pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">prevState</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;x, y, z&#125; = prevState</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">x</span>: ++x,</span><br><span class="line">        <span class="attr">y</span>: ++y,</span><br><span class="line">        <span class="attr">z</span>: ++z</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    state = &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>, <span class="attr">z</span>: <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">    btnEvent = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">prevState</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> &#123;x, y, z&#125; = prevState</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">x</span>: ++x,</span><br><span class="line">                    <span class="attr">y</span>: ++y,</span><br><span class="line">                    <span class="attr">z</span>: ++z</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;x,y,z&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Render:&#x27;</span>, x, y, z)</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>x:&#123;x&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>y:&#123;y&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>z:&#123;z&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.btnEvent&#125;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于-state-props-与使用普通属性的一些忠告"><a href="#关于-state-props-与使用普通属性的一些忠告" class="headerlink" title="关于 state props 与使用普通属性的一些忠告"></a>关于 state props 与使用普通属性的一些忠告</h2><blockquote><p>触发渲染的属性是 props 和 state，props 来自父级，只读属性，不能修改。如果需要修改须在父级 setState 修改，state 维护组件内部属性。</p></blockquote><ol><li> 变量是否从 props 中获取，若是，则不是一个属性；</li><li> 变量是否在组件的整个生命周期中保持不变，若是，则不是一个状态；</li><li> 状态是否是从在组件 render 中使用，未使用，则不是一个状态，适合用普通属性。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">timer</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">construct</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="literal">null</span>; <span class="comment">// 非 props 或 state，是一个普通属性</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDitMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// timer 不用于渲染</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">date</span>: <span class="title function_">newDate</span>()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillUnMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">timer</span>) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.state.date.toString()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">简而言之，就是 state 如同函数内的变量，props 如同入参，state 和 props 共同触发 ui 渲染</font><br><font color="darkgreen">this.setState({…}) 修改 state，获取 state 属性 this.state.xx</font><br>setState() 两个参数， prevState 和 props 分别用于传递前一个 state 和 props 参数</p><h3 id="react-官方建议把-state-当作不可变对象"><a href="#react-官方建议把-state-当作不可变对象" class="headerlink" title="react 官方建议把 state 当作不可变对象"></a>react 官方建议把 state 当作不可变对象</h3><p>state 中包含的所有状态都应该是不可变对象，state 中的某个状态发生变化时，应该重新创建这个状态对象，并非是修改原来的状态。将状态类型分为三种情况创建新的状态对象：</p><ol><li><p> 状态类型是数字、字符串、布尔值、null、undefined<br>直接给修改状态赋新值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">  <span class="attr">quantity</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;react&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p> 状态类型是数组</p><blockquote><p>状态发生变化时重新创建状态对象，数组方法中，push, pop, shift, unshift, splice 都是 <code>在原数组的基础上修改的</code>，concat、slice、filter 是<code>返回一个新数组</code>。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* books 是要修改的状态，类型为数组 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 preState、concat 创建新数组</span></span><br><span class="line"><span class="comment">// 箭头之后的圆括号用来实现换行（MDN）</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">preState</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">books</span>: preState.<span class="property">books</span>.<span class="title function_">concat</span>([<span class="string">&#x27;react guide&#x27;</span>])</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 spread syntax</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">preState</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">books</span>: [...preState.<span class="property">books</span>, <span class="string">&#x27;react guide&#x27;</span>]</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>用 <code>slice</code> 从数组中截取一部分元素作为新状态；用<code>filter</code> 过滤部分元素作作为新状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">preState</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">books</span>: preState.<span class="property">books</span>.<span class="title function_">slice</span>(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">preState</span> =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">books</span>: preState.<span class="property">books</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item !== <span class="string">&#x27;react&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></li><li><p> 状态类型是不包含字符串、数组的普通对象<br>避免修改原对象的方法，使用返回一个新对象的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 ES6 Object.assgin 方法</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">preState</span> =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">owner</span>: <span class="title class_">Object</span>.<span class="title function_">assgin</span>(&#123;&#125;, preState.<span class="property">owner</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;helen&#x27;</span>&#125;)</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用对象扩展语法 object spread properties</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">preState</span> =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">owner</span>: &#123;...preState.<span class="property">owner</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;helen&#x27;</span>&#125;&#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>react 推荐组件状态不可变的原因在于，返回新对象可以避免原有对象组件状态不小心情况下修改，导致错误，方便管理、调试。还有出于性能考虑，当组件对象不可变时，在组件的 shouldComponentUpdate 方法中仅需要对比前后对象的引用便可以判断是否发迹，避免不必要的 render.</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-MacOS下 Python 配置环境变量</title>
      <link href="/2021/03/08/Python-MacOS-%E4%B8%8B-Python-%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
      <url>/2021/03/08/Python-MacOS-%E4%B8%8B-Python-%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>拢共分三步：<br>第一步，查看 Python 安装位置，<code>which python3</code>；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ which python3</span><br><span class="line">/Library/Frameworks/Python.framework/Versions/3.11/bin/python3</span><br></pre></td></tr></table></figure><p>第二步，认识冰箱门打开，<code>open -e ~/.bash_profile</code>；<br>第三步，把 <code>alias python=&quot;/Library/Frameworks/Python.framework/Versions/3.11/bin/python3&quot;</code> 放进去；<br>第四步，把冰箱门关上，让冰箱运行，<code>source ~/.bash_profile</code><br>最后验证一下哦，看到如下执行结果，就说明配置成功了哦</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python</span><br><span class="line">Python 3.11.2 (v3.11.2:878ead1ac1, Feb  7 2023, 10:02:41) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; 2+3</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; ^D</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器网络</title>
      <link href="/2021/03/05/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BD%91%E7%BB%9C/"/>
      <url>/2021/03/05/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="Error-ERR-TUNNEL-CONNECTION-FAILED"><a href="#Error-ERR-TUNNEL-CONNECTION-FAILED" class="headerlink" title="Error - ERR_TUNNEL_CONNECTION_FAILED"></a>Error - ERR_TUNNEL_CONNECTION_FAILED</h2><p><code>This site can’t be reached.The webpage at https://www.baidu.com/ might be temporarily down or it may have moved permanently to a new web address.</code></p><blockquote><p>解决：<br>  网络代理引起的<br>  wifi -&gt; open network preferences -&gt; advanced -&gt; proxies -&gt; Automatic Proxy Configuration 勾掉</p></blockquote><span id="more"></span>]]></content>
      
      
      
        <tags>
            
            <tag> browser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 组件</title>
      <link href="/2021/03/05/React-Component/"/>
      <url>/2021/03/05/React-Component/</url>
      
        <content type="html"><![CDATA[<p>组件命名采用 PascalCase 命名规则。<br>类组件是动态组件，除父组件更新，触发 props 更新外，还可以通过 this.setState 或 this.forceUpdate 修改组件状态</p><pre class="mermaid">mindmap      组件        A(静态组件)        B[动态组件]          c))hooks 函数组件((          d)类组件(</pre><h2 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h2><ul><li>函数组件是静态组件，父组件更新，子组件才会更新，无法基于组件内部的操作控制更新。<i>不具备”<a href="/2021/03/09/React-State/">状态</a>、<a href="/2021/05/11/React-Refs/">ref</a>、<a href="/2023/06/15/react-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/">周期函数</a>等“</i></li><li>函数组件有属性、插槽、父组件可以控制重新渲染；</li><li>渲染流程简单，渲染速度快；</li><li>基于 FP（函数式编程）思想设计，提供更细粒度的逻辑组织和复用。<br><a href="/2023/06/15/React-Function-Component/">查看更多…</a></li></ul><h2 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h2><ul><li>具备“<a href="/2021/03/09/React-State/">状态</a>，<a href="2021/05/11/React-Refs/">ref</a>，<a href="/2023/05/08/React-Props/">属性</a>、插槽“ 等，可灵活控制组件更新，基于钩子函数也可灵活掌控不同阶段处理不同事项；</li><li>渲染流程繁琐，渲染速度慢；</li><li>基于 OOP（面向对象）思想设计，更方便实现继承<br><a href="/2023/06/15/React-Class-Component/">查看更多…</a></li></ul><h2 id="Hooks-组件"><a href="#Hooks-组件" class="headerlink" title="Hooks 组件"></a>Hooks 组件</h2><ul><li>让函数组件动态化，React 16.8 新增特性，只能运用到函数组件中。<br><a href="/2023/06/15/React-Hooks/">查看更多…</a></li></ul><h2 id="组件渲染机制"><a href="#组件渲染机制" class="headerlink" title="组件渲染机制"></a>组件渲染机制</h2><pre class="mermaid"> flowchart LR jsx[jsx 视图] -->|babel-preset-react-app 转义| react[react 原生] react -->|"运行 React.createElement..."| virtualDOM[virtualDOM] virtualDOM -->|root.render| realDOM[真实DOM]</pre><h3 id="经过-babel-preset-react-app-转义为-react-原生为："><a href="#经过-babel-preset-react-app-转义为-react-原生为：" class="headerlink" title="经过 babel-preset-react-app 转义为 react 原生为："></a>经过 babel-preset-react-app 转义为 react 原生为：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="title class_">ComponentDEMO</span>, &#123;</span><br><span class="line">  <span class="attr">className</span>: <span class="string">&quot;App-header&quot;</span>,</span><br><span class="line">  <span class="attr">style</span>: &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;#a33&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;function component demo&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  <span class="attr">times</span>: <span class="number">3</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="执行-React-createElement-生成-virtualDOM"><a href="#执行-React-createElement-生成-virtualDOM" class="headerlink" title="执行 React.createElement 生成 virtualDOM"></a>执行 React.createElement 生成 virtualDOM</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;   </span><br><span class="line">  <span class="string">&quot;$$typeof&quot;</span>: <span class="title class_">Symbol</span>(react.<span class="property">element</span>)</span><br><span class="line">  <span class="string">&quot;key&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="string">&quot;ref&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="title function_">demo1</span>(),</span><br><span class="line">  <span class="string">&quot;props&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;className&quot;</span>: <span class="string">&quot;App-header&quot;</span>,</span><br><span class="line">      <span class="string">&quot;style&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#a33&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;title&quot;</span>: <span class="string">&quot;function component demo&quot;</span>,</span><br><span class="line">      <span class="string">&quot;data&quot;</span>: [</span><br><span class="line">          <span class="number">1</span>,</span><br><span class="line">          <span class="number">2</span>,</span><br><span class="line">          <span class="number">3</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;times&quot;</span>: <span class="number">3</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;_owner&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="string">&quot;_store&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="root-render-方法将虚拟-DOM-转换为真实-DOM，渲染到页面。"><a href="#root-render-方法将虚拟-DOM-转换为真实-DOM，渲染到页面。" class="headerlink" title="root.render 方法将虚拟 DOM 转换为真实 DOM，渲染到页面。"></a>root.render 方法将虚拟 DOM 转换为真实 DOM，渲染到页面。</h3><p>  <a href="https://github.com/HelenZhangLP/react-18/blob/master/src/JSX/handle.js">具体实现原理见：github/handle.js</a></p><h2 id="react-中创建组件的三种方式"><a href="#react-中创建组件的三种方式" class="headerlink" title="react 中创建组件的三种方式"></a>react 中创建组件的三种方式</h2><h3 id="1-ES5-写法：React-createClass"><a href="#1-ES5-写法：React-createClass" class="headerlink" title="1.  ES5 写法：React.createClass()"></a>1.  ES5 写法：React.createClass()</h3><blockquote><p>React.createClass() 创建一个组件类，该类<strong>接收一个对象参数</strong><br>  <u>对象参数中声明 render() 方法</u><br>  render() 方法返回一个组件实例</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React.createClass 是一个工厂函数</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Component</span> = <span class="title class_">React</span>.<span class="title function_">createClass</span>(&#123;</span><br><span class="line">  <span class="attr">propTypes</span>: &#123;</span><br><span class="line">    <span class="attr">initialValue</span>: <span class="title class_">React</span>.<span class="property">PropTypes</span>.<span class="property">string</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">defaultProps</span>: &#123;</span><br><span class="line">    <span class="attr">initialValue</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getInitialState</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&#x27;ES5 创建 react 组件&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onModify</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    thi.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&#x27;正确绑定 this 到 React 实例，会导致一定的性能开销&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">render</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.onModify&#125;</span>&gt;</span>this.state.text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><font color="red"><strong>createClass 内的方法会正确绑定 this 到 React 类的实例上，会导致一定的性能开销</strong></font></p><h3 id="2-ES6-写法：React-Component"><a href="#2-ES6-写法：React-Component" class="headerlink" title="2.  ES6 写法：React.Component"></a>2.  ES6 写法：React.Component</h3><p>创建有状态组件，能更好的实现代码利用<br><span class='custom-box custom-box-933'>ES6之前：</span><strong>需要手动绑定 this</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">initialState</span> = &#123;</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&#x27;initial state&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 手动绑定 this 方法 一</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onModify</span> = <span class="variable language_">this</span>.<span class="property">onModify</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onModify</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&#x27;ES6 之前需要手动绑定 this&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &#123;<span class="comment">/*</span></span><br><span class="line"><span class="comment">        手动绑定 this 之方法二</span></span><br><span class="line"><span class="comment">        &lt;div onClick=&#123;this.onModify.bind(this)&#125;&gt;this.state.text&lt;/div&gt;</span></span><br><span class="line"><span class="comment">        手动绑定 this 之方法三</span></span><br><span class="line"><span class="comment">        &lt;div onClick=&#123;() =&gt; &#123;</span></span><br><span class="line"><span class="comment">          this.onModify()</span></span><br><span class="line"><span class="comment">        &#125;&#125;&gt;this.state.text&lt;/div&gt;</span></span><br><span class="line"><span class="comment">        */</span>&#125;</span><br><span class="line">      &lt;div onClick=&#123;<span class="variable language_">this</span>.<span class="property">onModify</span>&#125;&gt;<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">text</span>&lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-933'>ES6：</span><strong>使用箭头函数，继承当前实例上下文</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Button</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">num</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, <span class="string">&#x27;componentDidMount&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * handleBtn1() &#123;...&#125; 相当于给 Demo.prototype.handleBtn，即给原型上公共方法</span></span><br><span class="line"><span class="comment">     * this = undefined</span></span><br><span class="line"><span class="comment">     * this.handleBtn1.bind(this) 指定 this 实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">handleBtn1</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 相当于添加【实例属性】Demo.hadnleBtn = ()=&gt;&#123;&#125;</span></span><br><span class="line"><span class="comment">     * 箭头函数的this继承实例自上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    handleBtn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">        <span class="keyword">let</span> &#123;num&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">num</span>: ++num</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleBtn&#125;</span>&gt;</span>按钮&#123;this.state.num&#125;<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-无状态函数写法，又称线组件-SFC"><a href="#3-无状态函数写法，又称线组件-SFC" class="headerlink" title="3.  无状态函数写法，又称线组件 SFC"></a>3.  无状态函数写法，又称线组件 SFC</h3><blockquote><p>可读性好，大大减少代码代码量<br>  无状态函数式组件搭配箭头函数，更简洁，它没有 state 和生命周期<br>  无状态函数组件需要生命周期时，<strong>搭配高阶组件（HOC）</strong>实现<br>  无状态组件作为高阶组件的参数，高阶组件内放需要的生命周期和状态<br>  无状态函数式组件负责展示</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无状态函数组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Test</span> = (<span class="params">props</span>) =&gt; (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Test</span> = (<span class="params">ComponentTest</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">React</span>.<span class="property">Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>(props)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">ComponentTest</span> &#123;<span class="attr">...this.props</span>&#125;) /&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数组件-摘自-reactjs-16，该观点个人不赞成"><a href="#函数组件-摘自-reactjs-16，该观点个人不赞成" class="headerlink" title="函数组件(摘自 reactjs 16，该观点个人不赞成)"></a><del>函数组件(摘自 reactjs 16，该观点个人不赞成)</del></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reactComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello, React Component<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>react 组件与 jsx 实现功能基本一致，但从设计角度上为时过早，还是推荐使用 React 组件方式。</del></p><blockquote><p><del>原因是：React 组件与 Props 结合使用可以实现更灵活的功能。</del></p></blockquote><h2 id="3-组合组件"><a href="#3-组合组件" class="headerlink" title="3. 组合组件"></a>3. 组合组件</h2><p>React 可以在自身定义中引用其它组件，构成组合组件。好处是使用同一组件来抽象出任意层次的细节。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">dir</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0,user-scalable=no,shrink-to-fix=no&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>组合组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@16/umd/react.development.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/antd/4.13.0/antd.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/antd/4.13.0/antd.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> root = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123;<span class="title class_">Input</span>, <span class="title class_">Button</span>&#125; = antd</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">FormTitle</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>UserLogin<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">UserID</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">&quot;UserID&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">UserName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">&quot;UserName&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">Submit</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">block</span>&gt;</span> Submit <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">FormLogin</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">          <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;<span class="name">FormTitle</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;<span class="name">UserID</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;<span class="name">UserName</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;<span class="name">Submit</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">        )</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">FormLogin</span> /&gt;</span></span>, root)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-React-切分提取"><a href="#4-3-React-切分提取" class="headerlink" title="4-3.  React 切分提取"></a>4-3.  React 切分提取</h3><p>切分提取出逻辑清晰、高度复用的小组件，利于代码修改并且便于维护</p><p>React 框架在组件代码重用方面，具有组合和继承模式。React 官方推荐设计人员在实际项目中尽量使用组合模式。<br>React 基于 ES6 规范标准设计，也支持继承关系 extends 关键字可以实现继承</p><p>当多个组件需要反映相同的变化数据，建议将共享状态提升到最近的共同父组件中 <strong>状态提升</strong></p><p>babel 是 javascript 的编译器，主要用来将 ES6+ 代码转换为 ES5 版本的 javascript 语法，保证最新 ES6+ 语法能在旧版本浏览器或其它环境中运行。<br>webpack 是 javascript 应用程序静态模块打包器<br>webpack 将 javascript 应用程序视为模块<br>webpack 通过 loader 转换文件，plugin 注入勾子，最终输出由多个文件合并而成的模块化项目</p><p>webpack 对于 web 服务支持</p><blockquote><p>npm i webpack-dev-server –save<br>package.json add “start: webapck-dev-server –open –mode development”</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React JSX</title>
      <link href="/2021/03/03/React-jsx/"/>
      <url>/2021/03/03/React-jsx/</url>
      
        <content type="html"><![CDATA[<h2 id="JSX-介绍"><a href="#JSX-介绍" class="headerlink" title="JSX 介绍"></a>JSX 介绍</h2><p>JavaScript XML 缩写为 JSX<br>JSX 作为 JavaScript 语法扩展，支持自定义属性，并具有很强的扩展性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="property">body</span>);</span><br></pre></td></tr></table></figure><p><font color='red'>Warning: createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.<br>printWarning @react-dom.development.js:86</font><br><span class='custom-box custom-box-393'>建议业务代码放入根容器，且必须要有一个根容器，避免未知错误</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="comment">// &lt;React.StrictMode&gt;</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Baby Coding<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="comment">/* &lt;/React.StrictMode&gt; */</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><font color='red'>Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment &lt;&gt;…&lt;/&gt;?</font><br><span class='custom-box custom-box-393'>渲染只能有一个根元素</span></p><h2 id="JSX-作为单独文件引入"><a href="#JSX-作为单独文件引入" class="headerlink" title="JSX 作为单独文件引入"></a>JSX 作为单独文件引入</h2><p><span class='custom-box custom-box-933'>React 中使用 JSX 语法，必须引用 ‘babel.js’ 解析 JSX</span><br><span class='custom-box custom-box-393'><code>&lt;script type=&quot;text/babel&quot;&gt;&lt;/script&gt;</code> 浏览器内置的 JavaScript 解释器不解析标签里的脚本代码，由 <code>babel</code> 解析，避免 react 与原生 javascript 代码混淆</span></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">dir</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- react core code，when deploying, replace &#x27;react.development.js&#x27; with &#x27;react.production.min.js&#x27; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@16/umd/react.development.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- react dom when deploying replace &#x27;react-dom.development.js&#x27; with &#x27;react-dom.production.min.js&#x27; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@16/umd/react-dom-development.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Don&#x27;t use it in production --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/babel-standalone@5.16.0/babel.min.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- import.js 是 babel 编写的 js 代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./import.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><ul><li>驼峰命名（camelCase/PascalCase）</li><li>烤肉串命名（kebab-case）</li><li>下划线命名</li></ul><h3 id="JS-表达式"><a href="#JS-表达式" class="headerlink" title="JS 表达式"></a>JS 表达式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;arithmetic&#x27;</span></span><br><span class="line"><span class="keyword">const</span> span = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><table><thead><tr><th>数据类型</th><th>渲染结果</th><th>案例</th></tr></thead><tbody><tr><td>Number</td><td>渲染输入内容</td><td>{1} –&gt; 1</td></tr><tr><td>String</td><td>渲染输入内容</td><td>{“hello”} –&gt; hello</td></tr><tr><td>boolean</td><td>渲染内容为空</td><td>{true} –&gt;</td></tr><tr><td>null</td><td>渲染内容为空</td><td>{null} –&gt;</td></tr><tr><td>undefined</td><td>渲染内容为空</td><td>{undefined} –&gt;</td></tr><tr><td>Symbol</td><td>渲染内容为空</td><td>{Symbol} –&gt;</td></tr><tr><td>BigInt</td><td>渲染内容为空</td><td>{10n} –&gt;</td></tr><tr><td>对象</td><td>error</td><td><font color="red">Objects are not valid as a React child (found: object with keys {}). If you meant to render a collection of children, use an array instead.</td></tr><tr><td>数组</td><td>数组元素分别渲染为字符串</td><td>{[1,2]}–&gt;12</td></tr><tr><td>函数</td><td>error</td><td><font color="red">Warning: Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it</font></td></tr></tbody></table><p><code>除行内样式和JSX 虚拟 DOM 对象外，&#123;&#125; 语法中均不支持使用对象类型</code></p><h3 id="JS-循环表达式"><a href="#JS-循环表达式" class="headerlink" title="JS 循环表达式"></a>JS 循环表达式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[].<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br></pre></td></tr></table></figure><h3 id="JS-条件表达式-——-三元运算符"><a href="#JS-条件表达式-——-三元运算符" class="headerlink" title="JS 条件表达式 —— 三元运算符"></a>JS 条件表达式 —— 三元运算符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> span = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;true ? 1 : 2&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="JSX-对象表达式"><a href="#JSX-对象表达式" class="headerlink" title="JSX 对象表达式"></a>JSX 对象表达式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userInfo = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;arithmetic&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> span = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;userInfo.name&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="JSX-函数表达式"><a href="#JSX-函数表达式" class="headerlink" title="JSX 函数表达式"></a>JSX 函数表达式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userInfo = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;arithmetic&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUserName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> userInfo.<span class="property">name</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> span = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;getUserName()&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="JSX-增强函数表达式"><a href="#JSX-增强函数表达式" class="headerlink" title="JSX 增强函数表达式"></a>JSX 增强函数表达式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userInfo = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;arithmetic&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (userInfo.<span class="property">age</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Number</span>(userInfo.<span class="property">age</span>) + <span class="number">1</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Number</span>(userInfo.<span class="property">age</span>) + <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> span = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;getAge()&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="JSX-数组表达式"><a href="#JSX-数组表达式" class="headerlink" title="JSX 数组表达式"></a>JSX 数组表达式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userInfo = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;arithmetic&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (userInfo.<span class="property">age</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Number</span>(userInfo.<span class="property">age</span>) + <span class="number">1</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Number</span>(userInfo.<span class="property">age</span>) + <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> lis = [</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>name: &#123;userInfo.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;getAge()&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> ol = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;lis&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="JSX-表达式样式"><a href="#JSX-表达式样式" class="headerlink" title="JSX 表达式样式"></a>JSX 表达式样式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rootDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> nameStyle = &#123;</span><br><span class="line">  <span class="attr">fontFamily</span>: <span class="string">&#x27;Arial&#x27;</span>,</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&#x27;#f90&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> ageStyle = &#123;</span><br><span class="line">  <span class="attr">fontFamily</span>: <span class="string">&#x27;sens-serif&#x27;</span>,</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&#x27;#f99&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> userInfo = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;arithmetic&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (userInfo.<span class="property">age</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Number</span>(userInfo.<span class="property">age</span>) + <span class="number">1</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Number</span>(userInfo.<span class="property">age</span>) + <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> lis = [</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&#123;nameStyle&#125;</span>&gt;</span>name: &#123;userInfo.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>,</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&#123;ageStyle&#125;</span>&gt;</span>age: &#123;getAge()&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> ol = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;lis&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(ol, rootDiv)</span><br></pre></td></tr></table></figure><h3 id="JSX-引入多个样式类表达式"><a href="#JSX-引入多个样式类表达式" class="headerlink" title="JSX 引入多个样式类表达式"></a>JSX 引入多个样式类表达式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Demo</span> = (<span class="params">props</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">btn</span>` `<span class="attr">btn-</span>$&#123;<span class="attr">props.theme</span>&#125;`&#125;&gt;</span>className<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TS 变量定义与数据类型</title>
      <link href="/2021/01/25/TS-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2021/01/25/TS-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>微软公司研发<br>2012 年 TypeScript 0.8.1 Luke Hoban</p><pre class="mermaid"> timeline    title History of TypeScript    November 15, 2012 : Announcing TypeScript 0.8.1         : Luke Hoban    October 8, 2018: Announcing TypeScript 3.1                    : 中文网最新版本    November 20, 2023: Announcing TypeScript 5.3</pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明变量</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">variable</span>: number</span><br><span class="line"></span><br><span class="line">variable = <span class="number">1</span></span><br><span class="line"><span class="comment">// variable = &#x27;hello&#x27; // Type &#x27;string&#x27; is not assignable to type &#x27;number&#x27;.[不能将类型“string”分配给类型“number”。ts(2322)]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> _variable = <span class="literal">true</span> <span class="comment">// 变量声明的同时赋值，TS 可以自动对变量进行类型检测</span></span><br><span class="line">_variable = <span class="number">1</span> <span class="comment">// // Type &#x27;string&#x27; is not assignable to type &#x27;number&#x27;.[不能将类型“string”分配给类型“number”。ts(2322)]</span></span><br></pre></td></tr></table></figure><blockquote><p>变量声明的同时赋值，TS 可以自动对变量进行类型检测</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="keyword">function</span> <span class="title function_">getPublicUrlOrPath</span>(<span class="params"></span></span><br><span class="line"><span class="params">    isEnvDevelopment: boolean,</span></span><br><span class="line"><span class="params">    homepage: string | <span class="literal">undefined</span>,</span></span><br><span class="line"><span class="params">    envPublicUrl: string | <span class="literal">undefined</span>,</span></span><br><span class="line"><span class="params"></span>): string;</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><table><thead><tr><th>类型</th><th>例子</th><th>描述</th></tr></thead><tbody><tr><td>number</td><td>let n=1,u=Ob0001,m=Oxf00d,o=Oo744,big=10n</td><td>任意类型数字</td></tr><tr><td>string</td><td>let s=’string’</td><td>任意字符串</td></tr><tr><td>boolean</td><td>let a=true,b=false</td><td>布尔值</td></tr><tr><td>字面量</td><td>其本身</td><td>限制字面量的值是该值</td></tr><tr><td>any</td><td>任何类型</td><td>可以赋值给其它的变量，赋值后当前变量值修改，但类型未修改</td></tr><tr><td>unknown</td><td>未知类型</td><td>一个安全的 any 类型，不能赋值给其它变量</td></tr><tr><td>void</td><td>空值(undefined)</td><td>没有值(或undefined)</td></tr><tr><td>never</td><td>没有值</td><td>不能是任何值</td></tr><tr><td>object</td><td>{name: ‘moses’}</td><td>任意 JS 对象</td></tr><tr><td>array</td><td>[]</td><td>JS 数组</td></tr><tr><td>tuple</td><td>[]</td><td></td></tr><tr><td>enum</td><td>enum(A,B)</td><td></td></tr></tbody></table><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p><span class='custom-box custom-box-939'>以下情况类似于常量，值不能修改。</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">variable_</span>: <span class="number">1</span> <span class="comment">// 这种情况下类似于常量</span></span><br><span class="line"><span class="comment">// variable_ = 2 // 不能将类型“2”分配给类型“1”。ts(2322)</span></span><br></pre></td></tr></table></figure><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型 |"></a>联合类型 |</h3><p><span class='custom-box custom-box-939'>以下情况，变量的值可以多个</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">_var</span>: <span class="string">&quot;string&quot;</span> | <span class="number">2</span> <span class="comment">// 联合类型，_var 的值既可以是字符串 string，又可以是 2</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">var_</span>: boolean | string</span><br></pre></td></tr></table></figure><h3 id="any"><a href="#any" class="headerlink" title="any"></a>any</h3><p><span class='custom-box custom-box-939'>任意类型，变量设置为 any 类型相当于对该变量关闭了 TS 的类型检测</span><br><span class='custom-box custom-box-933'>使用 TS 时，不建议使用 any 类型</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let var_any: any</span></span><br><span class="line"><span class="comment">// 隐式 any：声明变量时不指定类型，则 TS 解析器会自动判断变量类型为 any</span></span><br><span class="line"><span class="keyword">let</span> var_any <span class="comment">// TS7043: Variable &#x27;var_any&#x27; implicitly(含蓄地；暗中地) has an &#x27;any&#x27; type,</span></span><br><span class="line">            <span class="comment">// but a better type may be inferred(推断) from usage（使用）.</span></span><br><span class="line">    var_any = <span class="number">1</span></span><br><span class="line">    var_any = <span class="number">1n</span></span><br><span class="line">    var_any = <span class="string">&#x27;string&#x27;</span></span><br><span class="line">    var_any = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="BigInt-literals-are-not-available-when-targeting-lower-than-ES2020"><a href="#BigInt-literals-are-not-available-when-targeting-lower-than-ES2020" class="headerlink" title="BigInt literals are not available when targeting lower than ES2020."></a><font color='red'>BigInt literals are not available when targeting lower than ES2020.</font></h4><p>这里需要 ts 编译时，编译为 es2020 及以上版，<a href="/2022/03/06/TS-%E7%BC%96%E8%AF%91/">【具体操作见】</a></p><h3 id="unknown-类型"><a href="#unknown-类型" class="headerlink" title="unknown 类型"></a>unknown 类型</h3><p>在变量类型不确定时建议使用 <code>unknown</code> 类型<br><span class='custom-box custom-box-393'>unknown 是一个安全类型的 any</span><br><span class='custom-box custom-box-339'>不能直接赋值给其它变量</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">var_unknown</span>: unknown</span><br><span class="line">var_unknown = <span class="title class_">Number</span>.<span class="property">MAX_VALUE</span></span><br><span class="line"></span><br><span class="line">variable = var_unknown <span class="comment">// TS2322 Type &#x27;unknown&#x27; is not assignable to type number【不能将类型“unknown”分配给类型“number”。ts(2322)】</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ’unknown‘ 类型的值不能直接赋值给任何变量</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> !=== <span class="string">&#x27;unknown&#x27;</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure><h4 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h4><blockquote><p>解决 ‘unknown’ 类型变量赋值问题<br>断言有两种写法，如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 断言 可以用来告诉解析器变量实际类型</span></span><br><span class="line">variable = var_unknown <span class="keyword">as</span> number <span class="comment">// TS2322 Type &#x27;unknown&#x27; is not assignable to type number【不能将类型“unknown”分配给类型“number”。ts(2322)】</span></span><br><span class="line">variable = &lt;number&gt;var_unknown</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(variable)</span><br></pre></td></tr></table></figure><h3 id="void"><a href="#void" class="headerlink" title="void"></a>void</h3><blockquote><p>函数没有返回值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>): <span class="keyword">void</span> &#123;&#125; </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fnUndefined</span>(<span class="params"></span>): <span class="keyword">void</span> &#123;<span class="keyword">return</span> <span class="literal">undefined</span>&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fnNull</span>(<span class="params"></span>): <span class="keyword">void</span> &#123;<span class="keyword">return</span> <span class="literal">null</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="never"><a href="#never" class="headerlink" title="never"></a>never</h3><blockquote><p>永远不会有返回值，可以在定义错误问题报错</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>): never &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&#x27;错了&#x27;</span>)</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><p>以下方式声明 <code>object</code> 对象类型，对于对象赋值没有任何约束作用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: object</span><br><span class="line">obj = &#123;&#125;</span><br><span class="line">obj = []</span><br><span class="line">obj = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="object-对象类型的声明与赋值"><a href="#object-对象类型的声明与赋值" class="headerlink" title="object 对象类型的声明与赋值"></a>object 对象类型的声明与赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">_obj</span>: &#123; <span class="attr">name</span>: string &#125;</span><br><span class="line"><span class="comment">// TS2741: Property &#x27;name&#x27; is missing in type &#x27;&#123;&#125;&#x27;, but required in type &#123;name: string&#125;</span></span><br><span class="line"><span class="comment">// 类型 &quot;&#123;&#125;&quot; 中缺少属性 &quot;name&quot;，但类型 &quot;&#123; name: string; &#125;&quot; 中需要该属性。ts(2741)</span></span><br><span class="line"><span class="comment">// _obj = &#123;&#125; </span></span><br><span class="line">_obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;moses&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>不能添加不存在的属性给已声明的对象，赋值过程中也不能缺少属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// _obj = &#123; name: &#x27;moses&#x27;, age: 33 &#125; // 对象字面量只能指定已知属性，并且“age”不在类型“&#123; name: string; &#125;”中。ts(2353)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj_</span>: &#123; <span class="attr">name</span>: string, <span class="attr">age</span>: number &#125;</span><br><span class="line"><span class="comment">// obj_ = &#123; name: &#x27;moses&#x27; &#125; // 类型 &quot;&#123; name: string; &#125;&quot; 中缺少属性 &quot;age&quot;，但类型 &quot;&#123; name: string; age: number; &#125;&quot; 中需要该属性。ts(2741)</span></span><br><span class="line">obj_ = &#123; <span class="attr">name</span>: <span class="string">&#x27;moses&#x27;</span>, <span class="attr">age</span>: <span class="number">33</span> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以通过 ? 语法声明非必填，或不一定有的属性，具体如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象属性非必须，非必填</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">_obj_</span>: &#123; <span class="attr">name</span>: string, age?: number &#125;</span><br><span class="line">_obj_ = &#123; <span class="attr">name</span>: <span class="string">&#x27;moses&#x27;</span>, <span class="attr">age</span>: <span class="number">33</span> &#125;</span><br><span class="line">_obj_ = &#123; <span class="attr">name</span>: <span class="string">&#x27;moses&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过以下语法可设置多个非必填属性，具体如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存在多个非必填属性</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">_object</span>: &#123; <span class="attr">name</span>: string, [<span class="attr">propertyName</span>: string]: any &#125;</span><br><span class="line">_object = &#123; <span class="attr">name</span>: <span class="string">&#x27;moses&#x27;</span>, <span class="attr">age</span>: <span class="number">33</span>, <span class="attr">hobbies</span>: [<span class="string">&#x27;reading&#x27;</span>, <span class="string">&#x27;cooking&#x27;</span>, <span class="string">&#x27;studing&#x27;</span>] &#125;</span><br></pre></td></tr></table></figure><h4 id="函数结构声明"><a href="#函数结构声明" class="headerlink" title="函数结构声明"></a>函数结构声明</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置函数结构声明</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fn</span>: <span class="function">(<span class="params">argments1: number, argments2: number</span>) =&gt;</span> number</span><br><span class="line"></span><br><span class="line">fn = <span class="keyword">function</span> (<span class="params">n1, n2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3><h4 id="数组声明"><a href="#数组声明" class="headerlink" title="数组声明"></a>数组声明</h4><blockquote><p>数组声明方式1</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组声明</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr_Array</span>: <span class="title class_">Array</span>&lt;number&gt;</span><br><span class="line">arr_Array = []</span><br><span class="line">arr_Array = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="comment">// arr_Array = [&#x27;arr&#x27;] // 不能将类型“string”分配给类型“number”。ts(2322)</span></span><br></pre></td></tr></table></figure><blockquote><p>数组声明方式2</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> <span class="attr">arr</span>: [] <span class="comment">// 声明了一个空数组</span></span><br><span class="line"><span class="comment">// 空数组赋值时不能有元素</span></span><br><span class="line"><span class="comment">// arr = [1] // 不能将类型“[number]”分配给类型“[]”。</span></span><br></pre></td></tr></table></figure><h4 id="数组赋值"><a href="#数组赋值" class="headerlink" title="数组赋值"></a>数组赋值</h4><blockquote><p>数组元素需要按指定类型赋值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr_str</span>: string[] <span class="comment">// 字符串数组，数组元素只能为字符串</span></span><br><span class="line">arr_str = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;r&#x27;</span>]</span><br><span class="line"><span class="comment">// arr_str = [&#x27;a&#x27;, &#x27;r&#x27;, &#x27;r&#x27;, 1] // 不能将类型“number”分配给类型“string”。ts(2322)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr_num</span>: number[]</span><br><span class="line">arr_num = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="comment">// arr_num = [1, 2, true] // 不能将类型“boolean”分配给类型“number”。ts(2322)</span></span><br></pre></td></tr></table></figure><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><blockquote><p>固定长度的数组，数组元素固定类型</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">_tuple</span>: [string, number, boolean]</span><br><span class="line">_tuple = [<span class="string">&#x27;1&#x27;</span>,<span class="number">1</span>,<span class="literal">true</span>]</span><br></pre></td></tr></table></figure><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p :&#123;<span class="attr">name</span>: string, <span class="attr">gender</span>: string&#125;</span><br><span class="line">p = &#123;<span class="attr">name</span>: <span class="string">&#x27;moses&#x27;</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>gender 为字符串不得于数据库存储，<span class='custom-box custom-box-933'>所以这里将 gender 定义为数字类型，0 表示 male, 1表示 female</span></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p :&#123;<span class="attr">name</span>: string, <span class="attr">gender</span>: <span class="number">0</span> | <span class="number">1</span>&#125; <span class="comment">// 采用联合类型给变量设置多个值</span></span><br><span class="line">p = &#123;<span class="attr">name</span>: <span class="string">&#x27;moses&#x27;</span>, <span class="attr">gender</span>: <span class="number">1</span>&#125; </span><br></pre></td></tr></table></figure><blockquote><p>问题：不利于代码维护，阅读性差，<span class='custom-box custom-box-933'>采用枚举类解决可读性问题</span></p></blockquote><h4 id="枚举定义"><a href="#枚举定义" class="headerlink" title="枚举定义"></a>枚举定义</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enum <span class="title class_">Gender</span> &#123;</span><br><span class="line">    male,</span><br><span class="line">    female</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>案例中 gender 声明为枚举类型</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">p</span>: &#123;<span class="attr">name</span>: string, <span class="attr">gender</span>: <span class="title class_">Gender</span>&#125;</span><br><span class="line">p = &#123;<span class="attr">name</span>: <span class="string">&#x27;moses&#x27;</span>, <span class="attr">gender</span>: <span class="title class_">Gender</span>.<span class="property">male</span>&#125; <span class="comment">// 加强可读性</span></span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="联合类型-amp"><a href="#联合类型-amp" class="headerlink" title="联合类型 &amp;"></a>联合类型 &amp;</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> union :&#123;<span class="attr">a</span>:object&#125; &amp; &#123;<span class="attr">b</span>:string&#125;</span><br><span class="line"><span class="comment">// union = &#123; a: null, b: &#x27;1&#x27; &#125; //不能将类型“null”分配给类型“object”。ts(2322)</span></span><br><span class="line">union = &#123;<span class="attr">a</span>: &#123;&#125;, <span class="attr">b</span>: <span class="string">&#x27;1&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type mytype = <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: mytype</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">a = <span class="number">3</span></span><br><span class="line">a = <span class="number">8</span> <span class="comment">//不能将类型“8”分配给类型“mytype”。ts(2322)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-事件对象</title>
      <link href="/2021/01/19/Javascript-%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1/"/>
      <url>/2021/01/19/Javascript-%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>事件是浏览器赋予元素的默认行为</p><blockquote><p>事件具有传播机制，事件流描述从页面中接受事件的顺序。</p><ol><li>   捕获阶段(CAPTURING_PHASE 1)，从外层到最内层一一查的；</li><li>   目标阶段(AT_TARGET 2)，触发事件源的点击行为；</li><li>   冒泡阶段(BUBBLING_PASH 3)，按捕获阶段分析出来的路径，从内到外触发每个元素的点击事件</li></ol></blockquote><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p>事件绑定是给浏览器赋予元素默认行为绑定一个方法。即使没有绑定方法，点击元素也会触发相应的事件。</p><h2 id="事件传播（事件冒泡与事件捕获）"><a href="#事件传播（事件冒泡与事件捕获）" class="headerlink" title="事件传播（事件冒泡与事件捕获）"></a>事件传播（事件冒泡与事件捕获）</h2><p><img src="/images/js/event.jpg" alt="冒泡，捕获"><br>当一个元素接收到事件时，会把它接收到的事件逐级向上传播给它的祖先元素，一直传到【顶层对象】</p><blockquote><p>IE9以上、Chrome、Safari 事件冒泡顶层对象是 window<br>IE7/IE8 事件冒泡顶层对象是 Document<br>事件冒泡对所有浏览器默认存在，且由元素 html 结构决定。<span class='custom-box custom-box-339'>所以即使定位或浮动脱离文档流的元素也是存在冒泡现象的</span></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> html = <span class="variable language_">document</span>.<span class="property">getElement</span>,</span></span><br><span class="line"><span class="language-javascript">        body = <span class="variable language_">document</span>.<span class="property">body</span>,</span></span><br><span class="line"><span class="language-javascript">        root = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">        outer = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;outer&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">        inner = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;inner&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        inner.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inner click 冒泡&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        inner.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inner click 捕获&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        outer.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;outer click 冒泡&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        outer.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;outer click 捕获&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        root.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;root click 冒泡&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        root.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;root click 捕获&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-393'><code>window 捕获</code> –&gt; <code>document 捕获</code> –&gt; <code>html 捕获</code> –&gt; <code>body 捕获</code> –&gt; <code>root 捕获</code> –&gt; <code>outer 捕获</code> –&gt; <code>inner 捕获</code></span><span class='custom-box custom-box-339'> –&gt; 目标阶段 –&gt; </span> <span class='custom-box custom-box-993'><code>inner 冒泡</code> –&gt; <code>outer 冒泡</code> –&gt; <code>root 冒泡</code> –&gt; <code>body 冒泡</code> –&gt; <code>html 冒泡</code> –&gt; <code>document 冒泡</code> –&gt; <code>window 冒泡</code></span></p><pre class="mermaid"> flowchart LR capturing["捕获阶段 CAPTURING_PHASE"] --> AT_TARGET["目标阶段 AT_TARGET"] AT_TARGET --> bubbling["冒泡阶段 BUBBLING_PASH"]</pre><p>使用事件源对象的事件属性绑定事件函数及使用html标签事件属性绑定事件函数的事件流都是冒泡</p><h3 id="event-stopPropagation-——阻止事件传播"><a href="#event-stopPropagation-——阻止事件传播" class="headerlink" title="event.stopPropagation()——阻止事件传播"></a>event.stopPropagation()——阻止事件传播</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    ...</span></span><br><span class="line"><span class="language-javascript">        inner.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            event.<span class="title function_">stopPropagation</span>()</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inner click 冒泡&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        ...</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>root 捕获</code> –&gt; <code>outer 捕获</code> –&gt; <code>inner 捕获</code> –&gt; <code>inner 冒泡</code><br>inner 以后的事件不再传播</p></blockquote><h3 id="event-stopImmediatePropagation-———-立即阻止事件传传播"><a href="#event-stopImmediatePropagation-———-立即阻止事件传传播" class="headerlink" title="event.stopImmediatePropagation ——— 立即阻止事件传传播"></a>event.stopImmediatePropagation ——— 立即阻止事件传传播</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    ...</span></span><br><span class="line"><span class="language-javascript">        root.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            event.<span class="title function_">stopImmediatePropagation</span>()</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;root click 捕获&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>root 捕获</code><br>   立即阻止事件传播，包括当前 dom 绑定的未执行的其它方法</p></blockquote><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>利用事件传播机制，实现的一套 <span class='custom-box custom-box-393'>事件绑定处理方案</span><br><span class='custom-box custom-box-933'>要求当前事件必须支持事件传播机制（如：mouseenter,mouseleave）；某事件单独做了事件绑定，并阻止了事件传播，事件委托不生效</span></p><h3 id="事件委托的优点："><a href="#事件委托的优点：" class="headerlink" title="事件委托的优点："></a>事件委托的优点：</h3><ul><li>提高 JS 代码运行的性能，并且把处理的逻辑都集中在一起</li><li>给动态绑定的元素做事件绑定</li><li>除某些元素外的其它元素的事件处理，需要基于事件委托来做</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> html = <span class="variable language_">document</span>.<span class="property">getElement</span>,</span></span><br><span class="line"><span class="language-javascript">        body = <span class="variable language_">document</span>.<span class="property">body</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        body.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">evt</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> id = evt.<span class="property">target</span>.<span class="property">id</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (id === <span class="string">&#x27;inner&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;do something&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;do other thing&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="document-body-addEventListener-‘click’-function-…-无响应"><a href="#document-body-addEventListener-‘click’-function-…-无响应" class="headerlink" title="document.body.addEventListener(‘click’, function() {…} 无响应)"></a><font color='red'>document.body.addEventListener(‘click’, function() {…} 无响应)</font></h2><p><span class='custom-box custom-box-933'>Reason: document.clientHeigyt = 0，body 没有高度。引起 body 没有高度的原因可能是子元素脱离文档流。</span></p><h2 id="The-path-property-of-Event-objects-is-non-standard-浏览器新的标准采用Event-composedPath"><a href="#The-path-property-of-Event-objects-is-non-standard-浏览器新的标准采用Event-composedPath" class="headerlink" title="The path property of Event objects is non-standard.浏览器新的标准采用Event.composedPath()"></a><font color='red'>The path property of Event objects is non-standard.浏览器新的标准采用Event.composedPath()</font></h2><blockquote><p>当对象数组调用该 侦听器时返回事件路径。</p></blockquote><h2 id="事件对象池"><a href="#事件对象池" class="headerlink" title="事件对象池"></a>事件对象池</h2><h2 id="关于移动端事件对象延迟"><a href="#关于移动端事件对象延迟" class="headerlink" title="关于移动端事件对象延迟"></a>关于移动端事件对象延迟</h2><p><span class='custom-box custom-box-933'>移动端 click 有 300ms 延迟</span>，移动端 click 是单击事件，PC 端 click 为点击事件。<br><span class='custom-box custom-box-393'>连点两下，</span>PC 端会触发两次 click，一次 dblclick；移动端只会触发 dblclick。<br><span class='custom-box custom-box-339'>移动端单击事件：第一次点击后，监听 300ms，查看是否有第二次点击，有则是双击，没有为单击。</span></p><h3 id="移动羰单手指事件模型"><a href="#移动羰单手指事件模型" class="headerlink" title="移动羰单手指事件模型"></a>移动羰单手指事件模型</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">touch</span>: &#123;</span><br><span class="line">            <span class="attr">isMove</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    touchStart = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> finger = evt.<span class="property">changedTouches</span>[<span class="number">0</span>] <span class="comment">// 手指事件信息</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(evt)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">isMove</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">x</span>: finger.<span class="property">pageX</span>,</span><br><span class="line">            <span class="attr">y</span>: finger.<span class="property">pageY</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    touchMove = <span class="function"><span class="params">evt</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> finger = evt.<span class="property">changedTouches</span>[<span class="number">0</span>] <span class="comment">// 手指事件信息</span></span><br><span class="line">        <span class="keyword">const</span> &#123;touch&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">let</span> x =finger.<span class="property">pageX</span> - touch.<span class="property">x</span>,</span><br><span class="line">            y = finger.<span class="property">pageY</span> - touch.<span class="property">y</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(x) &gt; <span class="number">10</span> || <span class="title class_">Math</span>.<span class="title function_">abs</span>(y) &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">                <span class="attr">isMove</span>: <span class="literal">true</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    touchEnd = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;touch&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">if</span> (touch.<span class="property">isMove</span>) <span class="keyword">return</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击按钮了&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onTouchStart</span>=<span class="string">&#123;this.touchStart&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onTouchMove</span>=<span class="string">&#123;this.TouchMove&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onTouchEnd</span>=<span class="string">&#123;this.touchEnd&#125;</span>&gt;</span>mobileEvent<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FastClick-解决移动端使用-click-点击事件-300ms-延迟问题"><a href="#FastClick-解决移动端使用-click-点击事件-300ms-延迟问题" class="headerlink" title="FastClick 解决移动端使用 click 点击事件 300ms 延迟问题"></a>FastClick 解决移动端使用 click 点击事件 300ms 延迟问题</h3>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器工作原理——async/await（用同步的方式写异步代码）</title>
      <link href="/2021/01/18/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94async-await%EF%BC%88%E7%94%A8%E5%90%8C%E6%AD%A5%E7%9A%84%E6%96%B9%E5%BC%8F%E5%86%99%E5%BC%82%E6%AD%A5%E4%BB%A3%E7%A0%81%EF%BC%89/"/>
      <url>/2021/01/18/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94async-await%EF%BC%88%E7%94%A8%E5%90%8C%E6%AD%A5%E7%9A%84%E6%96%B9%E5%BC%8F%E5%86%99%E5%BC%82%E6%AD%A5%E4%BB%A3%E7%A0%81%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>fetch 定义在 window 对象中，用来发起远程资源请求，返回一个 Promise 对象，浏览器原生支持。</p><p><em>接口嵌套请求需求：request1 请求成功后再做 request2请求，运用 fetch 实现如下：</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://request1.com&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://request2.com&#x27;</span>)</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><span id="more"></span><p>async/await 这是 JavaScript 异步编程，提供了在不阻塞主线程的情况下使用同步代码实现异步访问资源的能力，并且使得代码逻辑更加清晰</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://request.com&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response, <span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> response1 = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://request1.com&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response1, <span class="string">&#x27;response1&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成器（Generator）是如何工作的"><a href="#生成器（Generator）是如何工作的" class="headerlink" title="生成器（Generator）是如何工作的"></a>生成器（Generator）是如何工作的</h2><blockquote><p>生成器函数是一个 <strong>带星号函数</strong>，是可以 <strong>暂停执行和恢复执行</strong> 的。Generator 函数除了可以使用 return 关键字返回外，还可以使用 yield 关键字中断。调用 Generator 函数并非执行函数体内的内容，而是返回一个迭代器对象，通过这个迭代器对象的 next 指针来分步执行 Generator 函数中的内容任务。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">genDmo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始执行第一行&#x27;</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;Generator 2&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始执行第二行&#x27;</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;Generator 2&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始执行第三行&#x27;</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;Generator 2&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行结果&#x27;</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;Generator 2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;main&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> gen = <span class="title function_">genDmo</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>().<span class="property">value</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;main 1&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>().<span class="property">value</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;main 2&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>().<span class="property">value</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;main 3&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>().<span class="property">value</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;main 4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//main</span></span><br><span class="line"><span class="comment">// demo-1.html:19 开始执行第一行</span></span><br><span class="line"><span class="comment">// demo-1.html:34 Generator 2</span></span><br><span class="line"><span class="comment">// demo-1.html:35 main 1</span></span><br><span class="line"><span class="comment">// demo-1.html:22 开始执行第二行</span></span><br><span class="line"><span class="comment">// demo-1.html:36 Generator 2</span></span><br><span class="line"><span class="comment">// demo-1.html:37 main 2</span></span><br><span class="line"><span class="comment">// demo-1.html:25 开始执行第三行</span></span><br><span class="line"><span class="comment">// demo-1.html:38 Generator 2</span></span><br><span class="line"><span class="comment">// demo-1.html:39 main 3</span></span><br><span class="line"><span class="comment">// demo-1.html:28 执行结果</span></span><br><span class="line"><span class="comment">// demo-1.html:40 Generator 2</span></span><br><span class="line"><span class="comment">// demo-1.html:41 main 4</span></span><br></pre></td></tr></table></figure><p>如上执行结果：<br>在生成器函数内部执行一段代码，如果遇到 yield 关键字，JavaScript 引擎则返回关键字后面的内容给外部、并暂停该函数执行；<br>外围函数可以通过 next 方法恢复函数的执行</p><h2 id="Generator-的底层实现机制——协程（Coroutine）"><a href="#Generator-的底层实现机制——协程（Coroutine）" class="headerlink" title="Generator 的底层实现机制——协程（Coroutine）"></a>Generator 的底层实现机制——协程（Coroutine）</h2><p>协程是一种比线程更加轻量级的存在<br>可以看作是跑在线程上的任务，一个线程上可以存在多个协程，但是在线程上同时只能执行一个协程【当前执行的 A 协程，要启动 B 协程，那么 A 协程就要把主线程上的控制权给 B 协程，体现为 A 协程暂停执行，B 协程恢复执行；同样，也可以从 B 协程中启动一个 A 协程】<strong>通常，如果从 A 协程启动 B 协程，我们把 A 协程称为 B 协程的父协程。</strong></p><p>一个线程可以拥有多个协程，<code>协程不是被操作系统内核管理，而是由程序控制，也就是在用户态执行。如此带来的好处是性能得到了很大的提升，不会像线程切换那样消耗资源</code>。</p><ol><li> gen 协程和父协程在主线程上交互执行，并不是并发执行的，它们之前的切换是通过 yield 和 gen.next 来配合完成</li><li> 当在 gen 协程中调用了 yield 方法，JavaScript 引擎会保存 gen 协程当前的调用栈信息，并恢复父协程的调用栈信息。同样，当在父协和中执行 gen.next 时，JavaScript 引擎会保存父协程的调用栈信息，并恢复 gen 协程的调用栈信息。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> response1 = <span class="keyword">yield</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://response1.com&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;response1&#x27;</span>, response1)</span><br><span class="line">  <span class="keyword">let</span> response2 = <span class="keyword">yield</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://response2.com&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;response2&#x27;</span>, response2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> gen = <span class="title function_">foo</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getGenPromise</span>(<span class="params">gen</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gen.<span class="title function_">next</span>().<span class="property">value</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getGenPromise</span>(gen).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;response-1&#x27;</span>, response)</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">getGenPromise</span>(gen)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;response-2&#x27;</span>, response)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>首先执行的是 <code>let gen = foo()</code>，创建 gen 协程</li><li>然后父协程中通过执行 gen.next 把主线程的控制权交给 gen 协程</li><li>gen 协程获取到主线程的控制权后，就调用 fetch 函数创建了一个 Promise 对象 response1，然后通过 yield 暂停 gen 协程的执行，并将 response1 返回给父协程</li><li>父协程恢复执行后，调用 response1.then 方法等待请求结果</li><li>等通过 fetch 发起的请求完成后，会调用 then 中的回调函数，then 中的回调函数拿到结果之后，通过调用 gen.next 放弃主纯种的控制权，将控制权交给 gen 协程继续执行下个请求</li></ol><blockquote><p>通常我们把执行生成器的代码封装成一个函数，并把这个执行生成器代码的函数称为执行器</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> response1 = <span class="keyword">yield</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://request.com&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;response1&#x27;</span>, response1)</span><br><span class="line">  <span class="keyword">let</span> response2 = <span class="keyword">yield</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://request1.com&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;response2&#x27;</span>, response2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">co</span>(<span class="title function_">foo</span>())</span><br></pre></td></tr></table></figure><p>生成器配合执行器，就能实现使用同步方式写出异步代码。</p><h2 id="async-await-使用了-Generator-和-Promise-两种技术"><a href="#async-await-使用了-Generator-和-Promise-两种技术" class="headerlink" title="async/await 使用了 Generator 和 Promise 两种技术"></a>async/await 使用了 Generator 和 Promise 两种技术</h2><p>async/await 技术就是 Promise 和生成器的应用，低层说就是微任务和协程应用</p><ol><li><p> async 是一个通过 <strong>异步执行</strong> 并 <strong>隐式返回 Promise</strong> 任务结果的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// async 声明的 foo 函数返回一个 Promise 对象，状态是 resolve</span></span><br><span class="line"><span class="title class_">Promise</span> &#123;&lt;resolved&gt;: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>await</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">await</span> <span class="number">100</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span>)</span><br><span class="line"><span class="title function_">foo</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>(1).  执行 console.log(0)，打印出 0<br>(2).  执行 foo 函数，foo 函数由 async 标记，当进入函数时，JavaScript 引擎会保存当前的调用栈信息，然后执行 foo 函数中的 console.log(1)，并打印 1<br>(3).  执行到 await 100 时，JavaScript 引擎会做以下事情：</p></li></ol><ul><li>默认创建一个 Promise 对象，JavaScript 引擎会将该任务提交给微任务队列<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise_ = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">100</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>JavaScript 引擎暂停当前协程的执行，将主线程的控制权交给父协程执行，同时会将 promise_ 对象返回给父协程</li><li>父协程调用 promise_.then 来监控 promise 状态改变</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> browser </tag>
            
            <tag> 浏览器工作原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器工作原理——异步WebAPI(Promise)</title>
      <link href="/2021/01/13/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%88N%EF%BC%89%E4%BD%BF%E7%94%A8Promise%EF%BC%8C%E5%91%8A%E5%88%AB%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
      <url>/2021/01/13/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%88N%EF%BC%89%E4%BD%BF%E7%94%A8Promise%EF%BC%8C%E5%91%8A%E5%88%AB%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p><font color="#f99"><strong><code>JavaScript 引入 Promise 解决了异步编码风格的问题</code></strong></font> 以下是关于异步编码中遇到的具体问题与解决方式</p></blockquote><ol><li> 代码逻辑不连续 –&gt; 封装代码，让逻辑处理线性</li><li> 回调地狱 –&gt; 消灭嵌套调用与多次错误处理</li><li> Promise 与 微任务</li></ol><h2 id="代码逻辑不连续"><a href="#代码逻辑不连续" class="headerlink" title="代码逻辑不连续"></a>代码逻辑不连续</h2><p>页面事件循环系统，页面中的任务都是在主线程上执行的，在执行如下载网络文件任务、获取摄像头等耗时任务，要放在页面主线程之外的进程或线程中去执行，避免耗时任务霸占页面主线程。</p><img  src=http://www.plantuml.com/plantuml/svg/XLB1RjD04BtlLuoKAv4QKAySaNe22MuLXssyJgmuwxBU712g54IX8LGDK2b11PfMgX2gL8fQaPeQaP_nxhedVe5nRJMkLQS77xnlvhqtyyPlENoL2jg6kjTUzJZZyh5yxZ8Gh2ufRxYC49VP4gG7mcaq9LXE0ZaU9rSbe8CJFTwEfv_DztVmWW2KjS1C1g8WDEVJf8FwqAOEVz8KZ5fGMLoqBqbkB8w2VjmTwT543Jx4lywYC5JzVQZOjZsdGnsic_TlocjJt8JRUlSBLEZ20k9h-3thi0vED-dfbySNdyQgDqAqLilSbG-9t5HOrsbnIC7yZYjp-Ek9-l4giuMuf7whDX--En--bncVZRRqC5de0tpBhRYwt7GiY_6drVkpLx96Sf6gmJTrC8o2RXGSfi7gtd2M5-MUR3BnI7XrvllfJc_9gBfSMN4xxCwAvreeNA0W-CV0u-0wl8LkRzJFSWoEpCvwoaeOjo1f9GL7gDOGZF4hkMpv1PcBxauytKYsfFlzV5xw3EdtLEzdFdrK_lTdK_sUwAsF-6AEtgg_XsRhs9o69XodxOcZIqFNpgQA3iekikWf8qSRNyU9N5vYC5GRvsaRRYNUtoo8bbvzOY0_tty0><span id="more"></span><p>上图为一个异步编程编程模型，页面主线程发起一个耗时的任务，并将任务交给另一个进程处理，页面主线程继续执行消息队列中的任务。anotherProcess 处理完这个任务后，会将任务添加渲染进程的消息队列中，并排队等待循环系统处理。排队结束后，循环系统会取出消息队列中的任务进行处理，并触发相关回调操作。</p><p>如上是页面编程的一大特点 <strong>异步回调</strong><br>web 页面的单线程架构决定了异步回调 <strong>异步回调影响到了我们的编码方式</strong></p><p><code>使用 XMLHttpRequest 实现一个下载的需求</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 失败回调</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onReject</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onResolve</span>(<span class="params">response</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;<span class="title function_">onReject</span>(e)&#125;</span><br><span class="line">xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;<span class="title function_">onReject</span>(e)&#125;</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="title function_">onResolve</span>(xhr.<span class="property">response</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">URL</span> = <span class="string">&#x27;http://test.com&#x27;</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;Get&#x27;</span>, <span class="variable constant_">URL</span>, <span class="literal">true</span>); <span class="comment">// 设置请未类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置参数</span></span><br><span class="line">xhr.<span class="property">timeout</span> = <span class="number">3000</span></span><br><span class="line">xhr.<span class="property">responseType</span> = <span class="string">&#x27;test&#x27;</span> <span class="comment">// 设置响应返回的数据格式</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;X_TEST&#x27;</span>,<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure><p>上面代码问题在于回调多，导致逻辑不连贯、不线性。接下来封装代码，降低处理异步回调次数</p><h3 id="封装异步代码，让处理流程变得线性"><a href="#封装异步代码，让处理流程变得线性" class="headerlink" title="封装异步代码，让处理流程变得线性"></a>封装异步代码，让处理流程变得线性</h3><img  src=http://www.plantuml.com/plantuml/svg/TL1DIm9H5DtFhxZeOa3IWdOFQji-MhgPPkvaCStOcsSe8HHfXWKPjSdC29FQ66qYSQ1VCr_zYzxpcJXQlCtCEUUUS--Xg3FDth4GKXOoe7XGGfV16XpbxJo5VMG5no3g1Z9rQOoKg4NK0cD5ab_EBvVBETtPLvTWsp4gHEKVOr41DGEfIs2Aw1GDjDckPd6KqH9ESBTYwmHC3lyYanMsAaNaympBJ9qo9bAALDWAe9e2pPskdDPCyHGwlIXuFubxzVZZCtpeH-sQ46yxPKXp6_xWI06O4LzTSwNlUK7p2TAciP9adsjHw-m_LkB1ssLutf8ifnE6sUnwmaFmivQ2JxWG2EwxyVlfl54kbviNXeDUq7cLTafLcIaWycx2RYV-kWaQ8t6zK-8rcUR2wOtHz-sTDE3ywcg2ZRoNo1lummj_U1mE-lwmBJlWid6OR5yS8Ceb8EBgVKNy291dIgmnKXABZokPJIRWs9kunuCXav5C9hCuy_S-SjXrh4FaqrmRD1_vz0y0><p>关注 request（输入内容）和 response (输出内容)，封装异步请求过程</p><ol><li> 把输入 http 请求的信息封装到一个 request 对象中<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// makeRequest 用于构造 request 对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeRequest</span>(<span class="params">request_url</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> request = &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;Get&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: request_url,</span><br><span class="line">    <span class="attr">headers</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">credentials</span>: <span class="literal">false</span>, <span class="comment">//安全设置</span></span><br><span class="line">    <span class="attr">sync</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">responseType</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">    <span class="attr">referrer</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">3000</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> request</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li> 封装请求过程，请求过程细节封装到 XFetch 函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * request 输入 http 的信息，如请求头、延时、返回类型等</span></span><br><span class="line"><span class="comment"> * resolve 成功回调函数</span></span><br><span class="line"><span class="comment"> * reject 失败回调函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">XFetch</span>(<span class="params">request, resolve, reject</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">  xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;<span class="title function_">reject</span>(e)&#125;</span><br><span class="line">  xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;<span class="title function_">reject</span>(e)&#125;</span><br><span class="line">  xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">state</span> == <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(xhr.<span class="property">response</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个请求</span></span><br><span class="line">  xhr.<span class="title function_">open</span>(request.<span class="property">method</span>, request.<span class="property">url</span>, request.<span class="property">sync</span>)</span><br><span class="line">  xhr.<span class="property">timeout</span> = request.<span class="property">timeout</span></span><br><span class="line">  xhr.<span class="property">requestType</span> = request.<span class="property">requestType</span></span><br><span class="line"></span><br><span class="line">  xhr.<span class="title function_">send</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li> 业务代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">XFetch</span>(</span><br><span class="line">  <span class="title function_">makeRequest</span>(<span class="string">&#x27;http://xxx.com&#x27;</span>),</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(data)&#125;,</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">error</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(error)&#125;)</span><br></pre></td></tr></table></figure><h3 id="新的问题：回调地域"><a href="#新的问题：回调地域" class="headerlink" title="新的问题：回调地域"></a>新的问题：回调地域</h3>多个接口请求相互依赖，就是存在请求之间嵌套，嵌套太多的回调函数，会使自己陷入 <strong>回调地狱</strong>，如下代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">XFetch</span>(</span><br><span class="line">  <span class="title function_">makeRequest</span>(<span class="string">&#x27;http://request1.com&#x27;</span>),</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="title class_">XFetch</span>(</span><br><span class="line">      <span class="title function_">makeRequest</span>(<span class="string">&#x27;http://request2.com&#x27;</span>),</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">response</span>) &#123;</span><br><span class="line">        <span class="title class_">XFetch</span>(</span><br><span class="line">          <span class="title function_">makeRequest</span>(<span class="string">&#x27;http://request3.com&#x27;</span>),</span><br><span class="line">          <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">response</span>) &#123;</span><br><span class="line">            ...</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">error</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">error</span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(error)&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>上面代码中， <strong>嵌套</strong> 调用，内层的任务执行依赖外层，并在上个任务的回调函数内部执行新的业务逻辑，多层嵌套，代码可读性变差；另外执行每个任务都有成功或失败两种结果，体现在代码中就需要对每个任务结果做两次判断，这样每个任务都要进行一次错误处理，使得代码混乱。</li></ol><h2 id="Promise-解决的几个核心关键点-——-消灭嵌套调用和多次错误处理"><a href="#Promise-解决的几个核心关键点-——-消灭嵌套调用和多次错误处理" class="headerlink" title="Promise 解决的几个核心关键点 —— 消灭嵌套调用和多次错误处理"></a>Promise 解决的几个核心关键点 —— 消灭嵌套调用和多次错误处理</h2><p>使用 Promise 重新构造 XFetch</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">XFetch</span>(<span class="params">request</span>)&#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">executor</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;Get&#x27;</span>, request.<span class="property">url</span>, <span class="literal">true</span>)</span><br><span class="line">    xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;<span class="title function_">reject</span>(e)&#125;</span><br><span class="line">    xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;<span class="title function_">reject</span>(e)&#125;</span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> === <span class="number">4</span>) <span class="comment">// &#x27;DONE&#x27;</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">responseText</span>, <span class="variable language_">this</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> error = &#123;</span><br><span class="line">            <span class="attr">code</span>: <span class="variable language_">this</span>.<span class="property">status</span>,</span><br><span class="line">            <span class="attr">response</span>: <span class="variable language_">this</span>.<span class="property">response</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="title function_">reject</span>(error, <span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(executor)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上：</p><ul><li>使用 Promise，调用 XFetch 时，返回一个 Promise 对象</li><li>构建 Promise 对象时，传入 executor 函数，XFetch 主要业务在 executor 中执行</li><li>如果运行在 executor 函数中的业务执行成功了，会调用 resolve 函数；如果执行失败，调用 reject 函数</li><li>在 executor 函数中调用 resolve 函数时，会触发 promise.then 设置的回调函数；而调用 reject 函数时，会触发 promise.catch 设置的回调函数</li></ul><p><strong>使用 Promise 封装后的 XFetch，来解决嵌套调用和多次异常处理的问题</strong><br>产生嵌套函数的主要原因是在发起任务请求时会带上回调函数，任务结束后，下个任务是在回调函数中处理的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x1 = <span class="title class_">XFetch</span>(<span class="title function_">makeRequest</span>(<span class="string">&#x27;http://request1.com&#x27;</span>))</span><br><span class="line"><span class="keyword">var</span> x2 = x1.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">XFetch</span>(<span class="title function_">makeRequest</span>(<span class="string">&#x27;http://request2.com&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> x3 = x2.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">XFetch</span>(<span class="title function_">makeRequest</span>(<span class="string">&#x27;http://request3.com&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line">x3.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Promise 解决嵌套回调的方式</strong></p><ol><li> Promise 实现了回调函数的延时绑定。</li><li> 需要将回调函数 onResolve 的返回值穿透到最外层<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// executor 执行业务逻辑</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">executor</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="title function_">resolve</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建 Promise 对象</span></span><br><span class="line"><span class="keyword">var</span> promiseObj1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(executor)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onResolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="comment">// 回调中可以执行下个异步请求，返回 promise 对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(value + <span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//promiseObj1.then(onResolve) 延迟执行回调函数，不存在嵌套</span></span><br><span class="line"><span class="keyword">var</span> promiseObj2 = promiseObj1.<span class="title function_">then</span>(onResolve)</span><br><span class="line"><span class="comment">// 取出上个回调返回的 promise</span></span><br><span class="line">promiseObj2.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p>Promise 通过 <strong>回调函数延迟绑定</strong> 和 <strong>回调函数返回值穿透的技术</strong> 解决<code>循环嵌套</code>的问题</p><p><strong>promise 是怎么处理异常的</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 业务处理代码</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">executor</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> rand = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(rand)</span><br><span class="line">  <span class="keyword">if</span> (rand &lt; <span class="number">0.5</span>) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p0 = <span class="keyword">new</span> <span class="title class_">Promise</span>(executor)</span><br><span class="line"><span class="keyword">var</span> p1 = p0.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success-1&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(executor)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> p2 = p1.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success-2&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(executor)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> p3 = p2.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success-3&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(executor)</span><br><span class="line">&#125;)</span><br><span class="line">p3.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;catch error&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被 onReject 函数处理或 catch 语句捕获为止</p><h2 id="Promise-与-微任务"><a href="#Promise-与-微任务" class="headerlink" title="Promise 与 微任务"></a>Promise 与 微任务</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">executor</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> demo = <span class="keyword">new</span> <span class="title class_">Promise</span>(executor)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onResolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;</span><br><span class="line">demo.<span class="title function_">then</span>(onResolve)</span><br></pre></td></tr></table></figure><p>代码执行顺序：</p><ol><li> 首先执行 new Promise 时，Promise 的构造函数会被执行</li><li> Promise 构造函数会调用参数 executor 函数。executor 中执行 resolve, resolve 内部调用 demo.then 设置的函数 onResolve</li></ol><p><strong>browmise</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Bromise</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> onResolve_ = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">var</span> onReject_ = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onResolve, onReject</span>) &#123;</span><br><span class="line">    onResolve_ = onResolve</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="comment">// 定时器推迟 onResolve_ 执行</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="title function_">onResolve_</span>(value)</span><br><span class="line">    &#125;,<span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">executor</span>(resolve, <span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">executor</span>(<span class="params">resolve, reject</span>) &#123; <span class="title function_">resolve</span>(<span class="number">100</span>)&#125;  <span class="comment">//将Promise改成我们自己的Bromsielet</span></span><br><span class="line">demo = <span class="keyword">new</span> <span class="title class_">Bromise</span>(executor)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onResolve</span>(<span class="params">value</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;</span><br><span class="line">demo.<span class="title function_">then</span>(onResolve)</span><br></pre></td></tr></table></figure><blockquote><p>onResolve_ is not a function 加入定时器让 onResolve 延迟执行<br>上面采用了定时器来推迟 onResolve 的执行，不过使用定时器的效率并不是太高，好在我们有微任务，所以 Promise 又把这个定时器改造成了微任务了，这样既可以让 onResolve_ 延时被调用，又提升了代码的执行效率</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> browser </tag>
            
            <tag> 浏览器工作原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器工作原理——宏任务与微任务</title>
      <link href="/2021/01/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%88N%EF%BC%89%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1/"/>
      <url>/2021/01/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%88N%EF%BC%89%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<ul><li>宏任务如同开会分配工作，微任务是工作过程中加入临时任务</li><li><strong>微任务——<em>实时性和效率之间一个有效的权衡</em></strong></li><li><strong>基于微任务的技术</strong>有<u>MutationObserver、 Promise 以及以 Promise 为基础开发出来的其它技术</u></li></ul><h2 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h2><table><thead><tr><th>主线程上的任务</th></tr></thead><tbody><tr><td>渲染事件（如解析 DOM、计算布局、绘制）</td></tr><tr><td>用户交互事件（如鼠标、滚动、放大缩小等）</td></tr><tr><td>JavaScript 脚本执行</td></tr><tr><td>网络请求</td></tr><tr><td>文件读写</td></tr></tbody></table><blockquote><p><strong>消息队列</strong>和<strong>事件循环机制</strong>协调主线程上的任务执行，渲染进程内部会<strong><em>维护</em>多个消息队列(如延迟队列、普通消息队列等。)<strong>。 这些消息队列中的任务称为</strong>宏任务</strong>。</p></blockquote><p>消息队列中的任务是通过事件循环执行的，以下是 WHATWG 规范中对于事件循环机制的定义：</p><pre class="mermaid">graph TDstep1(从多消息队列中选出'oldestTask') --> step2[事件循环系统记录任务开始时间]step2 --> step3[设置'oldestTask'为当前执行任务]step3 --> step4[任务完成后&#44;删除当前执行任务]step4 --> step5[消息队列中删除'oldestTask']step5 --> step6(统计执行完成的时长)</pre><h3 id="宏任务无法处理对时间精度要求较高的任务"><a href="#宏任务无法处理对时间精度要求较高的任务" class="headerlink" title="宏任务无法处理对时间精度要求较高的任务"></a>宏任务无法处理对时间精度要求较高的任务</h3><p>页面的渲染事件、各种 IO 的完成事件、执行 JavaScript 脚本的事件、用户交互的事件等，都随时有可能被添加到消息队列中。而且添加事件是由系统操作的，JavaScript<br>代码不能准确掌控任务要添加到队列中的位置，不能控制任务在队列中的位置，也就不能掌握任务开始的时间。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;demo&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javaScript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">timerCallback2</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">timerCallback1</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setTimeout</span>(timerCallback2, <span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(timerCallback1, <span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://static001.geekbang.org/resource/image/3c/15/3c2b9b474c4df544df61ebd62a7b3715.png" alt="img"><br>setTimeout 函数触发的回调函数都是宏任务。<br>图中渲染引擎将一些系统级任务（图中粉色区域）插入到了两个定时任务中间。如果中间系统级任务处理时间过长，会影响后面一个定时任务执行。<font color="#f33"><strong>宏任务时间粒度大，执行时间间隔是不能精确控制的，对一些高实时性的需求不符合。</strong></font>setTimeout 和 XMLHttpRequest 的回调被添加在宏任务中。</p><h2 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h2><p><font color="#f99"><code>异步回调的两种方式</code></font>：</p><ol><li> 把回调函数封装成一个宏任务，添加到消息队列尾部，当循环系统执行到该任务的时候执行回调函数</li><li> 第二种方式的执行时机是<u>主函数执行结束之后、当前宏任务结束之前</u>执行回调函数，通常是以微任务形式体现</li></ol><blockquote><p><strong>微任务</strong>就是一个需要异步执行的函数，执行时机是在主函数执行结束之后、当前宏任务结束之前</p></blockquote><h3 id="从-v8-引擎层面分析微任务运转"><a href="#从-v8-引擎层面分析微任务运转" class="headerlink" title="从 v8 引擎层面分析微任务运转"></a>从 v8 引擎层面分析微任务运转</h3><pre class="mermaid">graph LRstart(JavaScript 执行脚本) --> globalContext[V8 创建执行上下文&&微任务队列]</pre><p><font color="#f33">V8 创建的微任务队列只在 v8 引擎内部使用，无法通过 JavaScript 访问。<u>每个宏任务都关联一个微任务队列</u></font></p><h3 id="微任务产生的方式"><a href="#微任务产生的方式" class="headerlink" title="微任务产生的方式"></a>微任务产生的方式</h3><p>现代浏览器中产生微任务有两种方式：</p><ul><li> <strong>使用 MutationObserver 监控 DOM 节点，通过 JavaScript 来修改节点（或添加删除），当 DOM 节点发生变化时，就会产生 DOM 变化记录的微任务</strong></li><li> <strong>使用 Promise，当调用 Promise.resolve() 或 Promise.reject() 产生微任务</strong></li></ul><h3 id="微任务队列是何时被执行的时机"><a href="#微任务队列是何时被执行的时机" class="headerlink" title="微任务队列是何时被执行的时机"></a>微任务队列是何时被执行的时机</h3><p><strong><div style="text-align: center;color: #f33">一个宏任务对应的微任务的执行流程</div></strong></p><pre class="mermaid">graph TDtask1>当前宏任务中的JavaScript快要执行完成时]task2>JavaScript引擎准备退出全局执行上下文并清空调用栈时]task3{JavaScript检查全局微任务队列}task4[微任务队列]task5(按顺序执行微任务)task1 --> task3task2 --> task3task3 --> task4task4 --> task5task5 -->|执行微任务过程中产生微任务|task4task5 --> end1((微任务队列清空then执行结束))style task3 fill:#f90,stroke:#333,stroke-width:4px;style task4 fill:#f24;</pre><blockquote><p>WHATWG 把执行微任务的时间点称为<strong>检查点</strong></p></blockquote><p>如果在执行微任务的过程中，产生新微任务，同样会将该微任务添加到微任务队列中。V8 引擎一直循环执行微任务队列中的任务，直到队列为空。也就是说在执行微任务的过程中产生的新的微任务并不会推迟到下个宏任务中执行，而是在当前的宏任务中继续执行。</p><p><strong><div style="text-align: center;color: #f33">微任务示意图</div></strong></p><img  src=http://www.plantuml.com/plantuml/svg/AyxEp2j8B4hCLKZEpot8pqlDAmakgSn9LIXAJIv9p4lFIULAJYnAKNYwhl_9xjrFknOgL7Cf8DGg0FKMftg4-FeeA9kPkQ58kPObvfGcbgG69nTb5fI0vDDGv9zrBd-niEV9ZgudExgVJMi76umi_tJVEeYLBsVCVzenNK4vBJKLgWXPcMzfIM99PduUKDxC34Cse2W_DxCu5Rka4bHMhoYrE3-dB5N3K5D98R5O0Sg5UGbLKr5gRdvPgdD6PauAp4yA2hLS85mB0000><hr><img  src=http://www.plantuml.com/plantuml/svg/AyxEp2j8B4hCLKZEpot8pqlDAmakgSn9LIXAJIv9p4lFIULAJYnAKNYwhl_9xjrFknOgL7Cf8DGg0FKMftg4-FeeA9kPkQ58kPObvfGcbgG69nTb5fI0vDDGv9zrBd-niEV9ZgudExgVJMi76umi_tJVEeYLBsVCVzenNK4vBJKLgWXPcMzfIM99PduUKDxC32nRomN123LAHQd5-JbbgHg6caeAYSKAK2xCpUWswUhQmPLOAGGKvUTc5gSgFEsVzhHz5u8xPyNJlPEVTlR2W-R9ZhKGFt7LSg676j3IaiJYR4ESmGTK0ESO4WnCe6fK4KF2uGlKWoPaI33CWNhGX0oHuu7ea3R44TI6o65j20niU6n2Gnl1nnlS0000><hr><pre class="mermaid">graph TDstart(执行 parseHTML 宏任务) --> step1[JavaScript 脚本]step1[暂停parseHTML进入JavaScript执行环境] --> step2[创建微任务Promise/removeChild]step2 --> step3[添加Promise/removeChild到微任务列表]step3 --> step4[JavaScript 执行结束&#44;准备退出全局执行上下文&#44;进入检查点]step4 --> step5[JavaScript 引擎检查微任务列表&#44;发现列表中有微任务&#44;依次执行微任务]step5 --> over(任务队列清空后&nbsp;退出全局执行上下文)</pre><p>关于微任务、宏任务的几点结论：</p><ol><li> 微任务和宏任务绑定，每个宏任务执行都会创建自己的微任务队列</li><li> 微任务的执行时长影响到当前宏任务的执行时长。如一个宏任务产生了 100 个微任务，每个微任务执行时长 10 毫秒，那么宏任务被延长了 1秒钟。写代码时要注意控制微任务时长</li><li> 在一个宏任务中，分别创建了用于回调的宏任务和微任务，无论什么情况，微任务都早于宏任务执行</li></ol><h3 id="微任务是如何应用在-MutationObserver-中的"><a href="#微任务是如何应用在-MutationObserver-中的" class="headerlink" title="微任务是如何应用在 MutationObserver 中的"></a>微任务是如何应用在 MutationObserver 中的</h3><blockquote><p>MutationObserver 是用来监听 DOM 变化的一套方法（web 应用需要监听 DOM 变化并及时地做出响应）</p></blockquote><p>Web 应用使用 HTML+JavaScript 构建自定义控件，为了能让这些非固有控件与<strong>内置固有控件</strong>一起良好工作，<u>自定义控件必须能够适应内容更改、响应事件、用户交互</u>，<strong>Web 应用要监控 DOM 变化，并及时作出响应</strong></p><h4 id="早期监控-DOM-变化"><a href="#早期监控-DOM-变化" class="headerlink" title="早期监控 DOM 变化"></a>早期监控 DOM 变化</h4><p>早期不提供对监听的支持，要观察 DOM 是否变化，<strong>唯一能做的就是轮询检测</strong>，如使用 setTimeout 或者 setInterval 定时检测 DOM 是否变化。</p><p><font color="#f33">两个问题：</font></p><ol><li>如果时间间隔设置过长，DOM 变化响应不够及时</li><li>如果时间间隔设置过短，会浪费无用的工作量检查 DOM，让页面变得低效</li></ol><h4 id="2000-年引入-Mutation-Event"><a href="#2000-年引入-Mutation-Event" class="headerlink" title="2000 年引入 Mutation Event"></a>2000 年引入 Mutation Event</h4><blockquote><p><strong>Mutation Event</strong> 采用了 <strong>观察者设置模式</strong><br>当DOM 有变化时就立即触发相应的事件，<strong>这种方式属于同步回调</strong></p></blockquote><p><font color="#f99">Mutation Event 解决了实时性的问题</font>，DOM 一旦发生变化，立即调用 javaScript 接口。<br><font color="#f33">这种实时性造成了严重的性能问题，每次 DOM 变化，渲染引擎会调用 javaScript 会产生较大的性能开销。</font>比如利用 javaScript 动态创建 50 个节点，会触发 50 次回调，若每次回调执行时 2ms，500 次是 1000ms ，如果是一个动画执行，Mutation Event 触发回调会导致动画卡顿</p><h4 id="DOM4开始用-MutationObserver-替代-Mutation-Event"><a href="#DOM4开始用-MutationObserver-替代-Mutation-Event" class="headerlink" title="DOM4开始用 MutationObserver 替代 Mutation Event"></a>DOM4开始用 MutationObserver 替代 Mutation Event</h4><blockquote><p>MutationObserver API 用来监视 DOM 变化，包括其属性变化、节点增减、内容变化等</p></blockquote><p><strong><div style="text-align: center;color: #f33">Mutation Event 与 Mutation Observer</div></strong></p><table><thead><tr><th>差异点</th><th>Mutation Event</th><th>Mutation Observer</th></tr></thead><tbody><tr><td>响应函数</td><td>同步调用，每次 DOM 变化后触发调用</td><td>异步调用，多次 DOM 调用后，<strong>一次触发调用</strong><br/>使用数据结构记录所有 DOM 变化，解决频繁操纵DOM造成的影响</td></tr></tbody></table><blockquote><p>MutationObserver 采用 异步+微任务 解决性能与实时性的问题<br>  异步减少调用次数缓解性能问题，实时性的问题则交给微任务，在每次 DOM 节点发生变化时，渲染引擎将变化记录封装成微任务，并将微任务添加到队列中。当执行到检查点时，V8 引擎会按照顺序执行微任务</p></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><pre class="mermaid">graph LRstart(监听 DOM 变化) --> step1[setTimeout/setInterval轮循]step1 --> |解决响应不及时或设置时间过短造成的性能浪费| step2[Mutation Event]step2 --> |解决频繁操作dom引发的性能问题| step3(MutationObserver异步回调加微任务)</pre>]]></content>
      
      
      
        <tags>
            
            <tag> browser </tag>
            
            <tag> 浏览器工作原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器工作原理——消息队列与事件循环</title>
      <link href="/2021/01/08/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%88N%EF%BC%89%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
      <url>/2021/01/08/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%88N%EF%BC%89%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="页面事件循环系统"><a href="#页面事件循环系统" class="headerlink" title="页面事件循环系统"></a>页面事件循环系统</h2><p>了解页面到底是如何运行的<br>了解浏览器的主线程是如何动作的</p><h2 id="线程模型（一）——-主线程依照代码顺序，依次执行任务"><a href="#线程模型（一）——-主线程依照代码顺序，依次执行任务" class="headerlink" title="线程模型（一）—— 主线程依照代码顺序，依次执行任务"></a>线程模型（一）—— 主线程依照代码顺序，依次执行任务</h2><p>用单线程是<font color="#f99"><strong>按顺序，依次</strong></font>处理确定好的任务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> + <span class="number">2</span>; <span class="comment">// task1</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span> + <span class="number">3</span>; <span class="comment">// task2</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">3</span> + <span class="number">4</span>; <span class="comment">// task3</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c) <span class="comment">// task4</span></span><br></pre></td></tr></table></figure><img  src=http://www.plantuml.com/plantuml/svg/ROz12i8m44NtESM0QnSsHN3ZnYDuWhH9DRHc99s2HOJkN7WGFKCHF4qfti8qBLAiMGoyFyF_-QGfKz3Mh_PnOtij5II85E69iJpLvYYiE82Rf6Dz58RWpC2z2ArKTeCPMeYoGet4BPNEKIAHabvEqD3lfOZJdSN2o7uXCXqhlxsCSwFkGjZoJ-XioVbVgzdABPoBCgIfXEPPDVTRtmz43ZcvBcnSY4IUBYPAC57uH0dPzuDzmBkgcclTnIWZcO-QpzTzW9y31Pw2WRWdFb3eANJKUNm0><h2 id="线程模型（二）——-事件循环机制处理线程执行过程中接收的新任务"><a href="#线程模型（二）——-事件循环机制处理线程执行过程中接收的新任务" class="headerlink" title="线程模型（二）—— 事件循环机制处理线程执行过程中接收的新任务"></a>线程模型（二）—— 事件循环机制处理线程执行过程中接收的新任务</h2><p>线程运行过程中加入新的任务<br>引入 <strong>循环语句</strong> 和 <strong>事件系统</strong>，在线程执行过程中接收并处理新任务。</p><blockquote><p>采用<strong>事件循环机制</strong>，在线程运行过程中接收并执行新任务</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main thead</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// for 循环机制</span></span><br><span class="line">  <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">    <span class="type">int</span> first_num = <span class="built_in">GetInput</span>()</span><br><span class="line">    <span class="type">int</span> second_num = <span class="built_in">GetInput</span>()</span><br><span class="line">    result_num = first_num + second_num</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;result:&#x27;</span> + result_num)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// GetInput 获取用户输入，并返回</span></span><br><span class="line"><span class="type">int</span> <span class="built_in">GetInput</span>() &#123;</span><br><span class="line">  <span class="type">int</span> input_number = <span class="number">0</span>;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;请输入一个数：&quot;</span>;</span><br><span class="line">  cin&gt;&gt;input_number;</span><br><span class="line">  <span class="keyword">return</span> input_number</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li> 主线程中 <strong>引入循环机制</strong>，即在线程语句加入 for 循环，线程会一直循环执行；</li><li> <strong>引入事件</strong>,如在线程运行过程中，等待用户输入，线程暂停，接收到用户输入后，线程激活，继续执行。</li></ol><img  src=http://www.plantuml.com/plantuml/svg/PSwx2i8m50RWFKznwAI3cvENqQSGXzgBYf906WSHvwejJkAaGWTf5y6fQ2FuCasYaw-W6ElY-fzpllDR9hL1PJUL13A9n3vu-BvQ9taMv3oLsqpCq-SrbAk3NAVYaif5V8z2kJdbd8jb15Da4Sme6O7X4bggryi6c1vyGuG9Su0EUdq6n2tI6cXE4szKyLZnewPHbuonRT896FcPws8VqcCcPIriQtFak1-oI6iWvZiH1oBSw1k4YX4qActM7rX3x7XUizgf_DeLrVyMVhzcBm00><h2 id="线程模型（三）——-消息队列管理-IO-线程传递的新任务，循环机制从消息队列中取任务执行"><a href="#线程模型（三）——-消息队列管理-IO-线程传递的新任务，循环机制从消息队列中取任务执行" class="headerlink" title="线程模型（三）—— 消息队列管理 IO 线程传递的新任务，循环机制从消息队列中取任务执行"></a>线程模型（三）—— 消息队列管理 IO 线程传递的新任务，循环机制从消息队列中取任务执行</h2><img  src=http://www.plantuml.com/plantuml/svg/AyaioKbLUBPZqxFvar_id_ryHJTNSc9HYiAJ7RkVxzeFv2ea5Yla9cRcXMGKfIQcS45aFVqHafx-42c5QYu51GC5FJqxX78hXHTRMvxjcl2qQy6BlNkVhkjvrZ7XoQxk9xkt0TKQegjzkMV1imNjpvjsFctV3LTbXAxgQUksf-kQeVArN000><blockquote><p>引入 <strong>消息队列</strong> 接收其它线程发送过来的任务。<br>  <font color="#f33">使用消息队列管理IO线程传递的任务</font>，<u>队列先进行出，任务添加在队列尾部，从头部取出</u></p></blockquote><p>消息队列是一种数据结构，可以存放要执行的任务。特点<strong>先进先出</strong>，添加到尾部，从头部取出</p><img  src=http://www.plantuml.com/plantuml/svg/TP0_Jy906CRtVeetTT71Ha0IAu75EB38ucOSphP0GxaZnpaOm-2_WC10ug290p3fX8c91Ac4BzCxohVm2aWXmUtoFh_dUP_tcCqS2yJWKxIV_F7hvBsXb0isBY6AYc2GOebW2pEuLW0ka578KNA9pIFY40fRSLtN3tIbikAWbi4Gpid8ZOvOJDVtuzAXXA3g3Tp9S2mtgpEJOsKPC0BKpkKPc7P0sWG7SK4IebSmnm6LeSmGPSVObAf1CAF40JLBw7OYiICUt_nkqtDTNk-g0Ri0Lj1aCWoGdS9pHRycRZwcBsrUUvwLMlcAUM9KZYkRXCX_maamF9k_DKqx3pR-MNPtKyjwYe6e2UbCU6GwSvgd5Z9dJVP0qrABn4Fml-x5iCNh7NyquhscgBMyOSDp-nACh87JduxeL2UttxpgBf7e6i8V-hntjn0hlm00><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造队列</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskQueue</span> &#123;</span></span><br><span class="line">    pulic:</span><br><span class="line">    Task <span class="title function_">takeTask</span><span class="params">()</span> <span class="comment">// 取出队列头部的一个任务</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">pushTask</span><span class="params">(Task task)</span>; <span class="comment">// 添加一个任务队列的尾部</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主线程从队列中读取任务</span></span><br><span class="line">TaskQueue task_queue</span><br><span class="line"><span class="type">void</span> <span class="title function_">ProcessTask</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MainThred</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">        Task task = task_queue.takeTask()</span><br><span class="line">        processTask(task)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其它线程想要发送任务让主线程执行，只需要将任务添加到消息队列中就可以了。由于多个线程操作同一个消息队列，所以在添加任务和取出任务时还会加一个<strong>同步锁</strong>。</p><h2 id="线程模型（四）——-处理其它进程发送过来的任务"><a href="#线程模型（四）——-处理其它进程发送过来的任务" class="headerlink" title="线程模型（四）—— 处理其它进程发送过来的任务"></a>线程模型（四）—— 处理其它进程发送过来的任务</h2><p>如果其它线程想要发送任务给页面主线程，那么需要先通过 IPC 把任务发送给渲染进程的 IO 线程，IO 线程再把任务发送给页面主线程。</p><img  src=http://www.plantuml.com/plantuml/svg/ZP8zJy906CVtVeedkEX08o29XS1275Z4mOqm76rv2T0ZHnsCOV0j8928SL2Z2J31X8a91Ac4BqElvLj8APJoOk9Db_l__i_p_E-ka4bBUKHG3dYSosD9b6IuOW3YYCya2RwGX13EOW9xNexZZZcco1Gi1n5v6Kd9hBZRuV5mt95tvc1uH0IWWo_QUDR7xrgdEZU0hO1ZCb2quNWcEHQQiR9YGWOP0qadKp88QODFOydIuqOtH2x1j08gG456H3wH18lXiIGJd0L70fDzl_-0FhJrLcsYA6gbvJ0S2s3B40Yi5vlbCENbDT5-cLv_JbyRQld5DlGAC9kuRLhnJyhrB-hKKgBc0SkoCMRTOssMXPtEu5P8CuhnBE78wlB2aVCK4P5Wc-KGM3QuQEu3lNT7XtMrqjH78xLRe-NwP5YTA7qBTwtXqvycRPQqcs-rf6o0xZLGlU-htLiRKZI-JLGRFMdAX_bbOaoKzXxrTbbzwonF63impxbCu8FmMMZ7kCn6ZHqc-z2_><blockquote><p>渲染进程专门有一个IO线程用来接收其它线程传进来的消息，IO线程会将这些消息组装成任务发送给渲染主线程</p></blockquote><h2 id="消息队列中的任务类型"><a href="#消息队列中的任务类型" class="headerlink" title="消息队列中的任务类型"></a>消息队列中的任务类型</h2><h3 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h3><table><thead><tr><th>内部消息类型</th></tr></thead><tbody><tr><td>输入事件（鼠标事件）</td></tr><tr><td>微任务</td></tr><tr><td>文件读写</td></tr><tr><td>WebSocket</td></tr><tr><td>javaScript定时器</td></tr></tbody></table><table><thead><tr><th>页面相关的事件</th></tr></thead><tbody><tr><td>javaScript 执行</td></tr><tr><td>解析 DOM</td></tr><tr><td>样式计算</td></tr><tr><td>布局计算</td></tr><tr><td>css 动画</td></tr></tbody></table><p><font color="#f33">以上事件是在主线程中执行的，所以在编写 web 应用程序时，需要衡量这些事件所占用的时长、并解决单个任务占用主线程过久的问题。</font></p><h2 id="主线程如何安全退出"><a href="#主线程如何安全退出" class="headerlink" title="主线程如何安全退出"></a>主线程如何安全退出</h2><blockquote><p>chrome 确定退出当前页面时，页面主线程会<strong>设置一个退出标志的变量</strong>，在每次<strong>执行完一个任务时，判断是否设置退出标志</strong>。如果有，直接中断所有任务，退出线程。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">TaskQueue task_queue</span><br><span class="line"><span class="type">void</span> <span class="title function_">ProcessTask</span><span class="params">()</span></span><br><span class="line"><span class="type">bool</span> keep_running = <span class="literal">true</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MainThread</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">        Task task = task_queue.taskTask()</span><br><span class="line">        ProcessTask(task)</span><br><span class="line">        <span class="keyword">if</span>(!keep_running) <span class="keyword">break</span>; <span class="comment">// 设置退出标志后，直接退出线程循环</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="页面中使用单线程的缺点——微任务解决效率和实时性问题"><a href="#页面中使用单线程的缺点——微任务解决效率和实时性问题" class="headerlink" title="页面中使用单线程的缺点——微任务解决效率和实时性问题"></a>页面中使用单线程的缺点——微任务解决效率和实时性问题</h2><h3 id="如何处理高优先级的任务"><a href="#如何处理高优先级的任务" class="headerlink" title="如何处理高优先级的任务"></a>如何处理高优先级的任务</h3><p><font color="#f99">场景：</font>在处理监听 DOM 节点变化（即 DOM 插入、修改、删除等），根据这些变化处理相应的业务逻辑的场景。<br/><br><font color="#f99">处理方式：</font>通常是采用<strong>观察者模式</strong>——利用 javaScript<br>设计<strong>监听接口</strong>，当变化发生时，渲染引擎同步调用这些接口。<br/><br><font color="#f99">问题：</font><u>DOM 变化非常频繁，每次变化都调用直接调用相应 javaScript 接口，那么<strong>当前任务执行时间拉长，导致执行效率下降。</strong>如果将 DOM<br>变化做成异步消息事件，添加到消息队列尾部，又会<strong>影响到监控的实时性</strong>。</u></p><blockquote><p><font color="#f99">解决方式：</font><font color="#f33">微任务用来权衡实时性与效率，微任务如何权衡效率与实时性的</font><br>  消息队列中的任务称为宏任务，每个宏任务中都包含一个微任务队列。</p></blockquote><p>在执行宏任务中，DOM 有变化，那么就会将变化添加到微任务列表中，这样就不会影响到宏任务的执行。解决了执行效率问题。<br>当前宏任务执行完成，执行当前宏任务的微任务（DOM 变化的事件都保存在微任务列表中），从而解决了实时性的问题。</p><h3 id="如何解决单个任务执行过久的问题"><a href="#如何解决单个任务执行过久的问题" class="headerlink" title="如何解决单个任务执行过久的问题"></a>如何解决单个任务执行过久的问题</h3><img  src=http://www.plantuml.com/plantuml/svg/POz1IyCm5CVl-HI1ddSQ27hmuithFa7QPbjOJKhwEYmYz21CtIO3aO4WM2_pAgZ8DkcNMRRbv5SmRSRMwUM5zy_B-_q230AALzDyzTf7RUPJt1G2N76EKDHXF2IId65JWNai91pm1NA5zAay4O6Gs0rYkWaQa9XDlW2WFceA3jK9udLQKiJSjo49c4VBcyignoqcY4p-G9o3UltV2kVGXEOrvS0WmOklcVs4cgTgqiSamX4ORLHrZmh5lIGWYOZtXqv9bpGyoKB0JjCmgdSXOHpGLdCBrMcgUjC2IhcFId2jTcnnPJNT1cKFq-yuY0kWMB9MsoAFgWxBcyaw6op7dthylivx-Y7_cGzq-hoy7kdiGp-zg66cio9Kts_gVgX6ToPSFLujPZDrcw7TAiEq_cKrdN7z1G00><blockquote><p>javaScript 通过回调功能解决单个任务执行过久，造成后面任务等待时间太长，给用户卡顿的感觉。<font color="#f33">JavaScript 可以通过回调功能来规避，也就是让要执行 JavaScript<br>任务滞后执行。</font></p></blockquote><h2 id="浏览器如何运行的"><a href="#浏览器如何运行的" class="headerlink" title="浏览器如何运行的"></a>浏览器如何运行的</h2><p>开发者工具 –&gt; performance 标签 –&gt; 右上角 start profiling and load page<br><img src="https://static001.geekbang.org/resource/image/c0/1b/c0d59d5b58e387f30cc39ceb4d54f31b.png" alt="img"><br>我们点击展开了 Main 这个项目，其记录了主线程执行过程中的所有任务。图中灰色的就是一个个任务，每个任务下面还有子任务，其中的 Parse HTML 任务，是把 HTML 解析为 DOM 的任务。值得注意的是，在执行 Parse HTML 的时候，如果遇到 JavaScript 脚本，那么会暂停当前的 HTML 解析而去执行 JavaScript 脚本。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><pre class="mermaid">graph TDmodule1[主线程按顺序依次执行任务]--> module2[主线程引入循环语句与事件系统&#44;处理执行过程中接收的新任务]module2 --> module3[主线程与消息队列解决其它线程发送的任务]module3 --> module4[其它线程通过IPC把任务发送给渲染进程的IO线程&#44IO线程把任务发送给主线程]module4 --> module5[引入微任务解决效率与实时性问题]</pre>]]></content>
      
      
      
        <tags>
            
            <tag> browser </tag>
            
            <tag> 浏览器工作原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器工作原理——浏览器中的 setTimeout和XMLHttpRequest 是怎么实现的</title>
      <link href="/2021/01/08/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%88N%EF%BC%89%E5%BC%82%E6%AD%A5%E7%9B%B8%E5%85%B3%E7%9A%84webAPI/"/>
      <url>/2021/01/08/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%88N%EF%BC%89%E5%BC%82%E6%AD%A5%E7%9B%B8%E5%85%B3%E7%9A%84webAPI/</url>
      
        <content type="html"><![CDATA[<p>setTimeout + XMLHttpRequest <strong>浏览器循环系统是怎么工作的</strong>，粗时间颗粒度的任务<br>循环 + 任务队列</p><h2 id="关于-setTimeout"><a href="#关于-setTimeout" class="headerlink" title="关于 setTimeout"></a>关于 setTimeout</h2><p><code>setTimeout</code> 不是由 ECMAScript 维护，而是由 host environment 提供，具体遵循的规范由 whatwg 维护</p><h3 id="关于-setTimeout-的几点描述"><a href="#关于-setTimeout-的几点描述" class="headerlink" title="关于 setTimeout 的几点描述"></a>关于 setTimeout 的几点描述</h3><ul><li>  If timeout is less than 0, than timeout to 0</li><li>If nesting(嵌套) level is greater than 5, and timeout is less than 4, than set timeout to 4<br>  <strong>嵌套层级5级 + timeout 小于 4ms，设置 timeout 4ms</strong>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// level 1</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// level 2</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">// level 3</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// level 4</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">          <span class="comment">// level 5</span></span><br><span class="line">        &#125;,<span class="number">0</span>) </span><br><span class="line">      &#125;,<span class="number">0</span>) </span><br><span class="line">    &#125;,<span class="number">0</span>)  </span><br><span class="line">  &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li>  Increment nesting level by one</li><li>  let task’s timer nesting level be nesting level</li></ul><h2 id="setTimeout-的使用"><a href="#setTimeout-的使用" class="headerlink" title="setTimeout 的使用"></a>setTimeout 的使用</h2><h2 id="浏览器中的-setTimeout-是怎么实现的"><a href="#浏览器中的-setTimeout-是怎么实现的" class="headerlink" title="浏览器中的 setTimeout 是怎么实现的"></a>浏览器中的 setTimeout 是怎么实现的</h2><h3 id="chromium-中-setTimeout-的实现"><a href="#chromium-中-setTimeout-的实现" class="headerlink" title="chromium 中 setTimeout 的实现"></a>chromium 中 setTimeout 的实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户转发的最大间隔时间</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> maxIntervalForUserGestureForwarding = <span class="number">1000</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> maxTimerNestingLevel = <span class="number">5</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">double</span> oneMillisecond = <span class="number">0.001</span>; <span class="comment">//s</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">double</span> minimumInterval = <span class="number">0.004</span>; <span class="comment">//s</span></span><br><span class="line"><span class="type">double</span> intervalMilliseconds = std::<span class="built_in">max</span>(oneMillisecond, interval * oneMillisecond)</span><br><span class="line"><span class="keyword">if</span> (intervalMilliseconds &lt; minimumInterval &amp;&amp; m_nestingLevel &gt;= maxTimerNestingLevel) intervalMilliseconds = </span><br><span class="line">minimumInverval</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * chromium uses a minimum timers interval of 4ms. we&#x27;d like to go lower. however, there are poorly coded websites </span></span><br><span class="line"><span class="comment">  out there which do create CPU-spnning loops. using 4ms prevents the CPU from spinning too busily and provides a </span></span><br><span class="line"><span class="comment">  balance between CPU spinning and the smallest possible interval timer</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><h4 id="分析-chromium-中-setTimeout-的实现"><a href="#分析-chromium-中-setTimeout-的实现" class="headerlink" title="分析 chromium 中 setTimeout 的实现"></a>分析 chromium 中 setTimeout 的实现</h4><p>三个常量</p><ul><li>  <code>maxTimerNestingLevel = 5</code> 嵌套层级最多是 5</li><li>  <code>minimumInterval=0.004</code> 最小延迟</li><li><code>std::max(oneMillisecond, interval * oneMillisecond)</code> 在 1ms 和 延尽时间之间取一个最大值。<u>也就是说，在不满足嵌套层级的情况下，最小延迟时间是 1ms</u>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Version 91.0.4472.114 (Official Build) (x86_64)</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="variable language_">console</span>.<span class="property">log</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="variable language_">console</span>.<span class="property">log</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="variable language_">console</span>.<span class="property">log</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="variable language_">console</span>.<span class="property">log</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  1</span></span><br><span class="line"><span class="comment">  0</span></span><br><span class="line"><span class="comment">  2</span></span><br><span class="line"><span class="comment">  3</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure></li></ul><p>浏览器页面是由消息队列和事件循环系统来驱动的。<br>渲染进程中所有运行在主线程上的任务都需要先添加到消息队列中，事件循环系统再按照顺序执行消息队列中的任务。如下：</p><ul><li>接收到 html 文档数据时，渲染引擎会将 <code>解析 DOM 事件</code> 添加到消息队列；</li><li>用户改变窗口大小时，渲染引擎会将 <code>重新布局</code> 事件添加到消息队列中；</li><li>触发 JavaScript 垃圾回收机制时，渲染引擎会将 <code>垃圾回收任务</code> 添加到消息队列；</li><li>执行一段异步 JavaScript 代码时，也会将<code>执行任务</code>添加到消息队列</li></ul><p>setTimeout 定时器，用来指定回调函数参数多少毫秒后执行。返回一个整数，作为定时器编号。同时可以通过这个编号取消定时器。<br><code>** setTimeout 需要在指定时间执行回调函数，而消息队列中任务是按顺序先进先出。Chrome 的解决办法是维护了另外一个需要延迟的执行任务的消息队列。这个消息队列中包括了定时器和 Chromium 内部一些需要延迟的任务 **</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// chrominum 中延迟代码的定义</span><br><span class="line">DelayedIncomingQueue delayed_incoming_queue;</span><br></pre></td></tr></table></figure><blockquote><p>模拟代码 —— 创建回调任务，并添加至延迟队列中<br>创建回调任务 delayTask<br>回调函数、发起时间、延迟时间</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">struct DelayTask &#123;</span><br><span class="line">  int64 id;</span><br><span class="line">  CallBackFunction cbf;</span><br><span class="line">  int start_time; // 发起时间</span><br><span class="line">  int delay_time; // 迟延时间</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DelayTask timerTask;</span><br><span class="line">timerTask.cbf = showName;</span><br><span class="line">timerTask.start_time = getCurrentTime(); // 获取当前时间</span><br><span class="line">timerTask.delay_time = 200;  // 设置延迟时间</span><br><span class="line"></span><br><span class="line">// 将任务添加到延迟执行队列中</span><br><span class="line">delay_incoming_queue.push(timerTask)</span><br></pre></td></tr></table></figure><p>如上通过定时器发起的任务就添加至了延迟队列，那么事件循环系统如何触发延迟队列？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void ProcessDelayTask() &#123;</span><br><span class="line">  // 从 delay_incoming_queue 中取出到期的任务</span><br><span class="line">  // 今次执行任务</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 主线程从任务队列中读取任务</span><br><span class="line">TaskQueue task_queue;</span><br><span class="line">void ProcessTask();</span><br><span class="line">bool keep_running = true;</span><br><span class="line">void MainThread() &#123;</span><br><span class="line">  for(;;)&#123;</span><br><span class="line">    Task task = task_queue.takeTask(); // 队列中取出任务</span><br><span class="line">    processTask(task); //执行任务</span><br><span class="line"></span><br><span class="line">    ProcessDelayTask(); // 执行延迟队列中的任务</span><br><span class="line"></span><br><span class="line">    if (!keep_running) break; // 如果设置了退出标志，直接退出线程循环</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ProcessDelayTask 函数根据发起时间和延迟时间计算出到期任务，然后依次执行这些任务。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清除定时器</span></span><br><span class="line"><span class="built_in">clearTimeout</span>(timer_id)</span><br></pre></td></tr></table></figure><p>取消定时器浏览器实现方式是从 delayed_incoming_queue 延迟队列中，通过 ID 查找对应任务，然后删除。</p><h3 id="使用-setTimeout-的注意事项"><a href="#使用-setTimeout-的注意事项" class="headerlink" title="使用 setTimeout 的注意事项"></a>使用 setTimeout 的注意事项</h3><ol><li><p>如果当前任务执行时间过久，会影响定时器任务的执行<br>很多因素会导致回调函数执行比设定的预期值要久<br>当前任务执行时间过久从而导致定时器设置的任务被延后执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bar&#x27;</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(bar, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">5000</span>; i++) <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure><p>执行 foo 函数所消耗的时长是 500 毫秒，这也就意味着通过 setTimeout 设置的任务会被推迟到 500 毫秒以后再去执行，而设置 setTimeout 的回调延迟时间是 0。</p></li><li><p>如果 setTimeout 存在嵌套调用，那么系统会设置最短时间间隔为 4 毫秒<br>也就是说在定时器函数里面嵌套调用定时器，也会延长定时器的执行时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">cb</span>(<span class="params"></span>) &#123;<span class="built_in">setTimeout</span>(cb, <span class="number">0</span>);&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(cb, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">static const int kMaxTimerNestingLevel = 5;</span><br><span class="line">static constexpr base::TimeDelta kMinimumInterval = base::TimeDelta::FromMilliseconds(4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">base::TimeDelta interval_milliseconds =</span><br><span class="line">      std::max(base::TimeDelta::FromMilliseconds(1), interval);</span><br><span class="line"></span><br><span class="line">  if (interval_milliseconds &lt; kMinimumInterval &amp;&amp;</span><br><span class="line">      nesting_level_ &gt;= kMaxTimerNestingLevel)</span><br><span class="line">    interval_milliseconds = kMinimumInterval;</span><br><span class="line"></span><br><span class="line">  if (single_shot)</span><br><span class="line">    StartOneShot(interval_milliseconds, FROM_HERE);</span><br><span class="line">  else</span><br><span class="line">    StartRepeating(interval_milliseconds, FROM_HERE);</span><br></pre></td></tr></table></figure><p>定时器被嵌套调用 5 次以上，系统会判断该函数方法被阻塞了，如果定时器的调用时间间隔小于 4 毫秒，那么浏览器会将每次调用的时间间隔设置为 4 毫秒.所以，一些实时性较高的需求就不太适合使用 setTimeout 了</p><ol start="3"><li><p>未激活的页面，setTimeout 执行最小间隔是 1000 毫秒<br>未被激活的页面中定时器最小值大于 1000 毫秒，也就是说，如果标签不是当前的激活标签，那么定时器最小的时间间隔是 1000 毫秒，目的是为了优化后台页面的加载损耗以及降低耗电量</p></li><li><p>延时执行时间有最大值<br>Chrome、Safari、Firefox 都是以 32 个 bit 来存储延时值的，32bit 最大只能存放的数字是 2147483647 毫秒，这就意味着，如果 setTimeout 设置的延迟值大于 2                                                                         147483647 毫秒（大约 24.8 天）时就会溢出，那么相当于延时值被设置为 0 了，这导致定时器会被立即执行。如果将延时值修改为小于 2147483647 毫秒的某个值，那么执行时就没有问题了。</p></li><li><p>使用 setTimeout 设置的回调函数中的 this 不符合直觉</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MyObj</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">showName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="title class_">MyObj</span>.<span class="property">showName</span>,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>这段代码在编译的时候，执行上下文中的 this 会被设置为全局 window，如果是严格模式，会被设置为 undefined。</p></li></ol><h2 id="浏览器中的-XMLHttpRequest-是怎么实现的"><a href="#浏览器中的-XMLHttpRequest-是怎么实现的" class="headerlink" title="浏览器中的 XMLHttpRequest 是怎么实现的"></a>浏览器中的 XMLHttpRequest 是怎么实现的</h2><p>XMLHttpRequest 提供了从 Web 服务器获取数据的能力，如果你想要更新某条数据，只需要通过 XMLHttpRequest 请求服务器提供的接口，便可以获取到服务器的数据，然后操作 DOM 更新页面内容，整个过程只需要更新见面的一部分就可以了，不用刷新整个页面，这样既有效率又不会打扰用户。</p><h3 id="同步回调、异步调用"><a href="#同步回调、异步调用" class="headerlink" title="同步回调、异步调用"></a>同步回调、异步调用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> callback = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is a callback function&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doWork</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start do work&#x27;</span>)</span><br><span class="line">  <span class="title function_">cb</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end do work&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">doWork</span>(callback)</span><br></pre></td></tr></table></figure><p>如上，将函数 callback 作为参数传递给函数 doWork，那么作为参数的函数 callback 就是 <strong>回调函数</strong>。<br>如上，回调函数 callback 是在主函数 doWork 返回之前执行的，这个回调过程称为 <strong>同步回调</strong>。</p><h3 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> callback = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fingers crossed&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doWork</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;to do homework&#x27;</span>)</span><br><span class="line">  <span class="built_in">setTimeout</span>(cb, <span class="number">1000</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end do homework&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">doWork</span>(callback)</span><br></pre></td></tr></table></figure><p>如上，doWork 函数中使用了 setTimeout 函数让 cb 在主函数 doWork 执行完后延迟 1 秒执行。callback 没有在函数内部调用。回调函数在主函数外部执行的过程称为 <strong>异步回调</strong></p><h3 id="系统调用栈"><a href="#系统调用栈" class="headerlink" title="系统调用栈"></a>系统调用栈</h3><p>消息队列与主线程循环机制保证了页面有条不紊地运行<br>当循环系统在执行一个任务的时候，都要为这个任务维护一个 <strong>系统调用栈</strong><br>系统调用栈的信息可以通过 <code>chrome://tracing/</code> 抓取<br>也可以通过 Performance 来抓取它的核心调用信息。<br><a href="https://static001.geekbang.org/resource/image/d3/77/d3d66afb1a103103e5c3f86c823efb77.png">img</a></p><h2 id="XMLHttpRequest-运作机制"><a href="#XMLHttpRequest-运作机制" class="headerlink" title="XMLHttpRequest 运作机制"></a>XMLHttpRequest 运作机制</h2><img  src=http://www.plantuml.com/plantuml/svg/RL9DJrD15DtFhxWfctR1IrYsH3ScZIGGyMDXqh1ulZVzY31JvqsjXZInYjg0H0p4Bnh0kEcEQYAGLksVOUOzLlu5xymyj50MxoLppxdtddDoIS1NwfnH9a6VVDVxsybeD-vjW1-1e2oaOb7mW4OHJ1MBHLWb084lmfHxUZAC1wCBz0M_nivR31lvd4d1bo5JvY8xEvlB679GjfXXtwiAweSmFNtTLLluFMhG1WLzrD7jmxEF-whpmJIju52_GczRq0qldGw7QlqBMx8lnYK5KQjK9V0of9150FGnlWvSpPPGhk6d6iz3o3Y6vtcPIuW3PjpULYhKXZ5towL0i92oh9s9H0gWthvNhmUfYXOXfVZNktZOTQ4l6PECoYON3__57kRpnFgIl6vSJU1-Y6kNgOGdLG7N46_2_ONvcrBMxr3CCPBP718Gz3WpIJ-Df2zfKFLPXIA_t621h76MpS4gkZQcF2zjYD00TkFVHajAJVf0TpTHk_hKisgnS9UAnxM0mbG-7n8oUGKcYOkY2tEBDyWb7uRrVrW1aiDZ_UrvycDD3xR8s9Ohfe7QtbI3dPHxnTpq40g0UxFZWQl-gsIqetRtuizhyVgHVjPM_NRozQNkRBcUFp_VkBjHtTxuDQh-xxCNlTnV><p>** XMLHttpRequest 的用法 ** 使用 XMLHttpRequest 来请求数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getWebData</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="comment">// 新建 XMLHttpRequest 请求对象</span></span><br><span class="line">  <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注册相关事件回调函数</span></span><br><span class="line">  <span class="comment">// onreadystatechange 监控请求过程中的状态</span></span><br><span class="line">  xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (xhr.<span class="property">readyState</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求初始化&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;OPENED&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;HEADERS_RECEIVED&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;LOADING&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">state</span> == <span class="number">200</span> || <span class="variable language_">this</span>.<span class="property">state</span> == <span class="number">304</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">responseText</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;DONE&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 注册回调函数 ontimeout 用来监控后台请求是否超时</span></span><br><span class="line">  xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ontimeout&#x27;</span>)&#125;</span><br><span class="line">  xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onerror&#x27;</span>)&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打开请求</span></span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;Get&#x27;</span>, <span class="variable constant_">URL</span>, <span class="literal">true</span>) <span class="comment">// 创建一个 Get 请求，异步</span></span><br><span class="line">  xhr.<span class="property">timeout</span> = <span class="number">3000</span> <span class="comment">// 3000 毫秒后还没有响应则判断为请求失败</span></span><br><span class="line">  xhr.<span class="property">responseText</span> = <span class="string">&quot;text&quot;</span> <span class="comment">// 配置服务器返回的格式，将服务器数据转换为自己想要的格式，这里为 utf-16 的字符串</span></span><br><span class="line">  xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;X_TEST&quot;</span>,<span class="string">&#x27;helen_tests&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发送请求</span></span><br><span class="line">  xhr.<span class="title function_">send</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li> 创建 XMLHttpRequest 对象，来执行实际的网络请求操作 <code>let xhr = new XMLHttpRequest()</code></li><li>为 xhr 对象注册回调函数<br> 后台执行任务可以通过回调函数来告诉执行结果<br> XMLHttpRequest 的回调函数主要有以下几种：<ul><li>ontimeout 监控超时请求，如果后台请求超时了，调用该函数</li><li>onerror 监控出错信息，如果后台请求出错，调用该函数</li><li>onreadystatechange 监控后台请求过程中的状态。如：监控 http 头加载完成的信息、http 响应体消息、数据加载完成消息等。</li></ul></li><li>配置基本的请求信息<br> <code>xhr.open</code> 配置基础的请求信息，包括：请求地址、请求方法、请求方式<br> 配置其它可选信息 xhr.timeout = 3000 配置超时信息<br> 其它可选配置信息 xhr.responseText = “text” 下表为返回数据类型<table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>“”</td><td>将 responseText 设置为空字符串，默认类型 UTF-16 字符串</td></tr><tr><td>“text”</td><td>返回 UTF-16字符串文本</td></tr><tr><td>“json”</td><td>response 是一个 JavaScript 对象</td></tr><tr><td>“document”</td><td>response 是一个 DOM 对象</td></tr><tr><td>“blob”</td><td>response 是一个包含二进制数据的 Blob 对象</td></tr><tr><td>“arraybuffer”</td><td>response 是一个包含二进制数据的 JavaScript ArrayBuffer</td></tr><tr><td>如果 xhr.responseText = json 那么系统会自动将服务器返回的数据转换为 JavaScript 对象格式</td><td></td></tr><tr><td>其它可选配置 xhr.setRequestHeader 来添加自己专用的请求头属性</td><td></td></tr></tbody></table></li><li>发起请求<br> 经过 2、3 步，一切准备就绪后 xhr.send() 发起请求<br> 渲染进程会将请求发送给网络进程，然后网络进程负责资源下载，等网络进程接收到数据之后，就会利用 IPC 来通知渲染进程；渲染进程接收到消息之后，会将 xhr 的回调函数封装成任务并添加到消息队列中，等主线程循环系统执行到该任务的时候，会根据相关状态调用回调函数。<ul><li>网络请求超时：xhr.ontimeout</li><li>请求出错：xhr.onerror</li><li>正常接收： xhr.onreadystatechange 返馈相应状态</li></ul></li></ol><h3 id="XMLHttpRequest-使用过程中的“坑”"><a href="#XMLHttpRequest-使用过程中的“坑”" class="headerlink" title="XMLHttpRequest 使用过程中的“坑”"></a>XMLHttpRequest 使用过程中的“坑”</h3><ol><li><p> 跨域问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>(); <span class="comment">//  1.  新建 XMLHttpRequest 网络请求对象</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;http://img-ads.csdn.net/2018/201811150919211586.jpg &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理请求过程中的状态(onreadystatechange 监控后台请求过程中的状态)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (xhr.<span class="property">readyState</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求初始化&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;OPENED&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;HEADERS_RECEIVED&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;LOADING&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">state</span> === <span class="number">200</span> || <span class="variable language_">this</span>.<span class="property">state</span> === <span class="number">304</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">responseText</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;DONE&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callOtherDomain</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2. 注册相关回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = handler</span><br><span class="line">    xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;request timeout&#x27;</span>)&#125;</span><br><span class="line">    xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>)&#125;</span><br><span class="line">    <span class="comment">// 3. 配置基础请求信息</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">true</span>)</span><br><span class="line">    xhr.<span class="property">timeout</span> = <span class="number">3000</span></span><br><span class="line">    xhr.<span class="property">responseText</span> = <span class="string">&#x27;json&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 发送请求</span></span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">callOtherDomain</span>()</span><br></pre></td></tr></table></figure><blockquote><p>Access to XMLHttpRequest at ‘<a href="https://time.geekbang.org/&#39;">https://time.geekbang.org/&#39;</a> from origin ‘<a href="http://localhost:4000&#39;">http://localhost:4000&#39;</a> has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource.<br>由于跨域导致访问失败</p></blockquote></li><li><p> HTTPS 混合内容的问题<br>HTTPS 混合内容是 HTTPS 页面中包含了不符合 HTTPS 安全要求的内容，比如包含了 HTTP 资源，通过 HTTP 加载的图像、视频、样式表、脚本等，都属于混合内容。</p><blockquote><p>Mixed Content: The page at ‘<a href="https://www.ximalaya.com/waiyu/18797993/243864198&#39;">https://www.ximalaya.com/waiyu/18797993/243864198&#39;</a> was loaded over HTTPS, but requested an insecure XMLHttpRequest endpoint ‘<a href="http://img-ads.csdn.net/2018/201811150919211586.jpg&#39;">http://img-ads.csdn.net/2018/201811150919211586.jpg&#39;</a>. This request has been blocked; the content must be served over HTTPS.<br>通过 HTML 文件加载的混合资源，虽然给出警告，但大部分类型还是能加载的。而使用 XMLHttpRequest 请求时，浏览器认为这种请求可能是攻击者发起的，会阻止此类危险的请求。</p></blockquote></li></ol><p>XMLHttpRequest 发起请求，是由浏览器的其他进程或者线程去执行，然后再将执行结果利用 IPC 的方式通知渲染进程，之后渲染进程再将对应的消息添加到消息队列中</p>]]></content>
      
      
      
        <tags>
            
            <tag> browser </tag>
            
            <tag> 浏览器工作原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器工作原理——JavaScript数据存储</title>
      <link href="/2020/12/10/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94Javascript%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
      <url>/2020/12/10/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94Javascript%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<p>JavaScript 内存机制</p><ul><li><input disabled="" type="checkbox"> JavaScript 内存中的存储</li><li><input disabled="" type="checkbox"> 处理垃圾回收</li><li><input disabled="" type="checkbox"> v8 中执行</li></ul><h2 id="1-JavaScript-是什么类型的语言"><a href="#1-JavaScript-是什么类型的语言" class="headerlink" title="1. JavaScript 是什么类型的语言"></a>1. JavaScript 是什么类型的语言</h2><p><strong>静态语言</strong> 在使用之前就需要确认其变量数据类型。如 C 语言<br><strong>动态语言</strong> 在运行过程中需要检查数据类型的语言。如 JavaScript<br><strong>弱类型语言</strong> 运行过程中支持隐式转换的语言。C 和 JavaScript 都支持隐式转换，都是弱类型语言<br><strong>强类型语言</strong> 运行过程中不支持隐式转换的语言。如 Ruby<br>【具体可参考以下象限图】<br><img src="https://static001.geekbang.org/resource/image/36/f0/36f0f5bdce0a6d8c36cbb8a76931cff0.png" alt="img"></p><span id="more"></span><h2 id="2-JavaScript-7-种数据类型"><a href="#2-JavaScript-7-种数据类型" class="headerlink" title="2. JavaScript 7 种数据类型"></a>2. JavaScript 7 种数据类型</h2><blockquote><p>JavaScript 是弱类型动态语言，不需要在使用前定义变量类型，运行过程中同一变量可以存不同数据类型</p></blockquote><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Number</td><td>可以是整数或带小数点的浮点数，采用 IEEE 754 双精确度（64 位）格式存储，计算浮点数时，需要注意 0.1+0.2=0.30000000000000004</td></tr><tr><td>String</td><td>0或0个以上字符由，’’或””包裹。原字符串不是对象类型，为方便使用，JavaScript引擎会自动转成对象类型，有 length 属性</td></tr><tr><td>Boolean</td><td>任何类型都会转成布尔类型，false,0,’’,NaN, null, undefined 转换为 false; 其它转换为 true。</td></tr><tr><td>Undefined</td><td>变量未声明或声明未赋值 typeof a === ‘undefined’(a 是不存在的变量)</td></tr><tr><td>Null</td><td>空值，清除某个值时可赋值为 null</td></tr><tr><td>Object</td><td>Function,Array,Date 等，都为对象类型。JavaScript 中的对象可以看作是属性的集合</td></tr><tr><td>Symbol</td><td>符号类型，是唯一的并且不可修改，常作为 Object 的 key。通过 Symbol() 函数产生</td></tr></tbody></table><p>几点注意事项：</p><ul><li>typeof Null 返回 Object，这个是 JavaScript bug，为兼容老代码一直未修复；</li><li>isNaN(Number(‘hello’)) // true 检查无意义的运算，NaN 无效的数字。</li><li>非严格模式下，null === undefined 是 true，严格模式下 false。</li><li>isFinite(2/0) 检查是 2/0 否为有限数</li><li>Object 是引用类型，其它为原始类型。</li></ul><h2 id="3-内存空间"><a href="#3-内存空间" class="headerlink" title="3. 内存空间"></a>3. 内存空间</h2><p>JavaScript 执行过程中，主要有三种内存空间，分别是代码空间、栈空间、堆空间。</p><img  src=http://www.plantuml.com/plantuml/svg/IquiIb5usjRwTEsCPoiMFftNhQ2SbfQc4CrbasHdavoVarzabPHJcchtPFVYvmiQdw_SzNBwbaSDKu3eQV_wPvtBNopiWKZPw8DLszde9zbnwG81aWdfHQcfUNRF5dH0zB_Vq_5YG_FpAIk08k_tT4ACKm2wu6dJ2gYHExgUxEX-DgqTdwb5gIbsJnUqGSn4KHWB0000><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="string">&#x27;memory space&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> c = &#123;<span class="attr">name</span>: <span class="string">&#x27;helen&#x27;</span>&#125;</span><br><span class="line">  <span class="keyword">var</span> d = c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img  src=http://www.plantuml.com/plantuml/svg/oqqiKCX81HBLN0fF-sUyREz_Eg5NmTOEncdOmwLWQ6XW21JYKj3JqmFJG04Ja9hglCJSL2i5zOpKdDGyzLgkMYwkufB4v6o55nkQdqzPyMn11yXOXUJ4eXG5fRJyV8MdxNkVJTtmh7FvYuKzJtPqFTdH_MnQkvA2ifbP6bYbWa8kq2b0bH3Rd_UjVxgeMK4vBGqchO3JaM2G218qX7AIG9pSrDpyeag5ueB4v5IeUBA2bguTsDDm0P0ke9-W_1Hq1Iae2e2-H7BfY_MzppPF9T6bjLmG30cPfwqhdcvi81GgE8C4NuYabUObbsJcvu5S2fA6yJKq5Qg1iLaBTmt43foU8S8lwB6c6wrSKfIO1mpvejIyabXTEnGVSDK20000><p>**<br>对象类型是存储在 heap，stack 中保存对象引用地址，JavaScript 通过栈中的引用地址访问。</p><blockquote><p>原始类型保存的栈中，对象类型保存在堆中。堆中只保存对象类型的引用地址，JavaScript引擎通过栈的引用地址进行访问</p></blockquote><p>JavaScript 引擎是需要用栈来维护程序执行期间上下文的状态，如果栈空间太大，所有的数据都存放在栈里，会影响上下文的切换效率，进而影响到整个程序的执行效率。<br>如上 demo，foo 函数结束后，foo 函数执行上下文会被回收，指针移动到全局执行上下文。<br>所以通常情况下 <strong>栈如果设置过大，会影响切换效率，所以栈是用存放一些原始类型的小数据</strong>，引用类型数据占用空间较大，故这类数据会存在在堆中，<strong>堆空间大，存放数据多。但分配内存和回收内存占时间长</strong><br>JavaScript 中，<code>原始类型的赋值会完全复制变量的值，而引用类型的赋值是复制引用地址</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;helen&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> test1 = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> test2 = <span class="number">2</span></span><br><span class="line">  <span class="keyword">var</span> innerBar = &#123;</span><br><span class="line">    <span class="attr">setName</span>: <span class="keyword">function</span>(<span class="params">newName</span>) &#123;</span><br><span class="line">      name = newName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(test1)</span><br><span class="line">      <span class="keyword">return</span> name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> innerBar</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = <span class="title function_">foo</span>()</span><br><span class="line">bar.<span class="title function_">setName</span>(<span class="string">&#x27;zhang&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="title function_">getName</span>())</span><br></pre></td></tr></table></figure><ol><li> 当 JavaScript 引擎执行 foo 函数时，会先编译，创建空执行上下文；</li><li> 编译内部函数 setName 时，由于内部函数引用外部函数变量，于是堆内存空间创建一个 “closure(foo)” 保存变量 name;</li><li> 编译内部函数 getName 时，函数内部引用了外部函数变量 test1，于堆内存中的 “closure(foo)” 保存变量 test1</li><li> foo 函数执行结束后，返回的 getName, setName 与 closure(foo) 存在引用关系。<blockquote><p>产生闭包的核心有两步：一是需要预扫描内部函数；二是把内部函数引用 的外部变量保存在堆内存中</p></blockquote></li></ol><p>JavaScript 中变量没有数据类型，只有值有数据类型</p><h2 id="4-垃圾回收"><a href="#4-垃圾回收" class="headerlink" title="4. 垃圾回收"></a>4. 垃圾回收</h2><h3 id="4-1-垃圾回收策略-——-手动回收"><a href="#4-1-垃圾回收策略-——-手动回收" class="headerlink" title="4-1. 垃圾回收策略 —— 手动回收"></a>4-1. 垃圾回收策略 —— <strong>手动回收</strong></h3><p>C/C++ 是使用手动回收策略，何时分配内存、何时销毁内存都是由代码控制</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在堆中分配内存</span></span><br><span class="line"><span class="type">char</span>* p = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">2048</span>);  <span class="comment">//在堆空间中分配2048字节的空间，并将分配后的引用地址保存到p中</span></span><br><span class="line"><span class="comment">//使用p指向的内存</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//....</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用结束后，销毁这段内存</span></span><br><span class="line"><span class="built_in">free</span>(p)；</span><br><span class="line">p = <span class="literal">NULL</span>；</span><br></pre></td></tr></table></figure><p>C 语言，使用 malloc 函数分配内存，然后再使用。如果不再需要这块数据，使用 free 函数来释放内存。如果这段数据不再需要，又没有主动调用 free 函数销毁，就会发生 <strong>内存泄漏</strong></p><h3 id="4-2-垃圾回收策略-——-自动回收"><a href="#4-2-垃圾回收策略-——-自动回收" class="headerlink" title="4-2. 垃圾回收策略 —— 自动回收"></a>4-2. 垃圾回收策略 —— <strong>自动回收</strong></h3><p>Java、JavaScript、Python 等语言，产生的垃圾数据是由垃圾回收器来释放的，不需要手动释放。</p><h3 id="4-2-1-调用栈中的数据是如何回收的"><a href="#4-2-1-调用栈中的数据是如何回收的" class="headerlink" title="4-2-1. 调用栈中的数据是如何回收的"></a>4-2-1. 调用栈中的数据是如何回收的</h3><h2 id="编译器和解释器"><a href="#编译器和解释器" class="headerlink" title="编译器和解释器"></a>编译器和解释器</h2><p>执行程序前，需要将代码翻译成机器能的语言。根据语言的执行流程，可分为编译型语言和解释型语言。<br><strong>编译型语言</strong> 在程序执行之前，需要经过编译器编译的过程，并且编译之后会直接保留机器能懂的二进制文件，这样每次运行程序时，都可以直接运行该二进制文件，这样每次运行程序时，都可以直接运行该二进制文件，而不需要每次重新编译。</p><pre class="mermaid">  graph LR;  源代码 -->|词法分析<br/>语法分析| 抽象语法树AST;  抽象语法树AST -->|词义分析| 中间代码;  中间代码 -->|代码优化| 二进制文件;  二进制文件 -->|直接执行|执行</pre><p><strong>解释型语言</strong> 在每次运行时都要通过解释器对程序进行动态解释和执行</p><pre class="mermaid">  graph LR;  源代码 -->|词法分析<br/>语法分析| 抽象语法树AST;  抽象语法树AST -->|词义分析| 字节码;  字节码 -->|解释执行| 执行;</pre><h2 id="JavaScript-是属于解释型语言，-V8-是如何执行一段-JavaScript-代码的？"><a href="#JavaScript-是属于解释型语言，-V8-是如何执行一段-JavaScript-代码的？" class="headerlink" title="JavaScript 是属于解释型语言， V8 是如何执行一段 JavaScript 代码的？"></a>JavaScript 是属于解释型语言， V8 是如何执行一段 JavaScript 代码的？</h2><pre class="mermaid">  graph LR;  源代码 --> |语法分析<br/>词法分析| 抽象语法树AST  源代码 --> |语法分析<br/>词法分析| 执行上下文  抽象语法树AST --> |Ignition 解释器| 字节码  字节码 --> |TurboFan 编译器| 机器码</pre><h3 id="抽象语法树-AST"><a href="#抽象语法树-AST" class="headerlink" title="抽象语法树 AST"></a>抽象语法树 AST</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;helen&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line">name = <span class="string">&#x27;zhang&#x27;</span>;</span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure><p>以上代码经过 JavaScript-ast 处理后，生成 ast 结构：</p><img  src=http://www.plantuml.com/plantuml/svg/VL1D2y8m3BtlL-IelQbdOVXr5WMl4cVSXcqwqWpKNsyx2og2j-JbVOHN1aLHr_BPOLSOs8gl1LrX31nGMZnPMb5bKL1Rpn7-nRqas1p1tHaTvQKXIuaFcvwhf8MBzwFnuB2mlhhk5PKSiGu2s97smjzWj9bCPybaVUk4GeWsNmoOvxIFu4U3NF_JBD7QzoshudDvGgdxn0r5IR6LLpDF><h4 id="AST-的使用"><a href="#AST-的使用" class="headerlink" title="AST 的使用"></a>AST 的使用</h4><ol><li> Babel 的工作原理就是先将 ES6 源码转换成 AST，然后再将 ES6 语法的 AST 转换为 ES5 语法的 AST，最后利用 AST 生成 JavaScript 源码。</li><li> 用来检查 JavaScript 编写规范的插件 ESLint，检查流程也是需要将源码转换为 AST，然后再利用 AST 来检查代码规范化的问题。</li></ol><h4 id="AST-的生成"><a href="#AST-的生成" class="headerlink" title="AST 的生成"></a>AST 的生成</h4><ol><li>分词（tokenize）又称词法分析。将源码拆解为 token。<br><code>var name = &#39;helen&#39;</code> 拆解为以下四个 token</li></ol><ul><li>keyword 关键字 var</li><li>name 标识符 identifier</li><li>argument 赋值运算符 =</li><li>literal 字符串 helen</li></ul><ol start="2"><li> 解析（parse）语法分析。将 token 根据语法规则转为 AST。若源码存在语法错误，终止，抛出“语法错误”</li></ol><h3 id="生成字节码"><a href="#生成字节码" class="headerlink" title="生成字节码"></a>生成字节码</h3><p>解释器 ignition 将 AST 生成字节码，并解释执行字节码。<br>早期 v8 没有字节码，是直接将 AST 转换为机器码，机器码执行效率非常高。<br>随着 Chrome 在手机上运行，特别是 512M 内存的手机上，V8 需要消耗大量内存存放转换后的机器码。字节码就是为解决内存问题而生的。<br><strong>字节码是介于 AST 和机器码之间的一种代码。与特定类型的机器码无关，字节码需要通过解释器 ignition 转换为机器码后才能执行</strong></p><h3 id="执行代码"><a href="#执行代码" class="headerlink" title="执行代码"></a>执行代码</h3><p>解释器 ignition 生成字节码，并逐条解释执行字节码。<br>Ignition 执行过程中，如果发现有热点代码（HotSpot）（重复执行多次的代码），那么后台的编译器（TurboFan）会把该段热点的字节码编译为高效的机器码，再次执行这段代码时，只需要执行编译后的机器码。大大提高了执行效率。<br>字节码配合解释器和编译器的技术称为 <strong>即时编译（JIT）</strong> 即，解释器在解释执行代码同时发现热点代码，TurboFan 把热点字节码转换为机器码，并保存转换后的机器码，以便下次使用。</p><h4 id="即时编译（JIT）JavaScript-ignition-TurboFan-工作过程"><a href="#即时编译（JIT）JavaScript-ignition-TurboFan-工作过程" class="headerlink" title="即时编译（JIT）JavaScript + ignition + TurboFan 工作过程"></a>即时编译（JIT）JavaScript + ignition + TurboFan 工作过程</h4><pre class="mermaid"> graph TD; JavaScriptCode -->|tokenize<br/>parse| 抽象代码树AST 抽象代码树AST-->|ignition|字节码Bytecode 字节码Bytecode --> HotSpot{hot} HotSpot --> |yes| 编译器TurboFan HotSpot --> |no| 解释器Ignition 编译器TurboFan--> 机器码MachineCode 机器码MachineCode --> 输出结果 解释器Ignition --> |逐条解释执行|输出结果</pre><h2 id="JavaScript-性能优化"><a href="#JavaScript-性能优化" class="headerlink" title="JavaScript 性能优化"></a>JavaScript 性能优化</h2><p>优化中心在单次脚本执行时间和脚本的网络下载上，主要关注三点：</p><ol><li> 提升单次脚本的执行速度，避免 JavaScript 的长任务霸占主线程，这样可以使页面快速响应交互；</li><li> 避免大的内联脚本，因为解析 HTML 的过程中，解析和编译会占用主线程；</li><li> 减少 JavaScript 文件的容量，因为更小的文件会提升下载速度，并且占用更低的内存。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> browser </tag>
            
            <tag> 浏览器工作原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 虚拟DOM和性能优化</title>
      <link href="/2020/12/02/react-%E8%99%9A%E6%8B%9FDOM%E5%92%8C%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2020/12/02/react-%E8%99%9A%E6%8B%9FDOM%E5%92%8C%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>DOM 是对结构化文本的抽象表达，web 环境中，DOM 是对 html 文本的抽象描述，每个 html 元素对应一个 DOM 节点，html 元素的层级关系也体现在了 DOM 树上。<br>在 DOM 进行增删改操作，都会引起浏览器对网页的重新布局和重新渲染，这个过程很耗时。</p><h2 id="通过-React-执行机制了解虚拟-DOM"><a href="#通过-React-执行机制了解虚拟-DOM" class="headerlink" title="通过 React 执行机制了解虚拟 DOM"></a>通过 React 执行机制了解虚拟 DOM</h2><h3 id="React-视图"><a href="#React-视图" class="headerlink" title="React 视图"></a>React 视图</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;</span></span><br><span class="line"><span class="language-xml">        (new Array(2)).fill(null).map((_, index) =&gt; <span class="tag">&lt;<span class="name">button</span>&gt;</span>button &#123;index + 1&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span>)</span></span><br><span class="line"><span class="language-xml">      &#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="babel-preset-react-app-编译-JSX"><a href="#babel-preset-react-app-编译-JSX" class="headerlink" title="babel-preset-react-app 编译 JSX"></a>babel-preset-react-app 编译 JSX</h3><blockquote><p>const element = createElement(type, props, …children)<br><span class='custom-box custom-box-933'>type:</span> The type argument must be a valid React component type(tag name like ‘div’ or React Component or ‘Fragment’)<br><span class='custom-box custom-box-933'>props:</span> The props argument must either be an object or null<br><span class='custom-box custom-box-933'>optional:</span> …children，当前元素子节点</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// babel-compile.js</span></span><br><span class="line"><span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  <span class="title class_">React</span>.<span class="property">Fragment</span>, </span><br><span class="line">  <span class="literal">null</span>, </span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">    <span class="string">&quot;ul&quot;</span>, </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">className</span>: <span class="string">&quot;wrap&quot;</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">2</span>).<span class="title function_">fill</span>(<span class="literal">null</span>).<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">key</span>: index</span><br><span class="line">      &#125;, item);</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="虚拟-DOM"><a href="#虚拟-DOM" class="headerlink" title="虚拟 DOM"></a>虚拟 DOM</h3><p><span class='custom-box custom-box-933'>前端性能优化的重要一条：<strong>尽量减少对DOM操作</strong>，React 执行效率高的原因在于它的<code>虚拟DOM机制</code></span><br><span class='custom-box custom-box-393'>软件开发中遇到的所有问题都可以通过增加一层抽象解决</span><br>虚拟 DOM 是 DOM 效率低下的抽象。虚拟 DOM 是用 javascript 描述的DOM 元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// console.log(babel-compile.js) -&gt; get virtualDOM</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;$$typeof&quot;</span>: <span class="title class_">Symbol</span>(react.<span class="property">element</span>), <span class="comment">// 用于标记 react 元素</span></span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="title class_">Symbol</span>(react.<span class="property">fragment</span>),</span><br><span class="line">  <span class="string">&quot;key&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="string">&quot;ref&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="string">&quot;props&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;children&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;ul&quot;</span>,</span><br><span class="line">        <span class="string">&quot;key&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;ref&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;props&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;className&quot;</span>: <span class="string">&quot;wrap&quot;</span>,</span><br><span class="line">            <span class="string">&quot;children&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;li&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;ref&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;props&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;children&quot;</span>: <span class="literal">null</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;_owner&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;_store&quot;</span>: &#123;&#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;li&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;ref&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;props&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;children&quot;</span>: <span class="literal">null</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;_owner&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;_store&quot;</span>: &#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;_owner&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;_store&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;_owner&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="string">&quot;_store&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre class="mermaid">flowchart LRA["index.js"] -->|依赖 babel-preset-react-app 编译| B[babel-compile.js]B -->|执行| C[virtualDOM]</pre><h2 id="diff-算法"><a href="#diff-算法" class="headerlink" title="diff 算法"></a>diff 算法</h2><p>react 的调合过程（Reconciliation）react 采用声明式的 API 描述 UI 结构，组件状态或属性更新，组件的 react 方法会返回一个新的虚拟 DOM 对象表述新的 ui 结构。 Diff 算法中，比较新的虚拟 DOM 和 旧的虚拟 DOM，再将 diff 的结果更新到真实 DOM 上。<br>React 基于两个假设，降低算法的时间复杂度，进行比较：</p><ol><li> 如果两个元素的类型不同，那么它们将生成两个不同的树</li><li> 为列表中元素设置 key 属性，key 标识对应元素在多次 render 过程中是否发生变化<br>react 从根结点比较两棵树的差异，根结点不同，两棵树不同，具体如下：<h3 id="当根结点是不同类型时"><a href="#当根结点是不同类型时" class="headerlink" title="当根结点是不同类型时"></a>当根结点是不同类型时</h3>根结点变化，react 会认为新的树和旧的树完全不同，不会继续比较其它属性和子节点，直接拆掉整个树重建。重建后的 DOM 树会整体更新到真实的 DOM 树中。需要操作大量 DOM 更新效率低。<br>虚拟 DOM 结点类型分为两类：</li><li> 像 <code>div/p</code> 等 DOM 元素类型；</li><li>react 组件类型，如 react 自定义组件。<br> 旧的 react 组件实例在 componentWillUnMount 中调用，新的组件实例在 componentWillMount 和 componentDidMount 中调用。<br>包裹组件的 dom 元素变量，a 组件改变 b 组件，或组件中的元素变化，都是结点类型发生变化。<h3 id="当根结点相同的-DOM-类型时"><a href="#当根结点相同的-DOM-类型时" class="headerlink" title="当根结点相同的 DOM 类型时"></a>当根结点相同的 DOM 类型时</h3>根节点相同，属性不同，react 只更新需拟 DOM 树和真实 DOM 树对应的节点。<h3 id="当根结点是相同组件类型时"><a href="#当根结点是相同组件类型时" class="headerlink" title="当根结点是相同组件类型时"></a>当根结点是相同组件类型时</h3>如果两个根节点是相同类型的组件，对应的组件实例不会被销毁，只会执行更新操作。并且在 componentWillReceiveProps 和 componentWillUpdate 中调用组件，更新变化的属性。<br>比较完根节点，react 会以同样的方式递归比较子节点，当然子节点又是它子节点的根节点。如此递归，走到比较完两棵树上的所有节点，计算出差异更新到 DOM 树。<br>对于列表，react 提供了 key 的属性，key 是为了帮助 react 提高 diff 算法效率的。每次渲染后，只要 key 不变，react 认为是只一节点。如下 code，<code>&lt;li key=&#39;first&#39;&gt;first&lt;/li&gt;</code> 与 <code>&lt;li key=&#39;second&#39;&gt;second&lt;/li&gt;</code> 两个元素 key 值没有变，只是位置变化，react 判断出为新增节点。从而避免了大量渲染。<strong>不要用 index 索引做 key 值，一旦数组开头新增，大量 key 失败，从而引用大量重新渲染</strong><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#x27;third&#x27;</span>&gt;</span>third<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#x27;first&#x27;</span>&gt;</span>first<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#x27;second&#x27;</span>&gt;</span>second<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2></li><li> 使用生产环境版本库<br><code>npm run start</code> 使用的是开发环境版本的 react 库<br><code>npm run build</code> 构建生产环境 react 库，其它第三方也执行生产环境版本构建(生产环境 NODE_ENV = ‘production’)<br>一般第三方库都会根据 process.env.NODE_ENV 这个变量决定开发环境和生产环境执行<br>如果是自己编写 Webpack 的构建配置，在生产环境构建时，需要在 Webpack 的配置项中包含以下插件配置：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  <span class="keyword">new</span> webpack.<span class="title class_">DefinePlugin</span>(&#123;</span><br><span class="line">    <span class="string">&#x27;process.env&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">NODE_ENV</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="string">&#x27;production&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">UglifyJSPlugin</span>()</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li> 避免不必要的组件渲染<br>重写 shouldComponentUpdate 方法避免不必要的组件渲染<img  src=http://www.plantuml.com/plantuml/svg/KoekIIn9LSWlKYWeoYyeLaZEICnBJrLIKD3LjLDGAahDIqajKkA2CL14hHIUhftmV7VBaztRe9gVpLdrj7_6qvvfQ1eGwfBpSmloyrBpIi8pStA2KfDJCyjI0q1waKrxFgi5QY3CD68CGBSAwW80></li><li> 使用 key</li></ol><h2 id="性能检测工具"><a href="#性能检测工具" class="headerlink" title="性能检测工具"></a>性能检测工具</h2><ol><li>React Develop Tools for Chrome 检测页面使用的 react 代码版本是生产环境版本，如果地址栏 react icon 是黑色，代表当前为生产版本 react，红色则为开发环境 react</li><li> chrome performance tab 观察组件挂载、更新、卸载过程及各阶段的时间</li></ol><ul><li>确保运行在开发模式下</li><li>打开 Chrome 开发者工具，切换到 performance 窗口，单击 Record 按钮开始统计。</li><li>在页面执行需要分析的操作，最好不要超过 20 秒，否则导致 chrome 卡死。</li><li>单击 stop 按钮结束统计，user timing 查看统计结果</li></ul><ol start="3"><li>why-did-you-update<br>用来比较 state 和 props 的变化，从而发现组件 render 方法不必要的调用</li></ol><ul><li>安装 <code>npm i why-did-you-update --save-dev</code></li><li>使用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(process.<span class="property">env_NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; whyDidYouUpdate &#125; = <span class="built_in">require</span>(<span class="string">&#x27;why-did-you-update&#x27;</span>)</span><br><span class="line">  <span class="title function_">whyDidYouUpdate</span>(<span class="title class_">React</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="JSX-底层处理机制"><a href="#JSX-底层处理机制" class="headerlink" title="JSX 底层处理机制"></a>JSX 底层处理机制</h2><pre class="mermaid">flowchart LRa[JSX视图代码] -->|编译| b[虚拟 DOM 对象 VirtualDOM]b -->|构建| c[真实 DOM]</pre><blockquote><p>第一次渲染页面直接从 vitureDom –&gt; 真实 Dom；第一次以后更新需要 DOM-DIFF 对比，计算出PATCH（两次视图差异），渲染 Patch。</p></blockquote><pre class="mermaid">%%{init: {"flowchart": {"htmlLabels": false}} }%%flowchart TBsubgraph 第一次渲染a["<span>第一次渲染</span>"] --> b["VirtualDOM"]endsubgraph 第二次渲染a2["<span>第一次渲染</span><span>第二次渲染</span>"] --> b1["new VirtualDOM"]b1 --> diffdiff{对比 VirtualDOM && new VirtualDOM}  --> patch["get 补丁包"]endb -->|渲染 virtualDOM| c["真实 DOM"]patch -->|渲染补丁包|c</pre><h2 id="Virtural-DOM-的工作原理"><a href="#Virtural-DOM-的工作原理" class="headerlink" title="Virtural DOM 的工作原理"></a>Virtural DOM 的工作原理</h2><p>由 ReactNode 节点元素组成的树，一个 ReactNode 实例表示一个轻量的、无状态的、不可变的虚拟 DOM 元素。<br>虚拟 DOM 树，最终由 ReactDOM.render 函数最终渲染到浏览器 DOM 树上，形成最终的界面效果。</p><p>React 中最主要的类型就是 ReactElement，是 ReactNode 的主要数据来源。<br>React Element 四个属性：<code>type , key, props, ref</code></p><p>虚拟 dom 的 diff 算法复杂度 $O(n^3)$，经过优化，最终把复杂度降低到 On</p><h2 id="操作-DOM（Document-Object-Model）-的几种方式"><a href="#操作-DOM（Document-Object-Model）-的几种方式" class="headerlink" title="操作 DOM（Document Object Model） 的几种方式"></a>操作 DOM（Document Object Model） 的几种方式</h2><h3 id="JavaScript-原生获取-DOM"><a href="#JavaScript-原生获取-DOM" class="headerlink" title="JavaScript 原生获取 DOM"></a>JavaScript 原生获取 DOM</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#id&#x27;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;user&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a href="/2021/06/11/JavaScript-Docment-Object-Model/">更多 Javascript 获取 DOM方式</a></p><h3 id="jQuery-获取-DOM"><a href="#jQuery-获取-DOM" class="headerlink" title="jQuery 获取 DOM"></a>jQuery 获取 DOM</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#id&#x27;</span>)</span><br><span class="line">$(<span class="string">&#x27;.class&#x27;</span>)</span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>以上两种方式都是直接<strong>操作 DOM 元素</strong><u>达到视图更新的效果</u></p></blockquote><h2 id="Vue-更新视图的方式"><a href="#Vue-更新视图的方式" class="headerlink" title="Vue 更新视图的方式"></a>Vue 更新视图的方式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1&gt;name: &#123;&#123;name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;scirpt&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &#x27;helen&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      changeName() &#123;</span><br><span class="line">        this.name = &#x27;zhangLP&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/scirpt&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Vue 改变数据 <code>this.name = &#39;zhangLP&#39;</code> 触发视图改变</p></blockquote><h2 id="React-更新视图"><a href="#React-更新视图" class="headerlink" title="React 更新视图"></a>React 更新视图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;useState&#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line">  // useState(initialState) 返回一个数组，第一个是状态值，第二个是更新状态函数 setState。下例中将setState 函数解构出赋值给 setOn</span><br><span class="line">  const [on, setOn] = useState(false)</span><br><span class="line">  return (&lt;&gt;</span><br><span class="line">    &lt;div onClick=&#123;setOn(!on)&#125;&gt;&#123;on ? &#x27;开&#x27; : &#x27;关&#x27;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/&gt;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App</span><br></pre></td></tr></table></figure><blockquote><p>React 通过 setState() 更新状态，改变数据，触发视图更新</p></blockquote><p><strong>React + Vue ** 两个框架都是通过操作虚拟 DOM，完成视图更新的，具体如下</strong></p><pre class="mermaid">graph LRsubgraph 框架内完成A[虚拟 DOM] --> B(计算变更)endB(计算变量) --> |DIFF|C[操作真实 DOM]C[操作真实 DOM] --> D[视图更新]</pre><h2 id="what’s-the-Virtual-DOM"><a href="#what’s-the-Virtual-DOM" class="headerlink" title="what’s the Virtual DOM"></a>what’s the Virtual DOM</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;background-color: rgb(255, 255, 255);&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>模拟虚拟 DOM<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>js 生成虚拟DOM<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>计算变更<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用 JS 模拟 DOM 生成的 DOM 结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">tag</span>: <span class="string">&#x27;body&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">style</span>: <span class="string">&#x27;background-color: rgb(255, 255, 255)&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">tag</span>: <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">            <span class="attr">children</span>: [</span><br><span class="line">                &#123;<span class="attr">text</span>: <span class="string">&#x27;模拟虚拟 dom&#x27;</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">tag</span>: <span class="string">&#x27;ul&#x27;</span></span><br><span class="line">            <span class="attr">children</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">tag</span>: <span class="string">&#x27;li&#x27;</span>,</span><br><span class="line">                    <span class="attr">children</span>: [</span><br><span class="line">                        &#123;<span class="attr">text</span>: <span class="string">&#x27;js 生成虚拟 DOM&#x27;</span>&#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">tag</span>: <span class="string">&#x27;li&#x27;</span>,</span><br><span class="line">                    <span class="attr">children</span>: [</span><br><span class="line">                        &#123;<span class="attr">text</span>: <span class="string">&#x27;计算变更&#x27;</span>&#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react + fetch + mockjs</title>
      <link href="/2020/12/02/mock%E6%95%B0%E6%8D%AE/"/>
      <url>/2020/12/02/mock%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器使用-mockjss"><a href="#浏览器使用-mockjss" class="headerlink" title="浏览器使用 mockjss"></a>浏览器使用 mockjss</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://mockjs.com/dist/mock.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="string">&#x27;list|1-10&#x27;</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;id|+1&#x27;</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;@string&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;age|1-100&#x27;</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;skill|1-2&#x27;</span>:[</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;Soccer&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;Volleyball&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;Swimming&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;Hiking&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      ]</span></span><br><span class="line"><span class="language-javascript">  &#125;]</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol><li><code>mockjs</code> 生成随机数据、拦截 Ajax 请求。<a href="https://github.com/nuysoft/Mock/wiki/Getting-Started">文档见</a></li></ol><ul><li>安装<blockquote><p>npm install –save-dev mockjs</p></blockquote></li></ul><ol start="2"><li> <code>fetch</code> http 请求方式，是 XMLHttpRequest 的一种替代方案，它的 api 是基于 Promise 设计的 nodejs 中使用需要引入 node-fetch.</li><li> <code>fetch-mock</code> 拦截 fetch 请求</li></ol><ul><li>安装<blockquote><p>npm install –save-dev fetch-mock</p></blockquote><span id="more"></span><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2></li></ul><ol><li> 目录结构<img  src=http://www.plantuml.com/plantuml/svg/AqxCAU6gvb9Gg0u14WeAsWgPUIcf5NfPnL1kOa41CYSJp0AoCHJcvYTduv04Yu3aKGHI4aiIeJmG7sXwUcfUYKzcSGb4MIrNBG00>按照以上目录结构整理代码，以下是 demo</li></ol><ul><li><p><code>/index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mock <span class="keyword">from</span> <span class="string">&#x27;./mock/index&#x27;</span></span><br><span class="line">mock.<span class="title function_">start</span>();</span><br></pre></td></tr></table></figure></li><li><p><code>/mock/index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mock <span class="keyword">from</span> <span class="string">&#x27;./mock&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> mock</span><br></pre></td></tr></table></figure></li><li><p><code>/mock/mock.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fetchMock <span class="keyword">from</span> <span class="string">&#x27;fetch-mock&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;agents&#125; <span class="keyword">from</span> <span class="string">&#x27;./data/agentList&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">    fetch.<span class="title function_">get</span>(<span class="string">&#x27;/agentList&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> agents</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>data 中 mock 假数据 <code>/mock/data/index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mock <span class="keyword">from</span> <span class="string">&#x27;mockjs&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Random</span> = mock.<span class="property">Random</span>;</span><br><span class="line"><span class="keyword">let</span> agents = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">  agents.<span class="title function_">push</span>(<span class="title class_">Mock</span>.<span class="property">mock</span>&#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="title class_">Random</span>.<span class="title function_">guid</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; agents &#125;</span><br></pre></td></tr></table></figure></li><li><p>fetch 调用 api <code>/api/agentList.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getAgentList</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/agentList&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组件中调用 <code>/app.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略其它代码</span></span><br><span class="line"><span class="title function_">componentDitMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">getAgentList</span>().<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      data</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> mockjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React APIs</title>
      <link href="/2020/11/25/React-APIs/"/>
      <url>/2020/11/25/React-APIs/</url>
      
        <content type="html"><![CDATA[<h2 id="React-createClass-用于注册一个组件"><a href="#React-createClass-用于注册一个组件" class="headerlink" title="React.createClass 用于注册一个组件"></a>React.createClass 用于注册一个组件</h2><p>The deprecations introduced in 15.x have been removed from the core package. </p><h2 id="React-createElement"><a href="#React-createElement" class="headerlink" title="React.createElement"></a>React.createElement</h2><blockquote><p>创建并返回指定类型的新 React 元素。<br>其中的类型参数既可以是标签名字符串（如 ‘div’ 或 ‘span’），也可以是 React 组件 类型 （class 组件或函数组件），或是 React fragment 类型。<br>使用 JSX 编写的代码将会被转换成使用 React.createElement() 的形式。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">React.createElement(</span><br><span class="line">  type,</span><br><span class="line">  [props],</span><br><span class="line">  [...children]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="eg"><a href="#eg" class="headerlink" title="eg."></a>eg.</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">React.createElement(</span><br><span class="line">&#x27;&lt;&gt;&#x27;, // fragment 类型</span><br><span class="line">&#123;className: &#x27;antd-form&#x27;&#125;,</span><br><span class="line">react.createElemtn(</span><br><span class="line">FormComponent,</span><br><span class="line">&#123;</span><br><span class="line">data: [&#x27;name&#x27;: &#x27;hel&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">),</span><br><span class="line">React.createElement(</span><br><span class="line">&#x27;li&#x27;, // 标签字符串</span><br><span class="line">null,</span><br><span class="line">&#x27;hello react&#x27;</span><br><span class="line">)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="ReactDOM-render"><a href="#ReactDOM-render" class="headerlink" title="ReactDOM.render()"></a>ReactDOM.render()</h2><h3 id="React16-render-vs-React18-render"><a href="#React16-render-vs-React18-render" class="headerlink" title="React16 render vs React18 render"></a>React16 render vs React18 render</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// react16</span></span><br><span class="line"><span class="keyword">import</span> react <span class="keyword">from</span> <span class="string">&#x27;React&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDom</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;&gt;</span>...<span class="tag">&lt;/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React18</span></span><br><span class="line"><span class="keyword">import</span> react <span class="keyword">from</span> <span class="string">&#x27;React&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;&gt;</span>...<span class="tag">&lt;/&gt;</span></span>)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/HelenZhangLP/react-18/blob/master/src/JSX/handle.js">createElement and render 手动实现</a></p><blockquote><p>在 React 18 中，render 函数已被 createRoot 函数所取代。</p></blockquote><h3 id="React-条件渲染"><a href="#React-条件渲染" class="headerlink" title="React 条件渲染"></a>React 条件渲染</h3><p>设计人员创建不同的组件来封装各种业务需求，然后依据需求的不同状态，渲染对应状态下的局部内容</p><ol><li>使用 if 条件判断，分别渲染两种状态下的组件</li><li>逻辑与运算符条件渲染</li></ol><p>react 创建、转换、使用列表<br>React 列表中使用 key 帮助 react 框架识别元素的改变，识别一个元素 key 最好是在其所在列表中独一无二<br>React 特取有效性，key 值权权会传递信息给 React 框架，用户的自定义组件无法读取<br>React 表单与HTML表单默认行为相同，在 React 环境中执行 HTML 代码仍然有效</p><h2 id="Children"><a href="#Children" class="headerlink" title="Children"></a>Children</h2><p>Children lets you manipulate and transform the JSX you received as the children prop.<br>Children 可以操作和转换 props.children 中接收到的 JSX</p><h3 id="卡槽了解一下"><a href="#卡槽了解一下" class="headerlink" title="卡槽了解一下"></a>卡槽了解一下</h3><p>就是我们通常需要传递结构给子组件，将组件的子元素传递给子组件，如下：</p><ul><li>先从子组件调用的方法说起吧<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line">&lt;<span class="title class_">Com</span> /&gt; <span class="comment">// 第一种</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Com</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>结构<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">Com</span>&gt;</span></span> <span class="comment">// 第二种</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Com</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>结构一<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>结构二<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">Com</span>&gt;</span></span> <span class="comment">// 第三种</span></span><br></pre></td></tr></table></figure></li></ul><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Com</span>(<span class="params">props</span>)&#123;</span><br><span class="line"><span class="comment">// children 可能存在 3 种情况：children = undefined; children = Object;  children =&gt; Array</span></span><br><span class="line"><span class="keyword">let</span> &#123;children&#125; = props</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需求： children.length &gt; 1 时，children[0] 和 children[1] 分别渲染在页面顶部和页面底部</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;children[0]&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>页面内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;children[1]&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>children.length &gt; 1 时，children[0] 和 children[1] 分别渲染在页面顶部和页面底部<br><font color="red">props.children 可能存在 3 类值：children = undefined; children = Object;  children =&gt; Array，所以现在需要处理的问题兼容处理 children 取值问题</font></p></blockquote><h4 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Com</span>(<span class="params">props</span>)&#123;</span><br><span class="line"><span class="comment">// children 可能存在 3 种情况：children = undefined; children = Object;  children =&gt; Array</span></span><br><span class="line"><span class="keyword">let</span> &#123;children&#125; = props</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需求： children.length &gt; 1 时，children[0] 和 children[1] 分别渲染在页面顶部和页面底部</span></span><br><span class="line"><span class="keyword">if</span> (!children) &#123;children = []&#125;</span><br><span class="line"><span class="keyword">if</span> (children.<span class="property">length</span> === <span class="number">1</span>) &#123;children = [children, <span class="literal">null</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;children[0]&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>页面内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;children[1]&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法2：children-Children-toArray-children"><a href="#方法2：children-Children-toArray-children" class="headerlink" title="方法2：children = Children.toArray(children)"></a>方法2：children = Children.toArray(children)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Children</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Com</span>(<span class="params">props</span>)&#123;</span><br><span class="line"><span class="comment">// children 可能存在 3 种情况：children = undefined; children = Object;  children =&gt; Array</span></span><br><span class="line"><span class="keyword">let</span> &#123;children&#125; = props</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需求： children.length &gt; 1 时，children[0] 和 children[1] 分别渲染在页面顶部和页面底部</span></span><br><span class="line">children = <span class="title class_">Children</span>.<span class="title function_">toArray</span>(children)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;children[0]&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>页面内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;children[1]&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="children-forEach-的使用案例"><a href="#children-forEach-的使用案例" class="headerlink" title="children.forEach 的使用案例"></a>children.forEach 的使用案例</h4><p>使用具名 slot 对父组件传递的插槽进行分类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Children</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Com</span>(<span class="params">props</span>)&#123;</span><br><span class="line"><span class="comment">// children 可能存在 3 种情况：children = undefined; children = Object;  children =&gt; Array</span></span><br><span class="line"><span class="keyword">let</span> &#123;children&#125; = props, headerSlot=[], footSlot=[], otherSlot=[]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需求： children.length &gt; 1 时，children[0] 和 children[1] 分别渲染在页面顶部和页面底部</span></span><br><span class="line"><span class="title class_">Children</span>.<span class="title function_">forEach</span>(children, <span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(element)</span><br><span class="line"><span class="keyword">const</span> &#123;slot&#125; = element.<span class="property">props</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;children[0]&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>页面内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;children[1]&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ReactDOM-createRoot"><a href="#ReactDOM-createRoot" class="headerlink" title="ReactDOM.createRoot()"></a>ReactDOM.createRoot()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">createRoot</span>(container[, options]);</span><br></pre></td></tr></table></figure><p>Create a React root for the supplied container and return the root. The root can be used to render a React element into the DOM with render:<br>为提供的容器创建React根并返回根。根可以用于通过render将React元素渲染到DOM中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const domContainer = document.querySelector(&#x27;#like_button_container&#x27;);</span><br><span class="line">const root = ReactDOM.createRoot(domContainer);</span><br><span class="line">root.render(e(LikeButton));</span><br></pre></td></tr></table></figure><p>The root can also be unmounted with unmount:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root.unmount();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器工作原理——浏览器中的JavaScript执行机制</title>
      <link href="/2020/11/18/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94Javascript%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/11/18/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94Javascript%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="JavaScript代码执行顺序"><a href="#JavaScript代码执行顺序" class="headerlink" title="JavaScript代码执行顺序"></a><a href="#codeExecutionOrder">JavaScript代码执行顺序</a></h3><blockquote><p>先编译（<u>编译出<strong>执行上下文（Execution context）</strong>与可执行代码</u>）、后执行<br>     代码编译阶段 var 声明的变量会产生 <strong>变量提升</strong></p></blockquote><h3 id="JavaScript-执行上下文与调用栈"><a href="#JavaScript-执行上下文与调用栈" class="headerlink" title="JavaScript 执行上下文与调用栈"></a><a href="#callStack">JavaScript 执行上下文与调用栈</a></h3><blockquote><p><u>调用栈是用来管理函数调用关系的一种<strong>数据结构</strong><code>Maximum call stack exceeded</code></u></p></blockquote><h3 id="ES6-let-和-const-声明变量"><a href="#ES6-let-和-const-声明变量" class="headerlink" title="ES6 let 和 const 声明变量"></a><a href="#letAndConst">ES6 let 和 const 声明变量</a></h3><blockquote><p>var 会引起变量提升，变量提升产生变量污染、消耗一部分无用的内存。<br>     var 声明变量引起变量提升——容易在无意识的情况下变量覆盖</p></blockquote></blockquote><ul><li>通过 let 和 const 解决变量提升，ECMAScript6 中，提出的 let 和 const 有块级作用域的概念。很好的解决了变量提升的问题</li></ul><ul><li><input disabled="" type="checkbox"> 作用域链与闭包<ul><li>作用域变量的有效性和生命周期</li><li>闭包嵌套函数，内部引用外出变量，外部函数执行结束后，不能完全退栈。内部函数存在外部函数的变量引用</li><li>this 与变量不同，内部函数不能继承外部函数的 this。解决办法有三种：<ol><li>this 转换为作用域，将 this 赋值给变量，内部函数访问 this 赋值的变量；</li><li>箭头函数继承上一级的 this</li><li>采用 call/apply/bind 其一，进行对象冒充</li><li>传参<span id="more"></span></li></ol></li></ul></li></ul><h2 id="1-JavaScript-代码的执行顺序"><a href="#1-JavaScript-代码的执行顺序" class="headerlink" title="1. JavaScript 代码的执行顺序"></a><a name="codeExecutionOrder">1. JavaScript 代码的执行顺序</a></h2><p>JavaScript 代码是<strong>按顺序执行</strong>的</p><blockquote><p>分析以下代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(undefinedvariable)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name; <span class="comment">// 声明</span></span><br><span class="line">name = <span class="number">123</span>; <span class="comment">// 赋值部分</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  undefined</span></span><br><span class="line"><span class="comment">  Uncaught ReferenceError: undefinedvariable is not defined</span></span><br><span class="line"><span class="comment">    at &lt;anonymous&gt;:2:13</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>变量 name 后定义，提前使用打印或undefined，未声明变量 undefinedvariable 报错 is not defined，怎么理解</p><h3 id="1-1-认识变量提升（Hoisting）"><a href="#1-1-认识变量提升（Hoisting）" class="headerlink" title="1-1. 认识变量提升（Hoisting）"></a>1-1. 认识变量提升（Hoisting）</h3><blockquote><p><del>JavaScript 代码执行过程中，JavaScript 引擎把变量声明部分和函数声明部分提升到代码开头的行为</del><code>JavaScript 代码在编译过程中，被 JavaScript 引擎放入内存的行为</code>，叫做 <strong>变量提升</strong>。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="title function_">fn_var</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name; <span class="comment">// 声明</span></span><br><span class="line">name = <span class="number">123</span>; <span class="comment">// 赋值部分</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;完整的函数声明&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn_var = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;匿名函数赋值给变量&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 完整的函数声明</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    VM791:3 Uncaught TypeError: fn_var is not a function</span></span><br><span class="line"><span class="comment">    at &lt;anonymous&gt;:3:1</span></span><br><span class="line"><span class="comment">    (anonymous) @ VM791:3</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><blockquote><p>分析：<br>  console.log(name) 打印出 undefined 变量提升后，会给变量设置默认值 undefined。<br>  fn() 执行后打印 完整的函数声明<br>  fn_var() <code>Uncaught TypeError: fn_var is not a function</code> 因为 fn_var 是变量，提升后相当于 <code>fn_var = undefined</code>，所以报错，fn_var 不是一个函数。</p></blockquote><p><font color="red"><strong>JavaScript 代码的执行流程</strong></font></p><pre class="mermaid">  graph LR;  JavaScriptCode --> 编译;  编译 --> 执行;</pre><h3 id="1-2-分析代码了解代码执行环境"><a href="#1-2-分析代码了解代码执行环境" class="headerlink" title="1-2. 分析代码了解代码执行环境"></a>1-2. 分析代码了解代码执行环境</h3><blockquote><p><strong>执行上下文</strong> javaScript 执行一段代码时的 <strong>运行环境</strong>。<br>执行上下文中存在一个变量环境的对象（Variable Environment)，variable Environment 中保存了变量提升的内容</p></blockquote><h4 id="demo-1-1-分析以下代码"><a href="#demo-1-1-分析以下代码" class="headerlink" title="demo-1-1 分析以下代码"></a>demo-1-1 分析以下代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;variable promotion&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showName</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;variable promotion case&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">showName</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>如上代码，<code>编译后会将会将提升的变量 name=undefined; function showName()&#123;...&#125;保存在变量环境中</code>，如下图</p><img  src=http://www.plantuml.com/plantuml/svg/AqfDBadCIyz9LL02GkMSpBnKlPJyafBK58LgBWM5vCIY50MbPvtBNopiURAZwycExcVJsk7g4eipKbEiGMohf9pILEkIr8eI20kiMK6X26xwq_uPBzlxd_UjVxgeMK4vCISpETK9f12isISpFQCaEBlI2Mv8PbvAPdg-GZJO50K5coGxP0Diz9Fie39wG01bvYNcfjgMvgMafW7DJB66YgQLvYMNPERdAHHdv9Vx0PLeQ5O3zTI2fME1P2tCcwaLgScb8ANE-Icf2ieU-NcfbIcfvKXET2zAJSs3E30Tn8Iw3-owzT10shtu-O96k0FXpaFORgr00711t8KIOhhHoYL5YNd51Ob5gNabiRfsgAxbgWK0><h4 id="demo-1-2-分析以下代码"><a href="#demo-1-2-分析以下代码" class="headerlink" title="demo-1-2.  分析以下代码"></a>demo-1-2.  分析以下代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">showName</span>();</span><br><span class="line"><span class="keyword">var</span> showName = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>VM4235:1 Uncaught TypeError: showName is not a function</p></blockquote><ul><li>编译阶段：全局执行上下文环境变量 <code>showName = undefined</code> 写入内存，可执行代码 <code>showName()</code></li><li>执行阶段：代码按顺序执行，先执行第一行 <code>showName()</code>，环境变量中存在 showName，值是 undefined，并不是一个函数。所以报错 <code>showName is not a function</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">showName</span>();</span><br><span class="line"><span class="keyword">var</span> showName = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>打印出 2</p></blockquote><ul><li>编译阶段：第一行 <code>showName()</code> 放入可执行代码；第二行声明变量 showName 放入全局执行上下文 <code>showName = undefined</code>；第 五 行 <code>覆盖 showName 赋值 function 引用</code></li><li>执行阶段变量环境中找到 <code>函数 showName</code>，打印结果 2，showName 再次赋值 <code>function() &#123; console.log(1) &#125;</code>的引用。下次再执行 showName() 打印结果是 1</li></ul><h2 id="2-JavaScript-执行上下文与调用栈"><a href="#2-JavaScript-执行上下文与调用栈" class="headerlink" title="2. JavaScript 执行上下文与调用栈"></a><a name="callStack">2. JavaScript 执行上下文与调用栈</a></h2><p>代码编译阶段可创建三种执行上下文：</p><ol><li> 当 JavaScript 执行全局代码的时候，会编译全局代码并创建 <strong>全局执行上下文</strong>。<font color="red">整个页面的生命周期内，全局执行上下文只有一份</font>；</li><li> 当调用一个函数时，函数体内的代码会被编译，并创建 <strong>函数执行上下文</strong>，<font color="red">一般情况下，函数执行结束后，创建的函数执行上下文被销毁</font>；</li><li> 当使用 eval 函数的时候，eval 代码也会被编译，并创建执行上下文。</li></ol><h3 id="2-1-调用栈"><a href="#2-1-调用栈" class="headerlink" title="2-1. 调用栈"></a>2-1. 调用栈</h3><blockquote><p><strong><code>调用栈用来管理函数调用关系的一种数据结构。</code></strong></p></blockquote><p>栈容器、入栈、出栈<br>栈中元素后进先出。<br>JavaScript 引擎创建执行上下文，然后压入<strong>调用栈</strong></p><img  src=http://www.plantuml.com/plantuml/svg/Aov9JCvMUB6X-VcK5SyMT2XKSoae5AKcboJcfUUaAYWzRT_xREg6PvtBNopiURAZwycExcVJsfKKb7CoyrBrKl9BIb9Jm5gmQ7hQF-DbU__pllLF5pK3TIJcP2QdEkMKfbgNf5QKM6NcfMIcvrk3pB7ooKpFA0dEhWJ9OZVhnVhUPvkdmitopImkgGpAByPYLd1YJcv-7j2KMZIFjAvukh61L8-0DP7d4MliXg7v91VaaoAiFYb6zWdMU53GqujMBYbAp2ikI2nApIk9LS3gIowkMW00><p><strong>调用栈是 JavaScript 引擎追踪函数执行的一个机制。<font color="red">多个函数被调用时，通过调用栈可以追踪到哪个函数正在被执行以及各个函数之间的调用关系</font></strong></p><h3 id="2-1-demo-分析代码"><a href="#2-1-demo-分析代码" class="headerlink" title="2-1-demo. 分析代码"></a>2-1-demo. 分析代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;helen zhang&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callShowName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;call helen zhang&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">showName</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">callShowName</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><img  src=http://www.plantuml.com/plantuml/svg/bPExJiCm58RtFiLH6MWhKVOcP031X5WOgmwkOz88OoF7uQfAI0YLcq18K5LCm08Jbm5KeV0sJLgclW9ksaO9b5i6Ayh_dtFoVxOTYV0of3kFk-tpk-1gFmtRAG11i4JCeWJIVkqjk7XqAdnz0QsGuE2sSttSQXwscaT1lPO6vC1GWp5gCv8tkPJ43Di0O2HCM4F2HcLAPjcQBJXR8KpESR4ObI5gOp9DNQBr6XJcRQiY5vStmo-IRCY2pKpRub0CMmBePIEQwPystckdxPC7_sPt8EVLCtZ5d3cSaZpbLWOZIeSpiw5UKcjrLDguTLJYkFxFr3E9qa_9wH-I9sR_d9ufozHuhm0gX186MnKLSrp7d79H4CGqTDVeUljjhzvvE7jll0JtprtlCgm3VyThDL_1PIPPKlzcThq3VT8rzCcmslWMuDwT_xGp2ff5UHdHsGs2NQauSDOB-1zw0rpbNt5f4QzShi-cpocN-uvH78-ceCGGPU9q-lQ8YGRze74nqIixnDL3ztNuaikmj3cBhb0ckwtKglQ3DRx_0tjiBzGINOs9ufWKY3chI2XwfOd4qKb1yXH_CO_ShbJr0m00><blockquote><p>分析：</p></blockquote><ol><li><strong>编译</strong><br> JavaScript 引擎编译代码创建变量name=undefined, 声明函数 callShowName，声明函数showName, <strong>全局执行上下文</strong> 压入栈；<br> <strong>执行</strong><br> name 赋值 helen zhang<br> 执行调用 callShowName 函数</li><li><strong>编译</strong><br> 声明变量 name 赋值 undefined，创建 <strong>callShowName函数执行上下文</strong>，并压入栈：<br> 执行 callName 赋值 ‘undefined’<br> showName() 放入执行代码<br> <strong>执行</strong><br> 调用 showName()</li><li><strong>编译</strong><br> 创建 <strong>showName函数执行上下文</strong><br> <strong>执行</strong><br> console.log(callShowName) 打印 callShowName</li></ol><p>以上创建的两个执行上下文是通过 <strong>栈数据结构</strong> 来管理的。</p><h3 id="chrome-开发者工具查看调用栈"><a href="#chrome-开发者工具查看调用栈" class="headerlink" title="chrome 开发者工具查看调用栈"></a>chrome 开发者工具查看调用栈</h3><ol><li>javascript 代码打断点（debugger）</li><li>执行时进入断点</li><li>开发者工具右侧 call stack 查看调用栈</li></ol><p><img src="https://static001.geekbang.org/resource/image/c0/a2/c0d303a289a535b87a6c445ba7f34fa2.png" alt="chrome 调用栈"><br>anonymous 全局函数入口<br>中间是 addAll 函数<br>顶部是 add 函数<br>在分析复杂代码结构时，或检查 bug 时，调用栈非常有用<br>runStack 当前调用函数</p><p><strong><code>console.trace() 输出函数调用关系</code></strong><br><img src="https://static001.geekbang.org/resource/image/ab/ce/abfba06cd23a7704a6eb148cff443ece.png" alt="console.trace"></p><h3 id="3-栈溢出（stack-overflow"><a href="#3-栈溢出（stack-overflow" class="headerlink" title="3. 栈溢出（stack overflow)"></a>3. 栈溢出（stack overflow)</h3><p><code>调用栈有大小的</code>，超出后 JavaScript 引擎会报错<code>超出最大栈调用大小（Maximum call stack size exceeded）</code>，<strong>栈溢出</strong></p><blockquote><p>递归没有任何终止条件的函数，会一直创建执行上下文，并反复压入栈中，栈容量有限，超过最大数量后会出现 <code>Maximum call stack size exceeded</code></p></blockquote><h4 id="解决栈溢出"><a href="#解决栈溢出" class="headerlink" title="解决栈溢出"></a>解决栈溢出</h4><p>递归调用的形式改造成其他形式，或者使用加入定时器的方法来把当前任务拆分为其他很多小任务来解决栈溢出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">runStack</span> (n) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">runStack</span>( n- <span class="number">2</span>)</span><br><span class="line">  &#125;,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">runStack</span>(<span class="number">50000</span>)</span><br></pre></td></tr></table></figure><h2 id="4-JavaScript-let-const-变量声明"><a href="#4-JavaScript-let-const-变量声明" class="headerlink" title="4. JavaScript let const 变量声明"></a><a name="letAndConst">4. JavaScript let const 变量声明</a></h2><p>var 声明的变量会有 <strong>变量提升</strong> 的特性，与直觉不否。javaScript 语言最初用最快速、最简单的方式设计，所以没有块级作用域，把块级作用域内部的变量提升。变量提升后，在编译阶段都会被提取到执行上下文的变量环境中，所以亦是可以在声明前调用。这是 JavaScript 的一个重要的设计缺陷。由于 JavaScript 需要保持向下兼容，所以变量提升特性还会继续存在</p><h3 id="4-1-变量提升带来的问题"><a href="#4-1-变量提升带来的问题" class="headerlink" title="4-1 变量提升带来的问题"></a>4-1 变量提升带来的问题</h3><h4 id="4-1-1-容易在无意识的情况下变量覆盖"><a href="#4-1-1-容易在无意识的情况下变量覆盖" class="headerlink" title="4-1-1. 容易在无意识的情况下变量覆盖"></a><font color="red">4-1-1. 容易在无意识的情况下变量覆盖</font></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;variable promotion&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showName</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;variable promotion case&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">showName</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// variable promotion case</span></span><br></pre></td></tr></table></figure><p>以上代码执行结果，打印 undefined 和 variable promotion case，结合下图继续分析</p><img  src=http://www.plantuml.com/plantuml/svg/fPCzJyCm48Rt_efJki3GihSb0ymmqB7gu3fkQjMnAzk1LgWIY04XFZeXLKny36nqG6MXFuVqO-8laAG99BIYbSXWdSw-z-xUHr4QuIOO6346AeWDECu0I88ruZOZO90smQwcWWCMN9Es1b47cuaQOWOW5OMxqLsMKKxobj2QMA4I04RI0g_Ndvtt9ZS3x_4CieXHJ7QOIuh1ymAZTaENcvqm4yWKABUeBQ0I2W2KQcPI8Chc_IyAENB8jiijKlVrh6892oPaGHBB_7X_cjoVZY-UfmzNi_xR-6Ku7Lvw9wFFqTqXaXJL_1rRKZWYMB6q5HQQYmrKGnpj-qqsDfFYNcymLvvtIPLNm_F7oEdWUlnw6pkmHvNk70YLsdVkHXanntSxiNkoz5kxkmQckijnc8l73ud5sLNCug9_iricj8hX6WWN-VbpA_8dXNYKD0qde27NfB5C8aNbjx-vIbPBn5KBIS9rDMUc_vbCzmi0><blockquote><p>分析</p></blockquote><ol><li> 全局执行上下文压入栈以后，JavaScript 引擎开始执行全局代码。</li><li> name 变量赋值 variable promotion，再调用函数showName`</li></ol><p><strong>调用函数时，javascript 引擎编译该函数，为其创建执行上下文，再将执行上下文压入栈</strong><br>函数执行上下文压入栈后，JavaScript 引擎再从上到下执行showName函数代码，执行到第一个 console.log(name)取编译时的初值 undefined 打印出 undefined，（<font color="red">与目标打印出 variable promotion 不同，原因是变量提升，导致变量覆盖</font>）第二个 console.log(name) 时，因没有块级作用域，所以打印出 variable promotion case</p><h4 id="4-1-2-变量未能及时销毁"><a href="#4-1-2-变量未能及时销毁" class="headerlink" title="4-1-2. 变量未能及时销毁"></a><font color="red">4-1-2. 变量未能及时销毁</font></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">variableDestruction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;&#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">variableDestruction</span>();</span><br></pre></td></tr></table></figure><blockquote><p>分析</p></blockquote><ol><li> JavaScript 编译以上代码，生成全局上下文(环境变量 function variableDestruction(){…})，压入栈内存中。</li><li> JavaScript 执行可执行代码 <code>variableDestruction()</code>，创建函数执行上下文(环境变量 i=undefined)，再将函数执行上下文 压入栈内存。</li><li>javascript 引擎继续执行可执行代码 i 赋值、遍历、打印结果是 5。<br><font color="red"><strong>因为没有块级作用域，导致遍历结果后没有销毁变量i,所以打印结果是 5</strong></font></li></ol><h3 id="4-2-通过-let-const-JavaScript块级作用域-解决变量提升的问题"><a href="#4-2-通过-let-const-JavaScript块级作用域-解决变量提升的问题" class="headerlink" title="4-2. 通过 let/const + JavaScript块级作用域 解决变量提升的问题"></a>4-2. 通过 <code>let/const + JavaScript块级作用域</code> 解决变量提升的问题</h3><h4 id="4-2-1-作用域（scope）"><a href="#4-2-1-作用域（scope）" class="headerlink" title="4-2-1.  作用域（scope）"></a>4-2-1.  作用域（scope）</h4><blockquote><p><font color="red">作用域</font>程序中定义变量的区域，该<u>位置决定了变量的生命周期</u>。作用域是变量与函数的可访问范围，<u>作用域控制着变量和函数的<strong>可见性</strong>和<strong>生命周期</strong></u>。</p></blockquote><ol><li> <strong>全局作用域</strong> 中的对象在代码中任何地方都能访问，<u>其生命周期为整个页面的生命周期</u>；</li><li> <strong>函数作用域</strong> 函数内部定义的变量或者函数，<strong>只能在函数内部访问</strong>。<u>其生命周期从函数调用到函数执行结束。</u>函数执行结束，函数内部定义的变量销毁。</li><li> <strong>块级作用域</strong> —— 即使用一对大括号包裹的代码，如：函数、判断语句、循环语句等。 <font color="red"><code>ES6 之后引入了 let/const 声明关键字，使得 JavaScript 也能像其它语言一样拥有块级作用域了。</code></font></li></ol><h4 id="4-2-2-解决变量提升的问题"><a href="#4-2-2-解决变量提升的问题" class="headerlink" title="4-2-2. 解决变量提升的问题"></a>4-2-2. 解决变量提升的问题</h4><p>ECMAScript6 以前<u>没有如{}，判断语句，循环语句的块级作用域，</u><strong>ES6 引入 let 和 const 关键字</strong>，因为 let 和 const 声明的变量是有块级作用的概念的</p><blockquote><p>let 声明的变量可以被修改，const 声明的变量不可以。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">variableDestruction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;&#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">variableDestruction</span>();</span><br></pre></td></tr></table></figure><blockquote><p><font color="red">Uncaught ReferenceError: i is not defined</font> 说明块级作用域生效，i 在 块级作用域以外不能访问。也就是在函数作用域内没有变量提升。</p></blockquote><h2 id="4-3-ES6-怎么兼容变量提升和块级作用域的"><a href="#4-3-ES6-怎么兼容变量提升和块级作用域的" class="headerlink" title="4-3. ES6 怎么兼容变量提升和块级作用域的"></a>4-3. ES6 怎么兼容变量提升和块级作用域的</h2><p>块级作用域是通过词法环境的栈结构实现的，变量提升是通过变量环境实现的，两者结合，JavaScript 引擎就同时支持了变量提升和块级作用域<br>从上下文的角度分析：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">3</span>, d = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">4</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(d)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure><p><strong>1.  编译并创建执行上下文</strong></p><img  src=http://www.plantuml.com/plantuml/svg/AqfDBadCIyz9LKZBSyxFAqcjA558B5PGIilFLtZQllVPr0tFEfU_MDZpP4VNantTpwQrAoaevsJcfUgbv9UKfAOeL7CfA1J1pSX9hSXCJinnpIlBBChFoqtDAr5GziqiBgaCoYzEjGOPRfMPbvAPdcyDCiCgE34dDpzF8HfeXeA2JPBTY_MzppPFVTwt_kcYPh2O7X206KcsfNafgMb0JIb0VYoAfMM9HPc9IJcfABOcvcGcfphbbAP2RFB9JCye2Swk18iWkGDgjvRMq_uPBzlx8LPhQS4jXzYUYB3T6jLToQWoiLor0000><blockquote><p>解析</p></blockquote><ul><li>函数内部 var 声明的变量，编译时存入 <strong>变量环境</strong></li><li>let 声明的变量，编译时存入 <strong>词法环境（Lexical Environment）</strong></li><li>函数内部的块级作用域内部，通过 let 声明的变量编译阶段未放到词法环境中</li></ul><p><strong>2.  执行代码</strong></p><img  src=http://www.plantuml.com/plantuml/svg/TOyzJm9148PxViK4kYqmO7Tm51exEqj3iTpEdHkNtMHl8H1ZPN7naqRKGaEqmGuJ6sB2lxaF_1VUNUB5GvrcP_A--yuy6Xr3fISGNBchfC6H0Uf3rLKAec0LJz_Yy_dw-IfSNeJBo_Wkg49DS8brfen11YSL05ra21nnXuezEUHQoJvA0xK-zyrOAnzRMRZ59UEUQcKPbaz5NqauJ3C025alhkFtQNApY5xEseuIIbiQMQVPtig73Y6vqKuhRtvuegVxv6CUhXwJszTeDYEaGSZtjznRJojlUlP0CdJJzQnLLjYcKYpgsStqxPPGXrHpsXDOOgM2ExWZ1d-mxdFlo1mSZpEr88uc3v_1v1Vnzd_4r6vi7EsKZ-vMJhy0><pre class="mermaid">graph LRA["console.log(a)"] --> B(词法环境块级作用域);B --> C(函数词法环境);C --> D(变量环境);D --> E((END));</pre><blockquote><p>分析<br>执行可执行代码 <code>console.log(a)</code><br>具体如上流程图延着词法环境栈向下查找，有就返回给 JavaScript 引擎，如果词法环境中没有继续在变量环境中找。结果在变量环境中找到变量 a，打印结果 1；<br>执行可执行代码 <code>console.log(b)</code> b 在词法环境块级作用域中， <code>b=3</code>，打印出 3，块级词法环境出栈。<br>执行函数块中可执行代码 <code>console.log(b)</code>, 打印块级词法环境中 <code>b=2</code>;<br>执行函数块中可执行代码 <code>console.log(c)</code> 打印变量环境中<code>c=4</code>;<br><font color="red">执行函数块中可执行代码 <code>console.log(d)</code> 打印 undefined <strong>因为吧，定义d的作用域已经出栈了</strong></font></p></blockquote><h4 id="Uncaught-ReferenceError-Cannot-access-‘myname’-before-initialization"><a href="#Uncaught-ReferenceError-Cannot-access-‘myname’-before-initialization" class="headerlink" title="Uncaught ReferenceError: Cannot access ‘myname’ before initialization"></a><font color="red">Uncaught ReferenceError: Cannot access ‘myname’ before initialization</font></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myname= <span class="string">&#x27;helen&#x27;</span>;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(myname);</span><br><span class="line">  <span class="keyword">let</span> myname= <span class="string">&#x27;zhang&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>分析：</code></strong> 块级作用域中，myname 声明提升到了 console.log(myname) 之前，但赋初值 undefined 未初提升。所以 <code>can not access myname before initialization</code>。<strong>所以 let 声明的变量，声明会被提升，但赋初值不被提升。var 声明的变量，赋默认值都会被提升。function 声明、赋值都会被提升。</strong></p><blockquote><p>变量提升是在变量环境中完成的，而块级作用域是通过词法环境的栈结构实现的，两个结合，JavaScript 就实现了 变量提升与块级作用域了</p></blockquote><h2 id="5-作用域链"><a href="#5-作用域链" class="headerlink" title="5. 作用域链"></a>5. 作用域链</h2><blockquote><p>作用域是程序中定义变量的位置，这个位置决定了变量的可见性或说生命周期<br>  作用域链可以理解为变量的查找路径</p></blockquote><p><strong><code>outer —— 每个执行上下文的变量环境中用于指向外部的执行上下文的引用。</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;helen&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;zhang&#x27;</span>;</span><br><span class="line">  <span class="title function_">bar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img  src=http://www.plantuml.com/plantuml/svg/Aov9JCvMK0B2QYu5XQBKv9B4lFISL8NqdFoan1pd_BoIr8eIXSHY1QMdhIkURcnuigFhoOxkPzFQd_UjVxge6Q9DGI4viIW5giSrhoopA3ylDpKFggz_nilsVeZocBoynDnKM_MCr9pKF7MOPcHxbV9BIrAB56mLyafpSfH01a1CzGS9WrNN8YnKUh6-zzdcgL2dS47a46QbvUSZUm38LNZQllVPr0tFEfU_MDW3zmgA9x2wjoe3Q28Uzu8T2ZGVuKe5E5T1LzSEDJYj59xrj3-TC14IecYEmV0Zq1pytanAB4Bs9f1BgZS9U0ne8hB7O5nAFGOq1zDZN0h8_j6DLYufIimhBaWi0YQdMA1zY3ZbKa2EO4oLA2xZgWK0><blockquote><p>函数调用时，使用了外部变量，通过 function 关键字声明的函数，会延着执行上下文环境向上查找变量，这个路径就是叫做作用域链<br><strong>JavaScript 执行过程中，其作用域链是由词法作用域决定的。</strong></p></blockquote><h3 id="6-1-词法作用域"><a href="#6-1-词法作用域" class="headerlink" title="6-1. 词法作用域"></a>6-1. 词法作用域</h3><p><strong>词法作用域</strong> 是指作用域是由代码中函数声明的位置来决定的，所以词法作用域是静态的作用域，通过它就能预测代码在执行过程中如何查找标识。</p><blockquote><p>词法作用域是代码编译阶段就决定好的，和函数是怎么调用没有关系</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">afn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bfn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="string">&#x27;bb&#x27;</span></span><br><span class="line">  <span class="title function_">cfn</span>()</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">cfn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">    <span class="title function_">dfn</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dfn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">  <span class="title function_">afn</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bfn</span>()</span><br><span class="line"><span class="comment">// bb</span></span><br><span class="line"><span class="comment">// b</span></span><br><span class="line"><span class="comment">// a b</span></span><br></pre></td></tr></table></figure><blockquote><p>分析：<br>  编译：全局变量环境中（a=undefined;b=undefined;function afn(){…};function bfn(){…};function dfn(){…}）<br>  执行：a=’a’;b=’b’;执行bfn()<br>  编译：bfn函数变量环境（b=undefined; function cfn(){…}）<strong>cfn 函数声明的位置在 bfn 函数内部</strong><br>  执行：b=’bb’；函数 cfn 中打印变量 b 为 bb，调用 dfn 函数，<strong>dfn 函数声明的位置在全局上下文中，打印变量 b 为全局上下文环境中的变量 b，结果为 b</strong>，接着在 dfn 中调用 afn，同样 afn 是在全局上下文环境中声明，所以打印全局上下文中的变量 a</p></blockquote><h3 id="6-2-块级作用域的变量查找"><a href="#6-2-块级作用域的变量查找" class="headerlink" title="6-2. 块级作用域的变量查找"></a>6-2. 块级作用域的变量查找</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> myName = <span class="string">&quot;极客世界&quot;</span></span><br><span class="line">  <span class="keyword">let</span> test1 = <span class="number">100</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> myName = <span class="string">&quot;Chrome浏览器&quot;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(test)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> myName = <span class="string">&quot;极客邦&quot;</span></span><br><span class="line">  <span class="keyword">let</span> test = <span class="number">2</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> test = <span class="number">3</span></span><br><span class="line">    <span class="title function_">bar</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myName = <span class="string">&quot;极客时间&quot;</span></span><br><span class="line"><span class="keyword">let</span> myAge = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> test = <span class="number">1</span></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><img  src=http://www.plantuml.com/plantuml/svg/bLHDIm916BxxAuRfu4d8FavXK56dg5kNx31keucxCp6EOOHWHTYtbzG2BUgGdlgW3oJepuYpwhzesW_PTLSi5fQTuNdUvtsUzsNJ72af0EMp5m20OOKZab0n44SDyPhNJ-hT-_DsyxJTFDFBXSxbitWu12WD4YgD8NM14ewptA02e22s2Q0eNlSAHHCP9V4CKNYI4X13p76AKnebskuAqd0agD_kYwS7lVBPgxm7eLNCsGlDSCoiMqMbcKqmRPno3jdkyuN-Lh9bjTsv18w4nsUYii4qZuJXdei_rUVdNAvbNwBmhPTUXXgNY2NBnIZtVbPQ-QhRTk_WCTZArpn0gRFQjptCg9y2D0nFGDklGPBLWAXLEb_rzdUrSzKGTtTMCfDmI1HoO2EYa8Y_HY77QXBM44kYc8eNoKwIKQ9Xmlqyk3DgDykTqZdqmcH18oJe6kxa_pEpzPGjHZMiVnIxzMDnqp3RdaTCnTcaWbIRQIjDMEUSj-90skxr_4q-BDTptAolKYMrR2g0GObmNyBwSA53wsES8PBUHamckH6QTJJhcAjy-GpBI_OkjsJwRBoNwVeV178_><blockquote><p>分析:<br> console.log(test)</p></blockquote><ol><li>if 块级词法环境中查找 —— 无</li><li>bar 函数词法作用域中查找 —— 无</li><li>bar 函数变量环境中查找 —— 无</li><li><strong>bar 在全局作用域中声明的，outer 执行上下文引用指向全局执行上下文，</strong> 首先在全局执行上下文词法环境中查找 —— 找到了，打印 1；若无在，全局执行上下文变量环境中查找</li></ol><h2 id="7-闭包"><a href="#7-闭包" class="headerlink" title="7. 闭包"></a>7. 闭包</h2><blockquote><p><strong>在 JavaScript 中，根据词法作用域的规则，内部函数总是可以访问其外部函数中声明的变量，当通过调用一个外部函数返回一个内部函数后，即使该函数已经执行结束了，但是内部函数引用外部函数的变量依然保存在内存中，我们把这些变量的集合称为<code>闭包</code>。</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> myName = <span class="string">&#x27;极客时间&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> test1 = <span class="number">1</span></span><br><span class="line">  <span class="keyword">const</span> test2 = <span class="number">2</span></span><br><span class="line">  <span class="keyword">var</span> innerBar = &#123;</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(test1)</span><br><span class="line">      <span class="keyword">return</span> myName</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">setName</span>: <span class="keyword">function</span>(<span class="params">newName</span>) &#123;</span><br><span class="line">      myName = newName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> innerBar</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="title function_">foo</span>()</span><br><span class="line">bar.<span class="title function_">setName</span>(<span class="string">&#x27;极客邦&#x27;</span>)</span><br><span class="line">bar.<span class="title function_">getName</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="title function_">getName</span>())</span><br></pre></td></tr></table></figure><p><img src="https://static001.geekbang.org/resource/image/40/a8/40b8840480a5df4f43ad5f4e7907e3a8.png" alt="img"></p><blockquote><p>分析：<br> foo 函数调用结束后，foo 函数中定义的 getName 函数，依然引用了 foo 函数中的变量 test1 和 myName 造成 foo 函数无法完全退栈。就行成了一个闭包</p></blockquote><p><strong>函数内部方法包含外部引用，函数无法完全退栈，内部方法引用外部函数的变量依然保存在内存中，就形成了一个闭包</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">closure</span>(foo)</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;极客邦&#x27;</span></span><br><span class="line">  <span class="attr">test1</span>: <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="7-1-闭包怎么回收"><a href="#7-1-闭包怎么回收" class="headerlink" title="7-1.  闭包怎么回收"></a>7-1.  闭包怎么回收</h3><p>闭包使用不正确会造成内存泄漏，如果引用闭包的函数是个全局变量，闭包会一直存在直到页面关闭；如果不在使用就会造成内存泄漏。引用闭包的函数是个局部变量，等函数销毁后，在下次 JavaScript 引擎执行垃圾回收时，判断闭包这块内容不被使用，那么 JavaScript 引擎垃圾回收器会回收这块内存。使用闭包原则 <strong>如果闭包会一直使用，那么它可以作为全局变量存在；如果使用频率不高，占用内存又大，就尽量让它成为一个局部变量</strong></p><h2 id="8-JavaScript-中的-this-是什么"><a href="#8-JavaScript-中的-this-是什么" class="headerlink" title="8. JavaScript 中的 this 是什么"></a>8. JavaScript 中的 this 是什么</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;variable name&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> bar = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;the variable name of bar&#x27;</span>,</span><br><span class="line">  <span class="attr">printName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> bar.<span class="property">printName</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> _printName = <span class="title function_">foo</span>()</span><br><span class="line"><span class="title function_">_printName</span>()</span><br></pre></td></tr></table></figure><p>执行以上代码片断，打印的结果为 <code>variable name</code>。按照其它语言的编程习惯，这里想打印的是 <code>bar.name</code> 即 <code>the variable name of bar</code></p><blockquote><p>分析：<br>  全局上下文中有两个变量 bar 和 name<br>  bar 有两个属性，name 和 function printName<br>  JavaScript 中的作用域链是由词法作用域决定的，而词法作用域是由代码结构决定的。<br>  所以 function(){console.log(name)} 这个函数是在全局上下文环境中定义的，foo 函数中取的是全局执行上下文中定义的函数<br>  全局上下文环境中取 name 变量，打印的结果为 ‘variable name’</p></blockquote><p><strong><code>可以通过使用 javaScript this 机制获取对象内部属性</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;the variable name of bar&#x27;</span>,</span><br><span class="line">  <span class="attr">printName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">bar.<span class="title function_">printName</span>() <span class="comment">// the variable name of bar</span></span><br></pre></td></tr></table></figure><img  src=http://www.plantuml.com/plantuml/svg/AqfDBadCIyz9LNZMkVp5mfudExgUxEX-DgrTePfBGI4viIX5uMd_Z9Vj_S_xrZzTrAoWR6QM1fDuiRxtsUQfM2JoIqjIYr14IZ8oYnMKquoDkMe1><p><strong>this 是和执行上下文绑定的</strong>，即每个执行上下文中都有一个 this</p><h3 id="8-1-全局执行上下文-this"><a href="#8-1-全局执行上下文-this" class="headerlink" title="8-1.  全局执行上下文 this"></a>8-1.  全局执行上下文 this</h3><p>浏览器环境，全局执行上下文 this 指向 window 对象，window 是 this 和 作用域链的唯一交点，作用域链最低端包含了 window 对象</p><h3 id="8-2-函数执行上下文-this"><a href="#8-2-函数执行上下文-this" class="headerlink" title="8-2.  函数执行上下文 this"></a>8-2.  函数执行上下文 this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// window</span></span><br></pre></td></tr></table></figure><p>在全局执行环境中调用函数，其执行上下文中的 this 指向 window 对象。this 指向可以被设置</p><h3 id="8-3-设置执行上下文-this-的几种方式"><a href="#8-3-设置执行上下文-this-的几种方式" class="headerlink" title="8-3.  设置执行上下文 this 的几种方式"></a>8-3.  设置执行上下文 this 的几种方式</h3><ol><li>通过函数的 call 方法，对象冒充，改变 this 指向<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;zhang&#x27;</span></span><br><span class="line"><span class="keyword">var</span> bar = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;helen&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>()</span><br><span class="line">foo.<span class="title function_">call</span>(bar)</span><br></pre></td></tr></table></figure><blockquote><p>分析：<br> 代码编译结果 <code>name=undefined;bar=undefined;function foo()&#123;...&#125;</code><br> 代码执行：<code>name=&#39;zhang&#39;;bar=&#123;name: helen&#125;</code> 执行 <code>foo()</code> this 指向 window，取全局环境中的 name ，打印 ‘zhang’<br> 执行 <code>foo.call(bar)</code> 对象冒充，使得 foo 函数中的 this 指向 bar 对象，打印 ‘helen’</p></blockquote></li></ol><p>  除了用 call 改变 this 指向问题，还可以使用 <strong>bind</strong>、<strong>apply</strong>，具体就是使用上的区别</p><ol start="2"><li>通过 <strong>对象调用</strong> 改变 this 指向<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;zhang&#x27;</span></span><br><span class="line"><span class="keyword">var</span> myObj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;helen&#x27;</span>,</span><br><span class="line">  <span class="attr">showName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">myObj.<span class="title function_">showName</span>() <span class="comment">// &#x27;helen&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><p>  <strong><code>使用对象调用对象内部方法，this 指向对象本身</code></strong> 也可以理解为 <code>myObj.showName.call(myObj)</code></p><blockquote><p>this 指向取决于调用者，全局环境调用 this 指向 window，对象调用，this 指向调用对象</p></blockquote><ol start="3"><li>通过构造函数中设置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ConstructorObj</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;helen&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">ConstructorObj</span>() <span class="comment">// ConstructorObj &#123;name: &quot;helen&quot;&#125;</span></span><br></pre></td></tr></table></figure>可以理解为以下代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建临时空对象</span></span><br><span class="line"><span class="keyword">var</span> temporaryObject = &#123;&#125;</span><br><span class="line"><span class="comment">// 调用 ConstructorObj.call(temporaryObject) this 指向 ConstructorObj 执行上下文</span></span><br><span class="line"><span class="title class_">ConstructorObj</span>.<span class="title function_">call</span>(temporaryObject)</span><br><span class="line"><span class="comment">// 执行 ConstructorObj 函数，ConstructorObj 函数执行上下文中 this 指向 temporaryObject</span></span><br><span class="line"><span class="comment">// return temporaryObject</span></span><br><span class="line"><span class="keyword">return</span> temporaryObject</span><br></pre></td></tr></table></figure></li></ol><h3 id="8-4-this-的设计缺陷及应对方案"><a href="#8-4-this-的设计缺陷及应对方案" class="headerlink" title="8-4.  this 的设计缺陷及应对方案"></a>8-4.  this 的设计缺陷及应对方案</h3><ol><li>嵌套函数中的 this 不会从外层函数中继承<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;hellen&#x27;</span>,</span><br><span class="line">    <span class="attr">fn</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>) <span class="comment">// hellen</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>) <span class="comment">// undefined</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">bar</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">bar.<span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><code>function bar()&#123;&#125;</code> this 指向 window 并没有继承 object bar<blockquote><p>解决办法（一） <strong>this 转换为作用域</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;hellen&#x27;</span>,</span><br><span class="line">    <span class="attr">fn</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>) <span class="comment">// hellen</span></span><br><span class="line">        <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(_this.<span class="property">name</span>) <span class="comment">// hellen</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">bar</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">bar.<span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><blockquote><p>解决办法（二）：<strong>箭头函数 继承 this</strong><br> 箭头函数不会创建自身执行上下文，箭头函数 this 取决于其外部函数</p></blockquote></li></ol>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;helen&#x27;</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// helen</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">bar</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// helen</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">bar</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">bar.<span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><ol start="2"><li>普通函数中的 this 默认指向全局对象 window<br><strong>JavaScript 严格模式下，全局调用一个函数 this 指向 undefined</strong></li></ol><h2 id="9-关于-this-的-demo-分析"><a href="#9-关于-this-的-demo-分析" class="headerlink" title="9 关于 this 的 demo 分析"></a>9 关于 this 的 demo 分析</h2><p>需求：异步修改用户信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> userInfo = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&quot;jack.ma&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">13</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">  <span class="attr">updateInfo</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//模拟xmlhttprequest请求延时</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;pony.ma&quot;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">39</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">sex</span> = <span class="string">&#x27;female&#x27;</span></span><br><span class="line">    &#125;,<span class="number">100</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">userInfo.<span class="title function_">updateInfo</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userInfo)</span><br></pre></td></tr></table></figure><blockquote><p>分析：<br>  执行结果并不是修改用户信息，而是在全局 window 创建了 name/age/sex 属性并赋上相应的值<br>  具体原因正是函数中 this 的不继承性</p></blockquote><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><ol><li> 增加变量 <code>_this</code> 保存父级 this（userInfo 这个对象），这种方式会产生一个闭包<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> userInfo = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&quot;jack.ma&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">13</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">  <span class="attr">updateInfo</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="variable language_">this</span></span><br><span class="line">    <span class="comment">//模拟xmlhttprequest请求延时</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      _this.<span class="property">name</span> = <span class="string">&quot;pony.ma&quot;</span></span><br><span class="line">      _this.<span class="property">age</span> = <span class="number">39</span></span><br><span class="line">      _this.<span class="property">sex</span> = <span class="string">&#x27;female&#x27;</span></span><br><span class="line">    &#125;,<span class="number">100</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">userInfo.<span class="title function_">updateInfo</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userInfo) <span class="comment">//&#123;name: &quot;jack.ma&quot;, age: 13, sex: &quot;male&quot;, updateInfo: ƒ&#125;</span></span><br></pre></td></tr></table></figure></li><li> call/apply/bind 对象冒充<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> userInfo = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&quot;jack.ma&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">13</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">  <span class="attr">updateInfo</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//模拟xmlhttprequest请求延时</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;pony.ma&quot;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">40</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">sex</span> = <span class="string">&#x27;female&#x27;</span></span><br><span class="line">    &#125;.<span class="title function_">call</span>(<span class="variable language_">this</span>),<span class="number">100</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">userInfo.<span class="title function_">updateInfo</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userInfo) <span class="comment">//&#123;name: &quot;jack.ma&quot;, age: 13, sex: &quot;male&quot;, updateInfo: ƒ&#125;</span></span><br></pre></td></tr></table></figure></li><li> 箭头函数，箭头函数不会自己创建 this，可以从上级执行上下文环境中继承 this<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> userInfo = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&quot;jack.ma&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">13</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">  <span class="attr">updateInfo</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//模拟xmlhttprequest请求延时</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;pony.ma&quot;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">41</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">sex</span> = <span class="string">&#x27;female&#x27;</span></span><br><span class="line">    &#125;,<span class="number">100</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">userInfo.<span class="title function_">updateInfo</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userInfo) <span class="comment">//&#123;name: &quot;jack.ma&quot;, age: 13, sex: &quot;male&quot;, updateInfo: ƒ&#125;</span></span><br></pre></td></tr></table></figure></li><li> 传参<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> userInfo = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&quot;jack.ma&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">13</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">  <span class="attr">updateInfo</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//模拟xmlhttprequest请求延时</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params">_this</span>)&#123;</span><br><span class="line">      _this.<span class="property">name</span> = <span class="string">&quot;pony.ma&quot;</span></span><br><span class="line">      _this.<span class="property">age</span> = <span class="number">42</span></span><br><span class="line">      _this.<span class="property">sex</span> = <span class="string">&#x27;female&#x27;</span></span><br><span class="line">    &#125;(<span class="variable language_">this</span>),<span class="number">100</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">userInfo.<span class="title function_">updateInfo</span>()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> browser </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 浏览器工作原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器工作原理——页面渲染</title>
      <link href="/2020/11/18/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93/"/>
      <url>/2020/11/18/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<p>按照渲染的时间顺序，流水线可分为如下几个阶段：</p><ul><li>构建 DOM 树</li><li>样式计算</li><li>布局阶段</li><li>分层</li><li>绘制</li><li>分块</li><li>光栅化</li><li>合成。</li></ul><span id="more"></span><ol><li>将 HTML 转换为浏览器能够理解的结构 —— DOM 树<pre class="mermaid">graph TDdocument[document] --> html[html]html-->head[head]html-->body[body]head-->link[link]body-->p[p]body-->div[div]p-->span[span]p-->渲染流程(渲染流程)span-->重点介绍(重点介绍)div-->p1[p]p1-->green(green)</pre></li><li> 样式计算（Recalculate Style）<br>计算出 DOM 节点中每个元素的具体样式，分三步完成：</li></ol><ul><li>渲染引擎接收到 css 文本时，会执行一个转换操作，将 CSS 文本转换为浏览器可以理解的结构 —— styleSheets。document.styleSheets 可以查看样式 表包含的多种样式。</li><li>属性值的标准化操作。将属性值 2em/blue/bold 转换为渲染引擎容易理解的、标准化的计算值。</li><li>根据 css 的继承规则和层叠规则，计算出 Dom 树每个节点的具体样式。css 继承每个 dom 节点都包含父节点样式。<br><img src="https://static001.geekbang.org/resource/image/88/b2/88a3aac427cc7c09361eac01a85fc7b2.png" alt="chrome开发者工具-styleSheets"><br>图中，可以看出，样式表的继承关系， user agent styleSheets 是浏览器内置的默认样式<br>可以在 chrome 开发者工具 ——&gt; 选择 element，再选择 computed 子标签</li></ul><ol start="3"><li>布局<br>计算出 DOM 树中可见元素的几何位置，<strong>布局</strong>。额外构建一棵只包含可见元素布局树。<img  src=http://www.plantuml.com/plantuml/svg/AqfDBadCIyz9LKXFpKijIYn9zKcip2yj2IbAJLMmiNa-PVwpZWbFTpG_tTZmRC54Epk5QYu5XIAu9XT_Nw2gbFnSEpiKSUVyt8BIajIKu9BA790voL2-GZ580AYubWkBVRfs2j59-IcLiLnv-IMf2ZcfQIKA-MamiRJyl1BTuiogL2i58uE22gxKl1G5a3ekYBokhbrq0RhE0anjoVav-KLMHUb96WOw1Zf6fgQQs4nAoIo3cbMKcPu1CGmiXcuSc5-U2b9afM1kO81aFj1ie0q6oEONW0n_jcFJi_cJdsrjVBwYcmjiAjH6GtJdGyGein9i1j22ejGK0000>布局树中忽略 head,display:none 的隐藏元素。</li></ol><p><strong>总结：</strong> html 页面内容被提交给渲染引擎，渲染引擎首先将 html 解析为浏览器可以理解的 DOM，接着根据 css 样式表计算出 DOM 树的所有节点的样式；最后计算出元素的几何坐标，将信息保存在 dom 树中。</p><ol start="4"><li>图层<br>渲染引擎还需要为特定的节点生成专用的图层，并生成一查对应的图层树（LayerTree），chrome 开发者工具，选择 layer 标签，可查看页面分层情况。</li></ol><ul><li>拥有层叠上下文的元素会被提升为单独的一层。其中包含明确的定位属性元素，透明和滤境属性。<br>z-index/position:fixed/filter/opacity</li><li>需要剪裁（clip）的地方也会被创建为图层 overflow: auto</li></ul><ol start="5"><li><p>图层绘制<br>渲染引擎实现图层绘制，会把一个图层的绘制拆分成很多小的 <strong>绘制指令</strong>，然后再把这些指令按照顺序组成一个待绘制列表，最终输出的是一个绘制列表。<br>绘制列表用来记录绘制的顺序和绘制指令的列表。<br>可以打开 chrome 开发者工具 -&gt; Layers 标签 -&gt; Document 查看绘制列表，拖动绘制列表，可以查看绘制过程。如下图：<br><img src="https://static001.geekbang.org/resource/image/30/70/303515c26fcd4eaa9b9966ad7f190370.png" alt="chrome 开发者工具查看layers绘制点"></p></li><li><p>栅格化（raster）操作<br>绘制列表用来记录绘制只是用来记录绘制顺序和绘制指令的列表，实际绘制操作由渲染引擎中的合成线程来完成。<strong>合成线程会将图层划分为图块（tile)</strong><br>合成线程会将视口（viewport）附近的图块来优先生成位图，实际生成位图的操作由栅格化来执行。栅格化，将图块生成位图。<br>渲染进程把生成图块的指令发送给GPU，然后在GPU中执行生成图块的位图，并保存在 GPU 内存中。</p></li><li><p>合成和显示<br>所有图块都被光栅化后，合成线程会生成一个绘制图块的命令 —— DrawQuad，DrawQuad 命令提交给浏览器进程。<br>浏览器进程中有一个叫 viz 的组件，用来接收合成线程发过来的 DrawQuad 命令，然后根据 DrawQuad 命令，将其页面绘制到内存中，最后再将内存显示在屏幕上。现在接收到的 html、css、JavaScript 就完美的显示在页面上了。</p></li></ol><h2 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h2><img  src=http://www.plantuml.com/plantuml/svg/PL5DJy905BptLsou4w973fv8l6Z4g2VImz9kPAKVctqBf1gF618rOZH60mPkSk6WYGaHaJ_J3tw6svPgIszl9xCpyzumh3NnAK65O74Vp8UhvI2ON1VGXO9GZHDWjWK4rMtTKVD8iRY3EB5qmglSrWX06JM4QPGqWD8PRcFGE6L2kLGKbhZuimz_z92uOCZ-ZsmjMvT4TpOFlfO9oyJKEcvmWlM88fDK3lRLU3eIZa7Mynvsx9RuVn2-dfaKY70P9h7m-Zs_rq-vW6E91W4AwJWeRIuNhZ5E6EO42MeGKCj8iqsJYgoqF-xwus_lvYdUr7yVnyjY47_BaaI_5iD8O6XkgJbeEuwTlk9kzGIbczhK3MC6ZoEvdRkuzGO_KNSP84Tnbw_UzDaRJb0exbrrvSkTJTLiUvztgxUUzp995LZdTWUo3URk69grwRayLeNZpc4Bww7inaz9qYam0plABm00><h2 id="重排、重绘、合成"><a href="#重排、重绘、合成" class="headerlink" title="重排、重绘、合成"></a>重排、重绘、合成</h2><h3 id="重排-——-更新元素的几何属性"><a href="#重排-——-更新元素的几何属性" class="headerlink" title="重排 —— 更新元素的几何属性"></a>重排 —— 更新元素的几何属性</h3><p>通过 JavaScript 或者 CSS 修改元素的几何位置属性（改变宽高）那么浏览器会触发重新布局并解析之后的几个子阶段，这个过程叫 <strong>重排</strong>，<code>重排需要更新完整的渲染流水线，开销也是最大的</code></p><h3 id="重绘-——-更新元素的绘制属性"><a href="#重绘-——-更新元素的绘制属性" class="headerlink" title="重绘 —— 更新元素的绘制属性"></a>重绘 —— 更新元素的绘制属性</h3><p>像修改 background 等属性，未改变元素的几何属性，不会触发布局阶段，直接进入绘制阶段，执行之后的子阶段，这个过程叫 <strong>重绘</strong>，<code>省去了布局和分层阶段，比重排执行效率高</code></p><p>减少重排重绘, 方法很多：</p><ol><li>使用 class 操作样式，而不是频繁操作 style</li><li>避免使用 table 布局</li><li>批量dom 操作，例如 createDocumentFragment，或者使用框架，例如 React</li><li>Debounce window resize 事件</li><li>对 dom 属性的读写要分离</li><li>will-change: transform 做优化</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> browser </tag>
            
            <tag> 浏览器工作原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-插件系列</title>
      <link href="/2020/11/17/hexo-%E6%8F%92%E4%BB%B6%E7%B3%BB%E5%88%97/"/>
      <url>/2020/11/17/hexo-%E6%8F%92%E4%BB%B6%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-renderer-mathjax"><a href="#hexo-renderer-mathjax" class="headerlink" title="hexo-renderer-mathjax"></a>hexo-renderer-mathjax</h2><p>用来写数学公式，不需要额外的配置，只需要 <code>npm i hexo-renderer-mathjax</code></p><h2 id="hexo-filter-sequence"><a href="#hexo-filter-sequence" class="headerlink" title="hexo-filter-sequence"></a>hexo-filter-sequence</h2><p>用于画时序图的，使用比较麻烦，<a href="https://github.com/bubkoo/hexo-filter-sequence">参考1</a><a href="https://helenzhanglp.github.io/2019/01/31/hexo-%E5%9D%91/">参考2</a> 如果要画时序图，可以采用下面两种插件替换</p><h2 id="hexo-tag-plantuml"><a href="#hexo-tag-plantuml" class="headerlink" title="hexo-tag-plantuml"></a>hexo-tag-plantuml</h2><p>画各种图形，种类多。<a href="https://plantuml.com/zh/sequence-diagram">使用方法具体参考文档</a><br>安装方法，<a href="https://github.com/two/hexo-tag-plantuml">见 github</a></p><h2 id="hexo-filter-mermaid-diagrams"><a href="#hexo-filter-mermaid-diagrams" class="headerlink" title="hexo-filter-mermaid-diagrams"></a>hexo-filter-mermaid-diagrams</h2><p>可以用来画流程图、时序图等，但文档不全。<a href="https://github.com/webappdevelp/hexo-filter-mermaid-diagrams">安装参考</a><br>使用方法见以下 demo.</p><span id="more"></span><pre class="mermaid">graph LR;    用户界面交互-->状态;    状态-->UI渲染;    UI渲染-->|用户界面与数据保持一致|数据;</pre><h3 id="hexo-filter-mermaid-diagrams-坑"><a href="#hexo-filter-mermaid-diagrams-坑" class="headerlink" title="hexo-filter-mermaid-diagrams 坑"></a>hexo-filter-mermaid-diagrams 坑</h3><p><font color="#f99">1.   流程图名称写单词时，首字母大宝。如：Constructor</font></p><pre class="mermaid">graph TDConstructor[构造函数&#58;来初始化相关特性&#44;对象特性因对象传参而异&#44;可能包含私有属性]Prototype(原型上定义共有属性)style Prototype fill: aliceblue</pre><p><font color="#f99">2.   流程图中标点符号使用转义字符</font><br><font color="#f33">2-1. 流程图中特殊符号可以采用<code>&quot;&quot;</code>包裹</font></p><table><thead><tr><th>名称</th><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td>：</td><td>&amp;#58;</td><td>冒号(colon)</td></tr><tr><td>,</td><td>&amp;#44;</td><td>逗号(comma)</td></tr></tbody></table><h3 id="hexo-filter-mermaid-diagrams-升级-mermaid-致最新版，绘制-pie-journey-等图形"><a href="#hexo-filter-mermaid-diagrams-升级-mermaid-致最新版，绘制-pie-journey-等图形" class="headerlink" title="hexo-filter-mermaid-diagrams 升级 mermaid 致最新版，绘制 pie/journey 等图形"></a>hexo-filter-mermaid-diagrams <font color="#f33">升级 mermaid 致最新版，绘制 pie/journey 等图形</font></h3><blockquote><p>/themes/**(theme topic, eg: next)/config.yml<br>mermaid 版本默认 v7.1.2，修改版本为 v8.7.0</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mermaid: ## mermaid url https://github.com/knsv/mermaid</span><br><span class="line">  enable: true  # default true</span><br><span class="line">  startOnload: true  #default true</span><br><span class="line">  version: &quot;8.7.0&quot; # default v7.1.2</span><br><span class="line">  options:  # find more api options from https://github.com/knsv/mermaid/blob/master/src/mermaidAPI.js</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器工作原理（4）从输入URL 到页面展示，这中间发生了什么</title>
      <link href="/2020/11/17/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E4%BB%8E%E8%BE%93%E5%85%A5URL-%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%EF%BC%8C%E8%BF%99%E4%B8%AD%E9%97%B4%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
      <url>/2020/11/17/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E4%BB%8E%E8%BE%93%E5%85%A5URL-%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%EF%BC%8C%E8%BF%99%E4%B8%AD%E9%97%B4%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<img  src=http://www.plantuml.com/plantuml/svg/TP7DJeD054RtF4KJTXDtxEZJpAAf9eqQn1qhqmBQDaobDZ7-qc9AD58r9LGGVHdkPVeMqeucqjJbV3ddktDd39agYe6HmwSsN0Rv8kLVLqNGDQGZdMgw9BVschjwKsiqzbL2Yc60Tim_NUWy45ANLF3R1JD506O7mlSo90Hc7zn-N166h51g5DcWIAz_cwkTu0nu5DUEjLQDps9yFLbhLKFbinIS4RXzI8RWptUmUrfAufndBbwyO3yijMsBR8opJF0jNBpXdIi8SKrAosVuasvwwB0yyN5aeJTP6zj6gOKNyl27ukCd8QtWIhEwzABbpPXF9tZBuBm7pun7RKmOdDtpBFklN5Y2WR27DgkNltHm-0q0><p><strong>导航：用户输入url请求到页面解析的整个过程</strong></p><ol><li>   浏览器主进程接收用户输入 url，主进程将 url 转发给网络进程；</li><li>   网络进程发起 url 请求后网络进程接收响应头数据并解析响应头数据，并将数据发送浏览器主进程；</li><li></li></ol><h2 id="1-浏览器主进程-——-处理用户输入"><a href="#1-浏览器主进程-——-处理用户输入" class="headerlink" title="1. 浏览器主进程 —— 处理用户输入"></a>1. 浏览器主进程 —— 处理用户输入</h2><p>浏览器地址栏进行以下操作</p><div style="background: #fff">    <pre class="mermaid">    graph TD;        E{beforeunload}        A(fa:fa-user 用户输入) --> B{判断用户输入关键字}        B -->|用户搜索| C[搜索引擎会合成带搜索关键字的 url]        B -->|符合 url 规则| D[加协议合成完整的 URL]        C --> E        D --> E        E --> |用户同意继续后续流程|F[等待提交文档页面进入加载状态]        E --> |beforeunload取消导航|G[留在当前页面]</pre></div>`beforeunload 允许退出前清除数据；或询问用户是否离开`<span id="more"></span><h2 id="2-网络进程-——-URL-请求过程"><a href="#2-网络进程-——-URL-请求过程" class="headerlink" title="2. 网络进程 —— URL 请求过程"></a>2. 网络进程 —— URL 请求过程</h2><p>浏览器主进程会通过进程间通信（IPC) 把 url 请求发送至网络进程。接下来网络进程发起真正的 url 请求流程。</p><div style="background: #fff"><pre class="mermaid">graph TD;  A[网络进程] --> B{本地缓存}  B -->|有缓存| browser[浏览器主进程]  B --> D[网络请求]  D --> |1.获取服务品IP端口号<br/>2.如果是https协议需要建立TLS链接|DNS[DNS解析]  DNS --> TCP[建立 tcp 连接]  TCP --> |"浏览器构建请求头请求行cookie等数据，向服务器发起构建请求"| S[服务端解析请求并生成响应数据]  S --> |"返回响应头，响应行，响应体"| A</pre></div><ol><li>   网络进程第一步要找缓存，如果有缓存，直接返回资源给浏览器主进程；否则进程 dns 解析，获取 ip 和 端口。</li><li>   第二步，<strong>通过 ip 与 服务器 建立 tcp 链接</strong>，若 https 请求，还需要建立 TLS 连接；</li><li>   然后浏览器构建请求行、请求头，并把和该域名相关的 cookie 等数据加入请求头；</li><li>   接着向服务器发送请求信息；</li><li>   最后服务器根据请求生成响应信息（响应头，响应体，响应行等），并发给网络进程</li></ol><h3 id="网络进程-——-解析响应头"><a href="#网络进程-——-解析响应头" class="headerlink" title="网络进程 —— 解析响应头"></a>网络进程 —— 解析响应头</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ curl -I http://taobao.com/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回以下响应信息</span></span><br><span class="line"><span class="comment"># HTTP/1.1 302 Found</span></span><br><span class="line"><span class="comment"># Server: Tengine</span></span><br><span class="line"><span class="comment"># Date: Tue, 17 Nov 2020 09:05:14 GMT</span></span><br><span class="line"><span class="comment"># Content-Type: text/html</span></span><br><span class="line"><span class="comment"># Content-Length: 258</span></span><br><span class="line"><span class="comment"># Connection: keep-alive</span></span><br><span class="line"><span class="comment"># Location: http://www.taobao.com/</span></span><br></pre></td></tr></table></figure><h4 id="状态码（status-code）"><a href="#状态码（status-code）" class="headerlink" title="状态码（status code）"></a>状态码（status code）</h4><p>以上为访问 <a href="http://taobao.com/">http://taobao.com</a> 返回的响应头，网络进程开始解析响应头，状态码 302，网络进程从响应头中取 location 中取地址 <code>重定向</code> 到 <a href="http://www.taobao.com(状态码/">http://www.taobao.com（状态码</a> 301 同理）<br>响应状态码 200，响应头继续解析。<a href="https://helenzhanglp.github.io/2019/06/12/http-%E8%AF%B7%E6%B1%82%E7%8A%B6%E6%80%81%E7%A0%81/">状态码详解</a></p><h4 id="响应类型（content-type）"><a href="#响应类型（content-type）" class="headerlink" title="响应类型（content-type）"></a>响应类型（content-type）</h4><p><code>content-type</code> 返回的数据类型<br><code>text/html</code> 返回的是 html 类型，浏览器会继续渲染。<br>如果 <code>content-type: application/octet-stream</code> 类型，那么显示的数据是字节流类型的。请求会被提交给<strong>浏览器的下载管理器，同时 url 结束导航</strong></p><div style="background: #fff"><pre class="mermaid">graph TDA[网络进程] --> |解析响应头| statusCode{"状态码是301 || 302"}statusCode -->|301/302| main[主进程<br/>重定向]statusCode -->|200| contentType[解析文件类型]contentType --> octetStream{is octetSteam?}octetStream --> |content-type: application/octet-stream| E["下载管理器处理，url 导航结束"]octetStream --> |content-type: others| E2[继续导航]</pre></div><h2 id="3-准备渲染进程"><a href="#3-准备渲染进程" class="headerlink" title="3. 准备渲染进程"></a>3. 准备渲染进程</h2><h3 id="同一站点（same-site）"><a href="#同一站点（same-site）" class="headerlink" title="同一站点（same-site）"></a>同一站点（same-site）</h3><blockquote><p>根域名 + 协议，一致的站点都是<strong>同一站点</strong>。</p></blockquote><ul><li>根域名 taobao.com</li><li>协议 （http/https）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://www.taobao.com</span><br><span class="line">http://ali.taobao.com:8888</span><br></pre></td></tr></table></figure><p><strong>以上两个 url 属于同一站点，虽然子域名和端口号不同。即是否同一站点，只需要判断根域名与协议是否一致</strong></p><h3 id="process-per-site-instance"><a href="#process-per-site-instance" class="headerlink" title="process-per-site-instance"></a>process-per-site-instance</h3><p>默认一个标签对应一个渲染进程，同一站点，会有渲染进程合并的情况，称为 process-per-site-instance</p><h2 id="4-提交文档"><a href="#4-提交文档" class="headerlink" title="4. 提交文档"></a>4. 提交文档</h2><p>提交文档是指浏览器进程将网络进程接收到的 HTML 数据提交给渲染进程。</p><pre class="mermaid">    sequenceDiagram    participant networtProcess    participant browserProcess    participant renderProcess    networtProcess->>browserProcess: 响应头，看看吧    browserProcess->>renderProcess: 要提交文档哦    renderProcess->>networtProcess: 建立数据通道吧    networtProcess->>renderProcess: 发送数据    renderProcess->>browserProcess: 确认提交哦    Note right of browserProcess: 浏览器进程在收到“确认提交”的消息后，会更新浏览器界面状态（包括安全状态、地址栏的 URL、前进后退的历史状态），并更新 Web 页面。</pre><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><img  src=http://www.plantuml.com/plantuml/svg/TLFTIXj15BwVfnYy5zfw8UH2QEj51P6muWFCxfx6GJEpdPrjx5rI1DEVg86sf3484R6XKAEGOgbA7gRkxEGjEhjfR2VTNCsUl--SxtndNRw3vrp1Ao48N2QKuK1m3y9m3WL4IEhHW3298nDUOK4aBUycOVusPFvb8ebT8RRNo4jQ8f8BA-20JmLuDb8Wm9ZW0FD15CSJM0aUPy-fA2zpBoe3a-kHMwOIV2kd0cwHb62L4zz431Hs-Gv2RagHWQnmiPNFBZIv6ywg0oyY2Et1113VWJ3WB8HdvXl4pF0Jxh-QwYeoFZEQPXGcXEnj4152IkKnyrCswpmI7lp5lbS3pozDYr30gjLFFlHK_KeTTfB1YHwsZ2VL0yVz6rt_YgOgyBn1iUJwryYYze8AU5Hjw-4UNYa-nNS_zfFRPdBTqSEZfFVEHEw6NSIu12neQLCYzVr0Vwd7dtlgU3U-_gdxL-hoTNmw-5MjeR6Xk-zJ8pvigauZVjirkV51SrIj9UrT8ppVee2IRs_KnmlLEC-saCAZ_wN9PftSLm4lF7Y8LVsJUH_zUHVnVGVT7wZM_gXJrMUrqLuZFc-R_cXIdCDwLh_yqyrnZZ5jrMqpovXrwTEdDcwUVodvxgp2-ab-0m00>]]></content>
      
      
      
        <tags>
            
            <tag> browser </tag>
            
            <tag> 浏览器工作原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器工作原理（3-1）网络进程相关</title>
      <link href="/2020/11/14/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%883-1%EF%BC%89%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BD%91%E7%BB%9C%E8%BF%9B%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
      <url>/2020/11/14/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%883-1%EF%BC%89%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BD%91%E7%BB%9C%E8%BF%9B%E7%A8%8B%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><ul><li>FP (First Paint) 页面从加载到首次绘制的时长，是衡量 Web 页面性能的重要指标，网络加载速度会影响到 FP 指标。</li><li>互联网是一套理念和协议组成的体系架构</li></ul></blockquote><p><strong>网络的加载速度</strong> 是影响 FP 的重要因素；FP 标志了用户的跳出率，pv，参与度，用户转换率。<br><strong>优化网络加载速度</strong>，要充分了解网络，理解网络的关键是网络协议。互联网网络协议 HTTP、WebSocket 都是基于 TCP/IP 的。</p><p>那么问题来了：</p><ol><li>web 世界中，TCP/IP 是如何工作的呢？</li><li>在网络中，一个文件通常被拆分成很多数据包传输，如何保证页面文件能被完整的送达浏览器？</li></ol><h2 id="数据包与数据的传输"><a href="#数据包与数据的传输" class="headerlink" title="数据包与数据的传输"></a>数据包与数据的传输</h2><h3 id="数据包如何送达主机"><a href="#数据包如何送达主机" class="headerlink" title="数据包如何送达主机"></a>数据包如何送达主机</h3><p>互联网中数据是通过数据包传递。如果数据量很大时会拆成很多小的数据包传输。<br><font color="#a33">IP 把数据包送达目标主机</font>，<strong>数据包在互联网上进行传输需要符合网络协议（Internet Protocol, IP）标准。</strong>计算机的地址就称为 IP 地址，访问任何网站实际上只是你的计算机向另外一台计算机请求信息。</p><img  src=http://www.plantuml.com/plantuml/svg/SoWkIImgAStDuIeeoY_9JyxFKV0CU3PrmxFUTKzxMXMgkHIKuJmk1LtFWEUT7S_chE5Iq7wsQm9GgSBJEHkUpcq0yf_FNlTyLWkoaExpAVEVhftnRFgsbzEtSDK20000><h3 id="主机如何将数据包转交给应用"><a href="#主机如何将数据包转交给应用" class="headerlink" title="主机如何将数据包转交给应用"></a>主机如何将数据包转交给应用</h3><h3 id="数据包是如何被完整地送达应用程序"><a href="#数据包是如何被完整地送达应用程序" class="headerlink" title="数据包是如何被完整地送达应用程序"></a>数据包是如何被完整地送达应用程序</h3><blockquote><p>计算机地址称为 IP 地址，访问任何网站实际上只是你的计算机向另一台计算机请求信息</p></blockquote><img  src=http://www.plantuml.com/plantuml/svg/hLFBQi905DtdAmQpJZuWWc1M5RfmBowcPhJIaCXan9OYz6b5McX14K6aj4A5Wcr1YiJsRvn4_w9vQXxQ1tGp3FVUS-RSS-zWL21GASa89ERJ5dqxIm2eWMfb5nuX3DXYiPYKomhY9QZj8oa9ZXa02X1BO3wT6NqzRLVlgnf9EnalH_MssHxPAIX966bQ6h1GBXVGdbn57fzAYCLdtmKxQe7hOMhHfnQ_fHP_HsqTham-nn8C5Qq2CL98da-vRp1r1g-jC3_lp5dVTqD1fARYWxzO4eJiHEqn1gTq_61qtvVTIIRxipSWvs01C3glniruUJwYpOONuZZEkorx5xHrdydIuSI9vBTO6fKcRfSc_fEqJ1POgXPFZyRWTl7IeCrdUgN747b_K77pkF3Gk5IyY_M0-TG61fQWGo9WNti98wGa1KyslRwSwqDprblDVOCAqM5s5t8BczKX_JY9SBhVojglu89HlUDlbwJMbCXg2O5ccNWljeu0AY21MOStsI26Ynd_c_EHJn42XWJ4IrSlCby0><p><strong>上图解析</strong></p><ol><li> 上层将数据包交给网络层；</li><li> 网络层将 ip 头附加到数据包上，组成新的 IP数据包，交给底层；</li><li> 底层通过物理网络将数据包传给主机b;</li><li> 数据包被传输到主机 b 的网络层，主机 b 拆开数据包的 ip 头信息，并将拆开来的数据部分交给上层；</li><li> 最终，数据包到达主机 b 的上层</li></ol><h3 id="2-1-2-主机如何将数据转交给应用-——-UDP（User-Datagram-Protocol-把数据包送达应用程序"><a href="#2-1-2-主机如何将数据转交给应用-——-UDP（User-Datagram-Protocol-把数据包送达应用程序" class="headerlink" title="2-1-2.  主机如何将数据转交给应用 —— UDP（User Datagram Protocol) 把数据包送达应用程序"></a>2-1-2.  主机如何将数据转交给应用 —— UDP（User Datagram Protocol) 把数据包送达应用程序</h3><p>IP 只负责把数据包传送到对方电脑<br>UDP 是基于IP之上与应用程序打交道的协议<br><font color="red">UDP 的重要信息是<strong>端口号</strong></font>，端口号是数字，每个想访问网络的程序都需要绑定一个端口号。</p><blockquote><p>IP 通过 IP 地址把数据包发送给指定的电脑，而 UDP 通过端口号把数据包分发给正确的程序</p></blockquote><img  src=http://www.plantuml.com/plantuml/svg/hLJBIiD05DtdAmQpJZ-W1Q71XOABRboLBiPcMiMObCaK5H54iOfKy54NWeXWmOBW0roKjFenqcdhobymoSoaawHM2q88cRbtpfnxpyd5g4YWLJOHcEcrZ-dBtWo03gXM5k4Mma0jbKePSzL2AGCwAyZ8W6q5W2B41kYrE_rhD-jdhzWEoGOH7gDkOz1e-I5e61WvJXQeq5mjecMpYZYUJOY7vt-d_Ltly4uKMXVG-aHe_M_GtelHJELLWg7bL2165YcaPjaToew2fLPqRuVl5w8RBD_6PEgcBCtbPF9L1-4vI60Pm_KSjebTjCrVwODy0010__AvV_B85vgcyI__3jfy3LQ5IMty0ndzlzY0Zzs6zu3X_HtjxehThsvz-5IZHm_qq6NdUsvpqBbYpcFIIdMCDECg1VrKonWXYyU2ehmmymaFHQGSl9qDEjT2IWkH3HklJIEaV6G-xlI5N7RQbdtkj-XHRQACylv2xZTnumJrA47z_mYEv-VJzdJktvp6n9M0Ga6JtTIYFwGscon8686BFGP49MYJfB6eAl119iqBelK3Ubwl6XNcjj0HO-ZeeTS2P_q0ormTWdCJYvdX-Kys87KlXViCUyEAMIyjrQuaw_BPIASa5ifeUrnBz6Yo8YPwAZR_OiDDYSswHBfyJuHlCZKag7m3><p>为支持 UDP 协议，把前面的三层协议扩充为四层，在网络层与上层之间加了传输层，上面的具体分析如下：</p><ul><li>上层将应用的数据包交给传输层</li><li>传输层在数据包前加UDP头，组成 UDP 数据包，再将 UDP 数据包传输给网络层</li><li>网络层再将 IP 头附加到 UDP 数据包，组成新的 IP 数据包，并交给底层</li><li>底层将 IP 数据包交给 主机B 的网络层</li><li>主机B 网络层，拆开 IP 头，将 UDP 数据包交给传输层</li><li>传输层将 UDP 头拆开，**并根据 UDP 中所提供的端口号，把数据交给上层应用程序</li><li>上层应用中主机B，拿到相应的数据包</li></ul><blockquote><p>UDP 发送数据不可靠，有各种因素会导致数据包出错，对于错误的数据包，不提供重发机制，发送后无法知道是是否到达目的地。但其传输速度非常快。多在在线视频、互动游戏中使用</p></blockquote><h3 id="2-1-3-使用-TCP-将数据完整的传达给应用"><a href="#2-1-3-使用-TCP-将数据完整的传达给应用" class="headerlink" title="2-1-3.  使用 TCP 将数据完整的传达给应用"></a>2-1-3.  使用 TCP 将数据完整的传达给应用</h3><p>UDP 存在两个问题：</p><ol><li> 传输过程中容易丢包；</li><li> 大文件拆分成多个小文件传输，这些文件会经过不同的路由器，在不同的时间送达接收端。UDP 不知道如何组装这些数据包，把这些数据包还原成完整的文件。</li></ol><blockquote><p>TCP(Transmission Control Protocol,传输控制协议)。面向链接、可靠、基于字节流的传输层通信协议。</p></blockquote><p>TCP 的优点在于：</p><ol><li> 对于丢包的情况会提供重传机制；</li><li> TCP 引入数据包排序机制，保证乱序数据包组合成一个完整的文件。</li></ol><p><font color="red">TCP 头除了包含目标端口号和本机端口号，还提供了用于排序的序列号，以便接收端通过序号来重排数据包</font></p><img  src=http://www.plantuml.com/plantuml/svg/hLJBIiD05DtdAmQpJZ-W1Q5ne-2Y2tVYOcocMempCXbH4K4K7qW57tKXY0WM50GVu4BIwiT8fwqhVy4aCnCdIQqMX5AIkVUUEVUUaqjHcK4yvo8mqduvu4zR8m1wO7bf4guX2inAfL9mgnZb7EZD8wS0rWq0of0weFtIx5punJ1xddYi64LaZFlrRlqs3477eSZpYi24RhMCPjrb9F48Om5U-9mFJuFYZIIqhQ3jWT3stw23Fq4pDsqo2h6t12d2R2OtAkumDWogZQ9rrNixLTCG-OIoeOSoDLRIoKT0YrNFgn8yHZ2Zn2rHmaYPkBzs0QOZ700wPu-TmtlvObcMV0gluetdw6rcq3J_pid-BrBWVRCU_43lvfgtDjNfPwlMUzZb-tTypnVrRR_HRPuB7mgXjNQ-5PIQHTCrvoX2MCQYteAmS8qC9OJjlXvtcnTAM8pO2g4BmyYgbuodVJzHAWuxie_jMxw_Er1D_NoYz9l6QO9sag3zVmJxymjf1pftBezIucf0iQ3PQLh9pzCQpJQaZ235xWDYChJAybHr5VcWa9SDyTeEFwa5nS9jiIFwqB5ZhqNE-W5Mk3e6boPM6oJmdsv0xfyfzpba1QUibzTwDx9zXMoqAes5yNtSRoHsCjbG-psNseQfLMUaDbycNRydmJUR6XCqlW00><h2 id="完整的-TCP-连接过程"><a href="#完整的-TCP-连接过程" class="headerlink" title="完整的 TCP 连接过程"></a>完整的 TCP 连接过程</h2><p><strong>TCP是如何保证重传机制和数据包的排序功能</strong></p><pre class="mermaid">sequenceDiagrampar 三次握手 建立连接客户端->>服务器: 第一次握手服务器-->>客户端: 第二次握手客户端->>服务器: 第三次握手endpar 传输数据服务器-->>客户端: &nbsp;服务器-->>客户端: &nbsp;服务器-->>客户端: &nbsp;客户端->>服务器: &nbsp;客户端->>服务器: &nbsp;endpar 四次挥手 断开连接客户端->>服务器: &nbsp;服务器-->>客户端: &nbsp;服务器-->>客户端: &nbsp;客户端->>服务器: &nbsp;end</pre><p>TCP 的生命周期包括：<code>建立连接</code>、<code>传输数据</code>、<code>断开链接</code></p><ul><li><p><strong><code>建立连接阶段</code><strong>：这个阶段是<u>通过“三次握手”</u>来<font color="red">建立客户端和服务器之间的连接。</font><br>TCP 提供</strong>面向连接</strong>的通信传输。<u><strong>面向连接</strong>是指在数据通信开始之前先做好两端之间的准备工作。</u><br>所谓三次握手，是指在建立一个 TCP 连接时，客户端和服务器总共要发送三个数据包以确认连接的建立。</p></li><li><p><strong><code>传输数据阶段</code><strong>：在该阶段，<u>接收端需要对每个数据包进行确认操作</u>，也就是接收端在接收到数据包之后，需要发送确认数据包给发送端。所以当发送端发送了一个数据包之后，在规定时间内没有接收到接收端反馈的确认消息，则判断为数据包丢失，并触发发送端的重发机制。同样，一个大的文件在传输过程中会被拆分成很多小的数据包，这些数据包到达接收端后，<u>接收端会</strong>按照 TCP 头中的序号</strong>为其排序</u>，从而保证组成完整的数据。</p></li><li><p>**<code>断开连接阶段</code>**：数据传输完毕之后，就要终止连接了，涉及到最后一个阶段“四次挥手”来保证双方都能断开连接。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> browser </tag>
            
            <tag> 浏览器工作原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器工作原理（2）浏览器进化史</title>
      <link href="/2020/11/14/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%882%EF%BC%89%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E8%BF%9B%E5%8C%96%E5%8F%B2/"/>
      <url>/2020/11/14/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%882%EF%BC%89%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E8%BF%9B%E5%8C%96%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="知识点目录："><a href="#知识点目录：" class="headerlink" title="知识点目录："></a>知识点目录：</h2><blockquote><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a><a href="#processesAndThreads">进程和线程</a></h3><pre><code>   进程和线程相关以及合并处理</code></pre><h3 id="单进程浏览器时代"><a href="#单进程浏览器时代" class="headerlink" title="单进程浏览器时代"></a><a href='#TheEraOfSingleProcessBrowser'>单进程浏览器时代</a></h3><pre><code>   单进程浏览器时代的问题在于插件、渲染进程、主线程都处于同一进程，会引发安全、稳定性和流畅性的问题</code></pre><h3 id="多进程浏览器时代"><a href="#多进程浏览器时代" class="headerlink" title="多进程浏览器时代"></a><a href="#multiProcessBrowserEra">多进程浏览器时代</a></h3><h3 id="面向服务的框架（Services-Oriented-Architecture-SOA）"><a href="#面向服务的框架（Services-Oriented-Architecture-SOA）" class="headerlink" title="面向服务的框架（Services Oriented Architecture, SOA）"></a><a href="#serviceOrientedArchitecture">面向服务的框架（Services Oriented Architecture, SOA）</a></h3></blockquote></blockquote><p><strong>Chrome 启动一个页面需要启动多少进程——<code>启动 Chrome 任务管理器查看</code></strong></p><blockquote><p>chrome 选项 -&gt; more tools -&gt; task manager<br><img src="/images/browser/task-manager.png" alt="img"></p></blockquote><span id="more"></span><p>看上图，思考为什么打开一个页面要启动那么多的进程呢?</p><p>浏览器网络进程<br>浏览器页面渲染过程<br>JavaScript 执行流程<br>Web 安全理论</p><p>Chrome 浏览器多进程架构<br>国内大部分主流浏览器都是基于 Chromium 二次开发<br>Chrome 是目前世界上使用率最高的浏览器</p><p>浏览器多进程架构<br>基于 Chrome 分析浏览器多进程架构</p><h2 id="1-进程和线程"><a href="#1-进程和线程" class="headerlink" title="1. 进程和线程"></a><a id="processesAndThreads">1. 进程和线程</a></h2><p>多线程并行处理任务<br>线程由进程启动管理，不能单独存在</p><h3 id="1-1-并行处理"><a href="#1-1-并行处理" class="headerlink" title="1-1. 并行处理"></a>1-1. 并行处理</h3><blockquote><p>同一时间处理多个任务</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span>+<span class="number">2</span></span><br><span class="line">b = <span class="number">2</span>*<span class="number">1</span></span><br><span class="line">c = <span class="number">3</span>%<span class="number">2</span></span><br></pre></td></tr></table></figure><p>以上代码分四个任务<br>前三个任务是分别计算 a,b,c，<br>第四个任务是计算结果。<br>如果采用单线程，则按顺序执行四个任务。<br><u>多线程分两步，第一步是三个线程同时执行前三个任务；第二步执行第四个任务。</u><br><font color="red">多线程 <strong>并行处理提升性能</strong></font></p><blockquote><p>线程是依附于进程的，而进程中使用多线程并行处理提升运算效率</p></blockquote><p><font color="red"><strong>线程依附于进程，进程中使用多线程并行处理能提升运算效率</strong></font></p><h3 id="1-3-进程和线程之间的关系"><a href="#1-3-进程和线程之间的关系" class="headerlink" title="1-3. 进程和线程之间的关系"></a>1-3. 进程和线程之间的关系</h3><ol><li> 进程中做任意一线程执行出错，会导致整个线程崩溃</li><li> 线程之间共享进程中的数据</li><li>当一个进程关闭后，操作系统会回收进程所占用的内存<br> 当一个进程关闭之后，操作系统会回收进程所申请的所有资源；即使其中任意线程因为操作不当导致内存泄漏，当进程退出时，这些内存也会被正确回收。</li><li>进程之间的内容相互隔离<br> 进程隔离是为了保护系统中进程互不干扰的技术。每个进程只能访问自己占有的数据，避免出现进程A写入数据到进程B。进程之间的数据严格隔离，如果一个进程崩溃或挂起，不会影响到其他进程。如果进程之间需要进行数据通信，需要使用用于进程间通信（IPC）机制</li></ol><h2 id="2-单进程浏览器时代"><a href="#2-单进程浏览器时代" class="headerlink" title="2. 单进程浏览器时代"></a><a name="TheEraOfSingleProcessBrowser">2. 单进程浏览器时代</a></h2><blockquote><p>浏览器的所有功能模块<font color="red">（像网络、插件、javascript 运行环境、渲染引擎和页面）</font>运行在同一个进程里。多个功能模块运行在一个进程中，导致浏览器不稳定、不安全、不流畅。</p></blockquote><p>单进程浏览器包括了其他线程、网络线程和<font color="red"><strong>页面线程</strong>，页面渲染、展现、JavaScript 环境插件都运行在页面线程中</font><br>如此多的模块运行在一个线程中，会导致以下问题：</p><h3 id="2-1-不稳定"><a href="#2-1-不稳定" class="headerlink" title="2-1. 不稳定"></a>2-1. 不稳定</h3><p>2007 年以前的浏览器大多是单进程，一些如 web 视频、web 游戏等功能需要借助插件实现。插件易出问题并且运行在浏览器进程中，一个插件崩溃，会导致整个浏览器崩溃。渲染引擎同样不稳定，一些复杂的 JavaScript 代码会使得渲染引擎模块崩溃。进而使得浏览器崩溃。</p><h3 id="2-2-不安全"><a href="#2-2-不安全" class="headerlink" title="2-2. 不安全"></a>2-2. 不安全</h3><p>不安全同样是<strong>因为需要实现高级功能的插件引起</strong>的，插件用 C/C++ 编写，可获取操作系统的任意资源，当页面运行一个恶意插件时，它便可以释放病毒、窃取帐号密码从而引发安全问题<br><strong>页面脚本</strong>同样可以通过浏览器的漏洞获取系统权限，这些脚本获取系统权限后，同样可以做些恶意的事情</p><h3 id="2-3-不流畅"><a href="#2-3-不流畅" class="headerlink" title="2-3. 不流畅"></a>2-3. 不流畅</h3><p>单进程浏览器中，页面的渲染模块、JavaScript 执行环境以及插件都运行在同一个线程中，也就意味着同一时刻只能有一个模块可以执行。<br>一个无限循环的脚本 会占整个线程，会导致其它运行在该线程中的模块没有机会执行，整个浏览器失去响应，变卡顿。<br>页面内存泄漏，当运行一个复杂点的页面再关闭，会存在内存不能完全回收，时间越长，内存占用越高，浏览器会越慢<br><font color="red">脚本、插件、页面的内存泄漏</font>都是单进程浏览器变卡顿的原因</p><h2 id="3-多进程浏览器时代"><a href="#3-多进程浏览器时代" class="headerlink" title="3. 多进程浏览器时代"></a><a name="multiProcessBrowserEra">3. 多进程浏览器时代</a></h2><h3 id="3-1-早期的多进程浏览器时代"><a href="#3-1-早期的多进程浏览器时代" class="headerlink" title="3-1. 早期的多进程浏览器时代"></a>3-1. 早期的多进程浏览器时代</h3><img  src=http://www.plantuml.com/plantuml/svg/fPBBJi9068NtVOg9RfG5xWjXeIjT4Ls2Yr86RT9qI5lq0I2A5wHU8w8IeWak56-W3RNmCktCkF8LR2bg2ruMxfepPxwU__p38r64l2eWIG5ZkBnd6K-qLoLNMqbf8YxcbWG9n6N4GqMP70ES0h9zRI21yKmc4n452ORJdB8Cq_rlDYNc8CFm0RB-W6lxd-HvAAMX72JBVMs4xD4af48W2qlBAa2POIid2ZnqROCeI5NzKI8iyF-UzZHQtyOF5TAyj_IRjvVjf6Jf9PetwQrXhrL8_PfKZorzavmKyE4TBZNzbfrdkto4zqkMUKeU3MBKy5d-jQ9v0LMK_N-yLessBbYGbA9EWqXcPPYEXKAqSO7FjL0eEjLNOqF77i5_FCUjS0kyB6HLW3SQpiIsLiH5ZPYxh_MsNUsIZNM62Mup74wCkuaMmy4HM30Rds6Od09vJe5WMaQhoa-RYe040y0WcokuuTfbsYZQbIjBDxmXlu8wvea1yFCvE9g3ICLy4uuYl9uiVOkQ9cqNS4VxG4QdKh5l4AHP9zgQEyeVHdpS9PST_qx8GSsjxgJWzHQul_XBYy6cMBV5uDlutViE><p><strong><center>【2008 年 Chrome 进程框架图】</center></strong></p><p>Chrome<br>页面运行在渲染进程中，<br>页面中的插件运行在插件进程中，<br>进程之间通过 IPC 机制进行通信</p><h4 id="3-1-1-解决不稳定"><a href="#3-1-1-解决不稳定" class="headerlink" title="3-1-1. 解决不稳定"></a>3-1-1. 解决不稳定</h4><p>单进程浏览器不稳定的原因有两个：<br>一是插件崩溃导致的，在多进程浏览器中，插件由插件进程中。进程之间相互隔离，不会影响到其它进程。<br>二是渲染引擎引起的不稳定同理。</p><h4 id="3-1-2-解决不安全"><a href="#3-1-2-解决不安全" class="headerlink" title="3-1-2. 解决不安全"></a>3-1-2. 解决不安全</h4><p>渲染页面是在沙箱中进行的，不能在硬盘上写入任何数据，也不能在敏感位置读取数据，恶意程序不能通过沙箱破坏系统，解决了 <strong>不安全</strong> 的问题。</p><h4 id="3-1-3-解决不流畅"><a href="#3-1-3-解决不流畅" class="headerlink" title="3-1-3. 解决不流畅"></a>3-1-3. 解决不流畅</h4><p>JavaScript 渲染进程中，阻塞渲染进程，并不会影响到浏览器其它页面，脚本运行在自己的渲染进程中，死循环影响的仅仅是当前页面的渲染进程，解决了 <strong>不流畅</strong> 的问题。<br>内存泄漏，只需要关闭当前页面，资源就能被系统回收。</p><h3 id="3-2-目前的多进程框架"><a href="#3-2-目前的多进程框架" class="headerlink" title="3-2. 目前的多进程框架"></a>3-2. 目前的多进程框架</h3><img  src=http://www.plantuml.com/plantuml/svg/ZPDBJnDH5CVt_HGdiD4coCADgOO5cXXTaH3SK1P3U_kGuKupCyZ2a80bjD2MbY9IeGMAe5KfHLDWR3lqoznxPxhoAtWxC_GbCSwivd-UltFEoCYd2ZWe8XZYxt0W47WiXZ5wu1UK4FB3MnU0AWMH6aAozG7WaqIH1uKbhC2GsytIMLA_CflxHYdXTdlnlGbn8HZ6C25BFgGezuT0K21YQOxKhUAP5HTGRpsh09PK178u65912Wo62cBOXth295L5_fva7Z2hXsRrqsrR6REO_Dr8UZ5f5ipA2j5IfB57zuziEwr-PRMe5zDAmunLsMNQ_1Ad7qiqcsmLBrk5OvhUfVeFkfswarpxoGwtUyXbXFr8xWFlamR1kxGY2bYm0-xzi9w_i3tGsuEnjygEDDgCadgTRXIz-Cdi6BrOWv0wBuxw56NqjV16K7noEA9wiQcViTGnqMh6-nABNzDqXTHFIUs4rB8yZqt_P7Hsp8lPPjPOZzF63jlUX75UVWxuVE0bJpPf9GF7viNmwX6qeZhBLUp1qtp9h9pQtH6jp7cNN7SSb23x0IDrKPBd_eaEqvO_WDjjw5j6FNyxUqUsD--OBbTPBKCtZanTTypaLuAkfuYUvzH4MoRQDrOgqi9kfzVE_dixRZyilsmsjup4cV4zGMCrLZZb9zMNwCC5dveTPiNCTCd6PMbHwLbgf3t1BacdAD7g0pnjvVEAGxMJv1jXkHlZfEQOxStPEtCaMiuujt1UD39hjsecoNQlM3f3RlPfEKVVbOpoEjquDAEwqsots-SJK_-x0-uwq31NWC-1nWjcyPfV0Jq_C3OluE4pU3ev2MmdpWxoZgil94lpgEqDKo_0fcl5Ofp9oi97RDHpD7xLcQPrEVt_nyZqi2eBM8a8N5TdHiRwZyYrvFe3><ul><li><strong>浏览器进程</strong>：主要负责界面显示、用户交互、子进程管理，提供存储等功能</li><li><strong>渲染进程</strong>：它的核心任务是将 html/css/javascript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都运行在该进程中。默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程运行在沙箱模式下。</li><li><strong>GPU进程</strong>：GPU 的初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome UI界面都选择采用 GPU 来绘制。</li><li><strong>网络进程</strong>：主要负责网络资源加载。</li><li><strong>插件进程</strong>：负责插件运行，保证插件崩溃不影响浏览器页面</li></ul><p>因为每个进程都会包含基本框架副本，多进程浏览器会 <strong>占用更高资源</strong>，这就意味着浏览器会消耗更多内存资源。更复杂的体系架构，模块之间会有耦合高，扩展性差。现在的框架难适应新的需求。</p><h2 id="面向服务的架构-Services-Oriented-Architecture-SOA"><a href="#面向服务的架构-Services-Oriented-Architecture-SOA" class="headerlink" title="面向服务的架构(Services Oriented Architecture,SOA)"></a><a name = "serviceOrientedArchitecture">面向服务的架构(Services Oriented Architecture,SOA)</a></h2><p>也就是说 Chrome 会朝向现代操作系统所采用的“面向服务的架构”方向发展，原来的各种模块会被重构成独立的服务（Service），每个服务都在独立的进程中运行。访问服务必须采用接口，通过 ipc 来通信，从而构建一个更内聚，松耦合、易于维护和扩展的系统，更好的实现 Chrome 简单、稳定、高速、安全的目标。</p><img  src=http://www.plantuml.com/plantuml/svg/bLDDJnDH5DttLzoKZJQXBDoOIbYWYT4L2S4DPJ6qhnyol24pWomC2GPYYsqf5FaGMg08iIfID0N6JiV-cVVUJ5V-1HypG-aKGcndrNlFkVUU-ywLKKGLS5n4uETVNomMUo8cCGf61IM1el3M1w1ASQGca6p_0OX8eiX9IGahu0y4MBv0z0khkMjMCe5063yO4MVZIGmZiXH1YlBG3u82CtRC3Trq2KsAiwYpdzq0Ioe2EHbFg235kgc2c8oW3fgagYZQKIm4LctVgds-7clLAcV_Dh9XJ9ebg_gEQ3dIsA6x1qwUrhwo-c8Oqsh3IjNOUTxwagQVAhIGRPNFMwL3cj-Yna-wdhjJkVQBxQztA9SHZYBP8zmJwXP-erP4CLji5zmhDdHBTWWwPp1tbjY1HfkBHDVfXt8O3quEqRFta52dnO68eWoy5ju8IaHEpgXXR1adB7T8jBhviSBIbpHV9VengH-HUe7NSTGF3amEXJ5RAPZBQThOOEihCCpRJm7V3xpanKRjOk3cmXXUFORMei6sgyxYQR5YLO-TwOZsW-kTzzrXA46E0aRgd2HFtIiTncqyG21W6ckcNhpUlHjsNjvDdI-n-YhzS60PXficlpDqEKUC8bTDj0MYVMELCYrjjMTjlt_dn5S_LbomccjcviJydg6fEYiTSqjv2csUyQqvD9ipSQFCtovBDDs1sDOObgKvnUiDTo70VN1zbMCld27ltiWjk2E-9mhRJF5Bw8bYdVwXHwcUA5ncB2cYdZZ-O33elmThcydTylEHiV_r3eTs6OT7WByVJPUiyYLtBptTCrVEuD4pU3ew2cmZpVQABZIIaALfT8NcJmFcHfRVIIkLubTaL-7MCFLjchveky0UqdlN_UDzgYnWPKRWSNMYVyXhVj-yxny0>]]></content>
      
      
      
        <tags>
            
            <tag> browser </tag>
            
            <tag> 浏览器工作原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器工作原理（3）浏览器是多进程架构</title>
      <link href="/2020/11/13/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%883%EF%BC%89%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84/"/>
      <url>/2020/11/13/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%883%EF%BC%89%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="Chrome-打开一个页面需要启动多少进程"><a href="#Chrome-打开一个页面需要启动多少进程" class="headerlink" title="Chrome 打开一个页面需要启动多少进程"></a>Chrome 打开一个页面需要启动多少进程</h2><blockquote><p><code>启动 Chrome 任务管理器查看</code> —— chrome 选项 -&gt; more tools -&gt; task manager<br>windows 可查看任务管理器<br><img src="/images/browser/task-manager.png" alt="img"></p></blockquote><ul><li>process id</li><li>cpu</li><li>network</li><li>mermory footprint</li><li>task</li></ul><p><strong>一个 task 对应 一个 process id，可以理解为一个任务启动一个进程</strong></p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><blockquote><p>是一个程序的运行实例。即启动一个程序时，操作系统为该程序创建一块<strong>内存</strong>。用于存放代码、运行中的数据及一个执行任务的主线程。它是一个<strong>运行环境。</strong></p><ul><li>进程是 CPU 资源分配的最小单位，是拥有资源和独立运行的最小单位</li></ul></blockquote><img  src=http://www.plantuml.com/plantuml/svg/IquiIb5GUh5_zlCLtOyQfW3HY_qJNYpiUTwt_kcYPYM5QYu51OMKn9B4fCJYL303992McPEgK99Hb9gO0kBcvQUaAYG32QvQ0000>    <p><code>如：有任务 A,B,C,D</code></p><h3 id="并行处理"><a href="#并行处理" class="headerlink" title="并行处理"></a>并行处理</h3><blockquote><p>计算机中的并行处理是指同一时刻处理多个任务</p></blockquote><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><blockquote><ul><li>线程是 CPU 调度的最小单位</li></ul></blockquote><h3 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h3><blockquote><p>一个线程是指执行一个任务, A,B,C,D 依次执行</p></blockquote><pre class="mermaid">    graph LR    subgraph 进程        subgraph 主线程            taskA[任务 A] --> taskB[任务 B] --> taskC[任务 C] --> taskD["任务 A，B，C 结论"]        end        data[(数据)]        file[文件]    end</pre><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><blockquote><p>同时开启多个线程执行多个任务, 即，三个线程分别执行 A,B,C，再执行 D</p></blockquote><pre class="mermaid">    graph LR    subgraph 进程        subgraph 线程            subgraph 线程A                taskA[任务 A]            end            subgraph 线程B                taskB[任务 B]                taskD[任务 D]            end            subgraph 线程C                taskC[任务 C]            end        end        data[(数据)]        file[文件]    end</pre><h2 id="多进程的浏览器"><a href="#多进程的浏览器" class="headerlink" title="多进程的浏览器"></a>多进程的浏览器</h2><img  src=http://www.plantuml.com/plantuml/svg/ZPDBJnDH5CVt_HGdiD4coCADgOO5cXXTaH3SK1P3U_kGuKupCyZ2a80bjD2MbY9IeGMAe5KfHLDWR3lqoznxPxhoAtWxC_GbCSwivd-UltFEoCYd2ZWe8XZYxt0W47WiXZ5wu1UK4FB3MnU0AWMH6aAozG7WaqIH1uKbhC2GsytIMLA_CflxHYdXTdlnlGbn8HZ6C25BFgGezuT0K21YQOxKhUAP5HTGRpsh09PK178u65912Wo62cBOXth295L5_fva7Z2hXsRrqsrR6REO_Dr8UZ5f5ipA2j5IfB57zuziEwr-PRMe5zDAmunLsMNQ_1Ad7qiqcsmLBrk5OvhUfVeFkfswarpxoGwtUyXbXFr8xWFlamR1kxGY2bYm0-xzi9w_i3tGsuEnjygEDDgCadgTRXIz-Cdi6BrOWv0wBuxw56NqjV16K7noEA9wiQcViTGnqMh6-nABNzDqXTHFIUs4rB8yZqt_P7Hsp8lPPjPOZzF63jlUX75UVWxuVE0bJpPf9GF7viNmwX6qeZhBLUp1qtp9h9pQtH6jp7cNN7SSb23x0IDrKPBd_eaEqvO_WDjjw5j6FNyxUqUsD--OBbTPBKCtZanTTypaLuAkfuYUvzH4MoRQDrOgqi9kfzVE_dixRZyilsmsjup4cV4zGMCrLZZb9zMNwCC5dveTPiNCTCd6PMbHwLbgf3t1BacdAD7g0pnjvVEAGxMJv1jXkHlZfEQOxStPEtCaMiuujt1UD39hjsecoNQlM3f3RlPfEKVVbOpoEjquDAEwqsots-SJK_-x0-uwq31NWC-1nWjcyPfV0Jq_C3OluE4pU3ev2MmdpWxoZgil94lpgEqDKo_0fcl5Ofp9oi97RDHpD7xLcQPrEVt_nyZqi2eBM8a8N5TdHiRwZyYrvFe3><h3 id="浏览器主进程"><a href="#浏览器主进程" class="headerlink" title="浏览器主进程"></a>浏览器主进程</h3><blockquote><p>负责浏览器界面显示，用户交互；<br>负责各页面管理，创建、销毁其它进程<br>将Renderer进程得到的内存中的Bitmap，绘制到用户界面上<br>子进程管理；<br>文件存储等</p></blockquote><h3 id="网络进程"><a href="#网络进程" class="headerlink" title="网络进程"></a>网络进程</h3><blockquote><p>页面浏览器主进程和渲染进程提交网络资源下载功能</p></blockquote><h3 id="GPU-Graphics-Processing-Unit-进程"><a href="#GPU-Graphics-Processing-Unit-进程" class="headerlink" title="GPU(Graphics Processing Unit) 进程"></a>GPU(Graphics Processing Unit) 进程</h3><blockquote><p>GPU，图形处理器，设计初衷是为了 3D CSS 效果。Chrome 的 UI 界面都选择采用 GPU 来绘制，因 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。</p></blockquote><h3 id="插件进程"><a href="#插件进程" class="headerlink" title="插件进程"></a>插件进程</h3><blockquote><p>因插件易崩溃，独立为单独的进程，避免因插件崩溃引起整个浏览器无法运行。插件进程，只有使用插件时才会创建</p></blockquote><h3 id="utility进程"><a href="#utility进程" class="headerlink" title="utility进程"></a>utility进程</h3><blockquote><p>有时候浏览器主进程需要做一些“危险”的事情，比如图片解码、文件解压缩。如果这些“危险”的操作发生了失败，会导致整个主进程发生异常崩溃，这是我们不愿意看到的。因此Chromium设计出了一个utility进程的机制。主进程临时需要做一些不方便的任务的情况下，可以启动一个utility进程来代替主进程执行，主进程与utility进程之间通过IPC消息来通信。</p></blockquote><h3 id="渲染进程"><a href="#渲染进程" class="headerlink" title="渲染进程"></a>渲染进程</h3><blockquote></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> browser </tag>
            
            <tag> 浏览器工作原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器工作原理（1）认识浏览器</title>
      <link href="/2020/11/13/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%881%EF%BC%89%E8%AE%A4%E8%AF%86%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
      <url>/2020/11/13/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%881%EF%BC%89%E8%AE%A4%E8%AF%86%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器的三大进化路线"><a href="#浏览器的三大进化路线" class="headerlink" title="浏览器的三大进化路线"></a>浏览器的三大进化路线</h2><ol><li> 应用程序 Web 化<br>应用程序 web 化的原理在于<strong>云计算</strong>的普及和<strong>HTML5技术</strong>的快速发展，越来越多的应用转向了浏览器/服务器（B/S)架构。视频、音频、游戏几大核心场景都在往 Web 的使用场景切换。</li><li> Web 应用的移动化<br>Web 应用在技术层面的问题：</li></ol><ul><li>渲染过于复杂、性能不及原生应用</li><li>离线时用户无法使用</li><li>无法接收消息推送</li><li>移动端没有一级入口<blockquote><p>Google 推出了 PWA 方案来整合 Web 和本地程序各自的优势、</p></blockquote></li></ul><span id="more"></span><ol start="3"><li> Web 操作系统化<br>3-1.  利用 Web 技术构建一个纯粹的操作系统（如 ChromeOS）<br>3-2.  浏览器底层结构往操作系统架构方向发展</li></ol><ul><li>Chrome 朝着 SOA 的方向演化，未来很多模块都会以服务的形式提供给上层应用使用；</li><li>在浏览器中引入多种编程语言的支持，如 WebAssembly；</li><li>简化渲染流程，使渲染过程更加直接高效；</li><li>加大对系统设备特性的支持；</li><li>提供对复杂 Web 项目开发的支持。</li></ul><h2 id="Web-应用到底能做什么"><a href="#Web-应用到底能做什么" class="headerlink" title="Web 应用到底能做什么"></a>Web 应用到底能做什么</h2><h2 id="未来适用于哪些新领域"><a href="#未来适用于哪些新领域" class="headerlink" title="未来适用于哪些新领域"></a>未来适用于哪些新领域</h2><p><font color="red"><strong>浏览器已经逐步深化成操作系统之上的<code>操作系统</code></strong></font></p><h2 id="浏览器工作原理有哪些帮助"><a href="#浏览器工作原理有哪些帮助" class="headerlink" title="浏览器工作原理有哪些帮助"></a>浏览器工作原理有哪些帮助</h2><ol><li> 准确评估 Web 开发项目的可行性<br>web 高速渲染动画，快速交互</li><li> 从更高维度审视页面<br>常见的几个用户体验指标：</li></ol><ul><li>当用户请求一个网站时，1秒内看不到关键内容，用户会产生任务被中断的感觉</li><li>当用户点击某些按钮时，100ms 内无法响应，用户会感受到延迟</li><li>如果 web 动画没有达到 60fps, 用户会感受到动画卡顿<blockquote><p>首屏显示涉及了 DNS、HTTP、DOM 解析、CSS 阻塞、JavaScript阻塞等技术因素。</p></blockquote></li></ul><ol start="3"><li> 在快节奏的技术迭代中把握本质<br>Node.js 是前端发展的一个核心推动力，它基于 Chrome 的 JavaScript 引擎 V8 来实现，特点是脱离浏览器环境执行 JavaScript<h3 id="前端技术是如何针对这些核心的需求演进的？"><a href="#前端技术是如何针对这些核心的需求演进的？" class="headerlink" title="前端技术是如何针对这些核心的需求演进的？"></a>前端技术是如何针对这些核心的需求演进的？</h3>3-1. 脚本执行速度问题</li></ol><ul><li>更新语言，出 ES6/ES7/ES8，或者 TypeScript 改动小，推行容易。解决 JavaScript 设计缺陷和执行效率问题</li><li>使用新语言，如 WebAssembly(WebAssembly 经过编译器编译，体积小、执行速度快，提升执行效率。但语言本身的完善和构建需要时间)<br>3-2. 前端模块化开发<br>WebComponents,React/vue 都在渐进地适应 WebComponents<br>3-3. 渲染效率问题</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> browser </tag>
            
            <tag> 浏览器工作原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器工作原理——http</title>
      <link href="/2020/11/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94http/"/>
      <url>/2020/11/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94http/</url>
      
        <content type="html"><![CDATA[<p>为什么很多站点第二次打开速度会很快？<br>http(Hyper text transfer protocol) 与 tcp（transmission control protocol） 的区别</p><p>HTTP 是一种<u>允许浏览器向服务器发起资源的请求</u>的<strong>协议</strong>，是 Web 的基础。</p><p>XHR -&gt; Request Headers -&gt; view source</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /shakespeare/jsd/exchange_rates/current HTTP/1.1</span><br><span class="line">Host: www.jianshu.com</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Accept: application/json</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: cors</span><br><span class="line">Sec-Fetch-Dest: empty</span><br><span class="line">Referer: https://www.jianshu.com/p/6dbcc3aff98b</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line">Cookie: __yadk_uid=b5C1W8FTbvn2CMErMOWLRvRBfqtcfZyR; _ga=GA1.2.1361763253.1581860875; __gads=ID=e22e0402239bcdd8-22e9450047c200f4:T=1593494469:RT=1593494469:S=ALNI_MbgAdC1pDH1wBUKwaWC6teLb00cyg; read_mode=day; default_font=font2; locale=zh-CN; UM_distinctid=175537082be1a1-08e93312a69e19-4d112a29-38400-175537082bf1b5; CNZZDATA1278917561=2017572215-1603418142-https%253A%252F%252Fwww.jianshu.com%252F%7C1603447023; sensorsdata2015jssdkcross=%7B%22distinct_id%22%3A%2216e7305e1e716c-046300c902b66b-123b6a5d-1024000-16e7305e1e881a%22%2C%22%24device_id%22%3A%2216e7305e1e716c-046300c902b66b-123b6a5d-1024000-16e7305e1e881a%22%2C%22props%22%3A%7B%22%24latest_referrer%22%3A%22https%3A%2F%2Fwww.baidu.com%2Flink%22%2C%22%24latest_traffic_source_type%22%3A%22%E8%87%AA%E7%84%B6%E6%90%9C%E7%B4%A2%E6%B5%81%E9%87%8F%22%2C%22%24latest_search_keyword%22%3A%22%E6%9C%AA%E5%8F%96%E5%88%B0%E5%80%BC%22%7D%7D; _gid=GA1.2.1053313438.1605150552; _m7e_session_core=559108e9b8dcd6adff1770cd4662ce96; signin_redirect=https://www.jianshu.com/p/6dbcc3aff98b; Hm_lvt_0c0e9d9b1e7d617b3e6842e85b9fb068=1604707994,1604975982,1605150555,1605156601; _gat=1; Hm_lpvt_0c0e9d9b1e7d617b3e6842e85b9fb068=1605170209</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="浏览器发起-HTTP-请求流程"><a href="#浏览器发起-HTTP-请求流程" class="headerlink" title="浏览器发起 HTTP 请求流程"></a>浏览器发起 HTTP 请求流程</h2><ol><li><p> 构建请求</p><blockquote><p>GET /shakespeare/jsd/exchange_rates/current HTTP/1.1</p></blockquote></li><li><p> 查找缓存<br>浏览器缓存是在本地保存资源副本，以供下次请求时直接使用的技术。如果浏览器资源的副本存在，请求被拦截，返回副本，结束请求。从而缓解服务器压力，提升性能。对于网站来说，缓存是实现资源加载最重要的部分。</p></li><li><p> 准备 IP 和 端口 并等待 TCP 队列<br>如果浏览器请求缓存资源失败，就会进入网络请求。<br>怎么通过 url 获取 ip 地址和端口号呢？ip 地址是数字标识，从请求里面可获取，如下请求 ip 地址为 47.92.108.93：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Request URL: https://www.jianshu.com/shakespeare/jsd/exchange_rates/current</span><br><span class="line">Request Method: GET</span><br><span class="line">Status Code: 200 OK</span><br><span class="line">Remote Address: 47.92.108.93:443</span><br><span class="line">Referrer Policy: no-referrer-when-downgrade</span><br></pre></td></tr></table></figure><p>ip 数字难记。我们一般记的是域名，如上请求 <code>jianshu.com</code>，需要使用 <strong>域名系统</strong> （Domain Name System，DNS）将域名和ip进行映射。浏览器有<code>DNS</code>数据缓存服务。**<code>总结下来：第一步浏览器从 DNS 缓存数据里面查找 ip，如果没有再请求 DNS 返回域名对应的 ip</code>**<br>端口号在没有指定的情况下是 80 端口，像上面的案例中，端口号为 443。</p></li></ol><blockquote><p>chrome 机制，同一个域名最多只建立 6 个 tcp 链接，多于 6 个请求会进入排队等待状态，走到进行中的请求完成。</p></blockquote><ol start="4"><li><p> 建立 TCP 连接<br>三次握手，传输数据，断开链接</p></li><li><p> 发送 HTTP 请求<br>建立 TCP 链接后浏览器和服务器便可以通信了。</p></li></ol><ul><li>发送请求行，包括请求方法、请求的 URI(Uniform Resource Identifier)统一资源标识、HTTP 版本协议<blockquote><p>GET /shakespeare/jsd/exchange_rates/current HTTP/1.1</p></blockquote></li></ul><p>上面的案例是 get 请求，除此之外还有 post 请求，即发送一些数据给服务器，浏览器会把需要发送给服务器的数据通过<code>请求体</code>发送。<br>发送请求行之后，浏览器还要以<code>请求头</code>形式发送一些其他信息，把浏览器的基本信息告诉给服务器。</p><blockquote><p>User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36<br>Host: <a href="http://www.jianshu.com/">www.jianshu.com</a><br>Cookie: __yadk_uid=b5C1W8FTbvn2CMErMOWLRvRBfqtcfZyR; _ga=GA1.2.1361763253.1581860875;</p></blockquote><h2 id="服务器处理-HTTP-请求"><a href="#服务器处理-HTTP-请求" class="headerlink" title="服务器处理 HTTP 请求"></a>服务器处理 HTTP 请求</h2><ol><li> 返回请求<br>可以通过命令 <code>curl -i https://www.jianshu.com/p/6dbcc3aff98b</code> 查看返回的请求数据，如响应行，响应头，响应体等数据<br><code>curl -I jianshu.com</code> -I 只获取响应头和响应行数据。</li></ol><p>Response Headers</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: Tengine</span><br><span class="line">Date: Thu, 12 Nov 2020 08:36:49 GMT</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">X-Frame-Options: DENY</span><br><span class="line">X-XSS-Protection: 1; mode=block</span><br><span class="line">X-Content-Type-Options: nosniff</span><br><span class="line">ETag: W/&quot;4a327be29535622a46f3b610df2a02c1&quot;</span><br><span class="line">Cache-Control: max-age=0, private, must-revalidate</span><br><span class="line">Set-Cookie: locale=zh-CN; path=/</span><br><span class="line">Set-Cookie: _m7e_session_core=559108e9b8dcd6adff1770cd4662ce96; domain=.jianshu.com; path=/; expires=Thu, 12 Nov 2020 14:36:49 -0000; secure; HttpOnly</span><br><span class="line">X-Request-Id: 503c9b5a-3190-4e2a-9060-ead15564caa1</span><br><span class="line">X-Runtime: 0.007053</span><br><span class="line">Strict-Transport-Security: max-age=31536000; includeSubDomains; preload</span><br><span class="line">Content-Encoding: gzip</span><br></pre></td></tr></table></figure><p><strong>响应行</strong> <code>HTTP/1.1 200 OK</code> 协议版本与状态码。我们这里的状态码是 200 表示处理成功，遇到其它无法处理或处理出错的会有其它的状态码，如：没有找到返回页面 404。301 状态码表示重定向，需要重定向的网址包含在 <strong>响应头</strong> Location 字段中。<br>服务器随响应向浏览器发送 <strong>响应头</strong> 信息。包括了：<br><code>Date: Thu, 12 Nov 2020 08:36:49 GMT</code> 返回数据的时间；<br><code>Content-Type: application/json; charset=utf-8</code> 返回数据的类型；<br><code>Set-Cookie: _m7e_session_core=559108e9b8dcd6adff1770cd4662ce96; domain=.jianshu.com; path=/; expires=Thu, 12 Nov</code> 服务器在客户端保存的 cookie。</p><ol start="2"><li> 断开链接<br>通常情况下，服务向浏览器返回数据后，会断开链接。<code>Connection: keep-alive</code> 表示 TCP 连接在发送后保持打开状态，浏览器可以通过同一个 TCP 发送请求。<strong>保持 TCP 连接可以省去下次请求建立连接的时间，提升资源加载速度</strong></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> browser </tag>
            
            <tag> 浏览器工作原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器兼容问题</title>
      <link href="/2020/11/10/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/"/>
      <url>/2020/11/10/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="windows-safari-浏览器对于-UTC-amp-amp-GMT-时间转换存在兼容性问题。"><a href="#windows-safari-浏览器对于-UTC-amp-amp-GMT-时间转换存在兼容性问题。" class="headerlink" title="windows safari 浏览器对于 UTC &amp;&amp; GMT 时间转换存在兼容性问题。"></a>windows safari 浏览器对于 UTC &amp;&amp; GMT 时间转换存在兼容性问题。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="comment">// Tue Nov 10 2020 11:58:59 GMT+0800 (China Standard Time)</span></span><br></pre></td></tr></table></figure><p>GMT(Greenwich Mean Time) 格林尼治标准时间<br>GMT+0800(China Standard Time) 北京时间</p><p>UTC(Universal Time Coordinated)协调世界时。当前的世界标准时间。<br>UTC 标准时间格式 <code>2019-11-11T00:00:00.000Z</code></p><ol><li><code>T</code>代表使用 UTC 时间。</li><li><code>Z</code>是 UTC 的偏移量，表示 UTC 时间与本地时间的差别，即时差。</li></ol><ul><li>Z 表示 0 时区，写 Z 或不写时表示不偏移。即 GMT/0 时区。</li><li>需要偏移时，将Z替换为真实的偏移量。偏移量可用以下形式表示: ±[hh]:[mm]、±[hh][mm]、±[hh]。</li><li>目前有39个UTC偏移量（当伊朗试行夏令时时只有38个）</li></ul><ol start="3"><li> 时间数值表示在限定 UTC 格式和偏移量的情况下，偏移时区的本地时间。</li></ol><p>UNIX TIME，也叫做 POSIX 时间或纪元时间（Epoch Time)，记录时间流逝，也叫时间戳。定义为从1970-01-01T00:00:00开始流逝的秒数，不考虑闰秒。之后的时间是正数，之前的是负数。</p><p>需要补充，转换方法</p>]]></content>
      
      
      
        <tags>
            
            <tag> browser </tag>
            
            <tag> grocery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 数组</title>
      <link href="/2020/11/06/Javascript-%E6%95%B0%E7%BB%84/"/>
      <url>/2020/11/06/Javascript-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>对于需要收集的 <strong>有序、具有索引的数据</strong> 的需求，可以使用数组</p><h2 id="数组使用过程中要注意的细节"><a href="#数组使用过程中要注意的细节" class="headerlink" title="数组使用过程中要注意的细节"></a>数组使用过程中要注意的细节</h2><p>数组的索引其实是数字为名称的特性，空项目则是连数字特性都不存在。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array1 = [<span class="literal">undefined</span>, <span class="literal">undefined</span>]</span><br><span class="line"><span class="keyword">var</span> array2 = []</span><br><span class="line">array2.<span class="property">length</span> = <span class="number">2</span></span><br><span class="line"><span class="comment">// array2 // [empty x 2]</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;0&#x27;</span> <span class="keyword">in</span> array1 <span class="comment">//true</span></span><br><span class="line"><span class="string">&#x27;0&#x27;</span> <span class="keyword">in</span> array2 <span class="comment">// false</span></span><br><span class="line">array2[<span class="number">0</span>] <span class="comment">// undefined ，属性不存在，为 undefined</span></span><br></pre></td></tr></table></figure><blockquote><p><font color="#f33s">建议不要修改数组的 length, 也不要让数组产生空项目，<u> JavaScript 中的数组 API 对数组空项处理方式不同</u></font></p></blockquote><p>map/filter/forEach 都会跳过空项，回调函数不会执行。但返回结果不一样，filter 不保留空项，map 会保留空项</p><h3 id="过滤除-undefined-，除-0，false-null-’’-等"><a href="#过滤除-undefined-，除-0，false-null-’’-等" class="headerlink" title="过滤除 undefined ，除 0，false,null,’’ 等"></a>过滤除 undefined ，除 0，false,null,’’ 等</h3><p>undefined 不是保留字，避免 undefined 被拿来当变量名称设定了其他的值，所以使用 typeof 确认值的类型名称</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ifUndefined</span>(<span class="params">obj, name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> obj[name] === <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组的静态方法"><a href="#数组的静态方法" class="headerlink" title="数组的静态方法"></a>数组的静态方法</h2><p>是以 Array 为命名空间的方法，包括以下几个：</p><h3 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h3><blockquote><p>Array.isArray() 的判断依据是<u>数组内部实现特性[[Class]]的值’Array’</u></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SubArray</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Array</span> &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> subArray = <span class="keyword">new</span> <span class="title class_">SubArray</span>()</span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>(subArray) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>用类语法继承，子类实例会被 Array.isArray() 判断为 true<br><font color="#f33">类语法的继承能继承标准 API，而且内部实现特性以及特殊行为也会继承</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">obj.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">obj <span class="keyword">instanceof</span> <span class="title class_">Array</span> <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(obj, <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">obj <span class="keyword">instanceof</span> <span class="title class_">Array</span> <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>对象原型被修改的类数组，可以骗过 instanceof 但 Array.isArray() 判断为 false</p><h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>) <span class="comment">// 创建一个长度为 10 的稀疏数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// (10) [empty × 10]</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2) <span class="comment">//(3)[1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>以上 demo 通过 Array 构造函数创建了数据，参数两层函数，一是数组的长度。二是数组的元素。较混乱<br/><br>常用字面量形式定义数组，方便，容易理解</p><blockquote><p>可使用 Array.of() 建立指定元素数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">10</span>) <span class="comment">// 建立一个元素为 10 的数组 [10]</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="literal">undefined</span>,<span class="number">4</span>) <span class="comment">// [1, 2, undefined, 4]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, , <span class="number">4</span>]</span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">1</span>,<span class="number">2</span>,,<span class="number">4</span>) <span class="comment">// Uncaught SyntaxError: Unexpected token &#x27;,&#x27;</span></span><br></pre></td></tr></table></figure><p><font color="#f33">Uncaught SyntaxError: Unexpected token ‘,’</font> 异常说明 与字面定义数组语法不同[1, 2, , 4]，Array.of() 不支持空项目</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SubArray</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Array</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> subArray = <span class="title class_">SubArray</span>.<span class="title function_">of</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">subArray <span class="keyword">instanceof</span> <span class="title class_">SubArray</span></span><br><span class="line">subArray <span class="comment">// SubArray(5) [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h3><p>Array.from() 可以接受类数组或可迭代对象，传回的新数组包含类数组或可迭代对象元素<br>Array.form() 从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="string">&#x27;helen&#x27;</span>) <span class="comment">// (5) [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;e&quot;, &quot;n&quot;]</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="string">&#x27;helen&#x27;</span>, <span class="function"><span class="params">item</span> =&gt;</span> item.<span class="title function_">toUpperCase</span>()) <span class="comment">// [&quot;H&quot;, &quot;E&quot;, &quot;L&quot;, &quot;E&quot;, &quot;N&quot;]</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="string">&#x27;helen&#x27;</span>, <span class="function">(<span class="params">item, idx</span>) =&gt;</span> !idx ? item.<span class="title function_">toUpperCase</span>() : item) <span class="comment">// [&quot;H&quot;, &quot;e&quot;, &quot;l&quot;, &quot;e&quot;, &quot;n&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubArray</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Array</span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> sub = <span class="title class_">SubArray</span>.<span class="title function_">from</span>(<span class="string">&#x27;helen&#x27;</span>) <span class="comment">// SubArray(5) [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;e&quot;, &quot;n&quot;]</span></span><br><span class="line">sub <span class="keyword">instanceof</span> <span class="title class_">SubArray</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="改变数组"><a href="#改变数组" class="headerlink" title="改变数组"></a>改变数组</h2><table><thead><tr><th>API</th><th>description</th></tr></thead><tbody><tr><td>sort</td><td>默认排序方式是按照 Unicode 码点，若元素不是字符串，会先转换为字符串再排序。<br />若要按指定方式排序，必须传入带有两个参数的回调函数，传回的值决定了排序方式。<strong>结果改变原数组</strong>，如下 demo —— sort 排序</td></tr><tr><td>reverse</td><td>反转数组后传回原数组 <strong>结果改变原数组</strong>, 如下 demo —— reverse 排序</td></tr><tr><td>fill</td><td>用某个值进行填充。三个参数：一是要填充的值，二是 start 填充值的起始索引；三是 end 填充值的结束索引。**可以直接使用 call() 或 apply() 指定 fill() 调用时的 this 对象。如下 demo —— fill 的使用</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sort 排序</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">100</span>,<span class="number">22</span>,<span class="number">3</span>,<span class="number">11</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">sort</span>())  <span class="comment">// [1, 100, 11, 22, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [1, 100, 11, 22, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">n1,n2</span>)=&gt;</span>n1-n2)) <span class="comment">// [1, 3, 11, 22, 100]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// reverse 排序</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">reverse</span>()) <span class="comment">// [100, 22, 11, 3, 1]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [100, 22, 11, 3, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fill 方法的使用</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">fill</span>.<span class="title function_">call</span>(&#123;<span class="attr">length</span>: <span class="number">2</span>&#125;, <span class="number">10</span>) <span class="comment">// &#123;0: 10, 1: 10, length: 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>) <span class="comment">// 创建一个长度为 10 的稀疏数组，稀疏数组不可遍历</span></span><br><span class="line">arr.<span class="title function_">fill</span>(<span class="literal">null</span>) <span class="comment">// 给数组填充 10 个 null 遍历</span></span><br></pre></td></tr></table></figure><h3 id="实现堆栈"><a href="#实现堆栈" class="headerlink" title="实现堆栈"></a>实现堆栈</h3><table><thead><tr><th>API</th><th>描述</th></tr></thead><tbody><tr><td>push</td><td>可接受一个或多个参数，接收的参数追加至数组结尾。返回数组长度。<strong>改变原数组</strong></td></tr><tr><td>pop</td><td>移除并返回数组的最后一个元素</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// push</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">100</span>,<span class="number">22</span>,<span class="number">3</span>,<span class="number">11</span>]</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>) <span class="comment">// 8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// (8)[1, 100, 22, 3, 11, 3, 5, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pop </span></span><br><span class="line">arr.<span class="title function_">pop</span>() <span class="comment">// 9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// (7)[1, 100, 22, 3, 11, 3, 5]</span></span><br></pre></td></tr></table></figure><blockquote><p>push + pop 可视为先进后出的堆栈结构使用</p></blockquote><h3 id="实现队列"><a href="#实现队列" class="headerlink" title="实现队列"></a>实现队列</h3><table><thead><tr><th>API</th><th>描述</th></tr></thead><tbody><tr><td>unshift</td><td>在数组的前端插入一个或多个元素，返回数组长度</td></tr><tr><td>shift</td><td>移除数组前端的第一个元素</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> queue = []</span><br><span class="line">queue.<span class="title function_">unshift</span>(<span class="number">1</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue) <span class="comment">// [1]</span></span><br><span class="line">queue.<span class="title function_">shift</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue) <span class="comment">// []</span></span><br></pre></td></tr></table></figure><blockquote><p>unshift + ship 可视为先进先出的队列</p></blockquote><p><a href="https://github.com/HelenZhangLP/demo/blob/draft/js/Array/index.html">有关数组 API push/pop/fill 的几个扩展 demo</a><br><font color="#f33">Array.prototype 定义的方法，都具有通用性，可以对普通的对象进行操作，操作结果会令指定的对象成为类数组，必要时，也可以直接将对象的原型设为 Array.prototype</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(o, <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">o.<span class="title function_">push</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">2</span>)</span><br><span class="line">o.<span class="title function_">sort</span>(<span class="function">(<span class="params">n1,n2</span>)=&gt;</span>n1-n2)</span><br></pre></td></tr></table></figure><h2 id="函数式风格-API"><a href="#函数式风格-API" class="headerlink" title="函数式风格 API"></a>函数式风格 API</h2><h3 id="有关函数式程序设计"><a href="#有关函数式程序设计" class="headerlink" title="有关函数式程序设计"></a>有关函数式程序设计</h3><table><thead><tr><th>API</th><th>描述</th></tr></thead><tbody><tr><td>indexOf</td><td>查找元素所在的第一个索引，返回 -1 代表没有该元素</td></tr><tr><td>lastIndexOf</td><td>查找元素所在的最后一个索引，返回 -1 代表没有该元素</td></tr><tr><td>includes</td><td>查找数组中是否有指定元素 <strong>ES7</strong>，返回值为 true/false</td></tr><tr><td>find</td><td>查找符合条件的元素，参数可以是一个回调函数。<strong>ES6</strong></td></tr><tr><td>findIndex</td><td>查找符合条件的元素的索引，参数同样可以是一个回调函数。<strong>ES6</strong></td></tr><tr><td>filter</td><td>过滤出符合条件的元素，返回的是一个数组</td></tr><tr><td>slice</td><td>数组切割，参数一，切割起始索引；参数二切割终止索引，若无，默认 array.length。不改变原数组，返回新的数组</td></tr><tr><td>concat</td><td>数组拼接，不改变原数组。返回拼接后的数组</td></tr><tr><td>every</td><td>判断数组是否都符合某个条件</td></tr><tr><td>some</td><td>判断数组中是否有符合条件的元素</td></tr><tr><td>join</td><td>使用字符串将数组串接为字符串</td></tr><tr><td>flat</td><td>二维数组摊平成一维数组（ES10）</td></tr><tr><td>flatMap</td><td>推平数组的同时进行数组元素的转换，接受回调函数，执行后返回一维数组</td></tr><tr><td>reduce</td><td>处理结果为单一的值，逐一削减数组，最终拿到单一值</td></tr><tr><td>reduceRight</td><td>从右向左迭代元素</td></tr></tbody></table><blockquote><p>以上三个 api 都是使用 === 来判断是否存在该元素<br>NaN !== NaN NaN 不等于任何值</p></blockquote><h4 id="查找数组中的-NaN"><a href="#查找数组中的-NaN" class="headerlink" title="查找数组中的 NaN"></a><font color="#f99">查找数组中的 NaN</font></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">indexOf</span>(<span class="params">arrays, value, idx = <span class="number">0</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (idx === arrays) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> ele = arrays[idx]</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(value) &amp;&amp; <span class="title class_">Number</span>.<span class="built_in">isNaN</span>(ele)) <span class="keyword">return</span> idx</span><br><span class="line">  <span class="keyword">if</span> (value === ele) <span class="keyword">return</span> idx</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">indexOf</span>(arrays, value, idx + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arrays = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="title class_">NaN</span>,<span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">indexOf</span>(arrays,<span class="title class_">NaN</span>)) <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 findIndex 回调函数中自己定义判断条件</span></span><br><span class="line"><span class="keyword">let</span> idx = arrays.<span class="title function_">findIndex</span>(<span class="function"><span class="params">ele</span>=&gt;</span><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(ele)) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(idx) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><font color="#f33">*   支持函数式范式的语言，特性之一是 <b>具备一级函数</b><br />*   纯函数式编程，**不提供循环语法**，使用递归解决重复性任务。<br />*   纯函数式编程中，没有变量的概念，也不能改变对象或数据状态。</font><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归1——思考边界条件</span></span><br><span class="line"><span class="comment">// 递归2——一次只做一件事</span></span><br><span class="line"><span class="comment">// 递归3——别管上层递归或下层递归的状态</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arrays 要遍历的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mapper 要执行的回调函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">*</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">map</span>(<span class="params">arrays, mapper</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(arrays.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> arrays <span class="comment">// arrays 是一个空数组</span></span><br><span class="line">  <span class="keyword">let</span> head = arrays[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> mapped = <span class="title function_">mapper</span>(head)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="title function_">map</span>(arrays.<span class="title function_">slice</span>(<span class="number">1</span>), mapper))</span><br><span class="line">  <span class="keyword">return</span> [mapped].<span class="title function_">concat</span>(<span class="title function_">map</span>(arrays.<span class="title function_">slice</span>(<span class="number">1</span>), mapper))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">map</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>],<span class="function"><span class="params">ele</span>=&gt;</span>ele*<span class="number">10</span>))</span><br></pre></td></tr></table></figure><h2 id="群集"><a href="#群集" class="headerlink" title="群集"></a>群集</h2><h3 id="Set-与-WeakSet"><a href="#Set-与-WeakSet" class="headerlink" title="Set 与 WeakSet"></a>Set 与 WeakSet</h3><p>使用 Set 收集不重复的值，Set 构造函数接收可迭代对象</p><table><thead><tr><th>API</th><th>描述</th></tr></thead><tbody><tr><td>String.prototype.split</td><td>将字符串按照指定字符进行切割，返回数组</td></tr><tr><td>Set.prototype.size</td><td>得到 Set 集合中元素的数量</td></tr><tr><td>Set.prototype.values</td><td>返回一个新的迭代对象，该对象包含 Set 对象中的按插入顺序排列的所有元素的值</td></tr><tr><td>Set.prototype.add</td><td>在 Set 集合尾部添加一个元素，返回该 Set 对象</td></tr><tr><td>Set.prototype.has</td><td>返回一个布尔值，表示该值在 Set 中是否存在</td></tr><tr><td>Set.prototype.delete</td><td>移除 Set 中与参数相等的元素</td></tr><tr><td>Set.prototype.clear</td><td>移除 Set 对象中的所有元素</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 收集以下字符串中不重复的值</span></span><br><span class="line"><span class="keyword">let</span> strArr = <span class="string">&quot;I&#x27;m mommy shark, she is baby shark, he is daddy shark&quot;</span>.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> words = <span class="keyword">new</span> <span class="title class_">Set</span>(strArr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(words.<span class="property">size</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(words.<span class="title function_">add</span>(<span class="string">&#x27;Confirming over the phone&#x27;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(words)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> *    0: &quot;I&#x27;m&quot;</span></span><br><span class="line"><span class="comment">      1: &quot;mommy&quot;</span></span><br><span class="line"><span class="comment">      2: &quot;shark,&quot;</span></span><br><span class="line"><span class="comment">      3: &quot;she&quot;</span></span><br><span class="line"><span class="comment">      4: &quot;is&quot;</span></span><br><span class="line"><span class="comment">      5: &quot;baby&quot;</span></span><br><span class="line"><span class="comment">      6: &quot;he&quot;</span></span><br><span class="line"><span class="comment">      7: &quot;daddy&quot;</span></span><br><span class="line"><span class="comment">      8: &quot;shark&quot;</span></span><br><span class="line"><span class="comment">      9: &quot;Confirming over the phone&quot;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(words.<span class="title function_">has</span>(<span class="string">&#x27;Confirming over the phone&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line">words.<span class="title function_">delete</span>(<span class="string">&#x27;Confirming over the phone&#x27;</span>)</span><br><span class="line">words.<span class="title function_">has</span>(<span class="string">&#x27;Confirming over the phone&#x27;</span>) <span class="comment">// false</span></span><br><span class="line">words.<span class="title function_">clear</span>()</span><br><span class="line">words.<span class="property">size</span> <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 value</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(words.<span class="title function_">values</span>()) <span class="comment">// SetIterator &#123;&quot;I&#x27;m&quot;, &quot;mommy&quot;, &quot;shark,&quot;, &quot;she&quot;, &quot;is&quot;,…&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(words)) <span class="comment">// [&quot;I&#x27;m&quot;, &quot;mommy&quot;, &quot;shark,&quot;, &quot;she&quot;, &quot;is&quot;, &quot;baby&quot;, &quot;he&quot;, &quot;daddy&quot;, &quot;shark&quot;]</span></span><br></pre></td></tr></table></figure><blockquote><p>set 本身无序，不具备索引。没有直接可取的 get 之类的方法，有关 Set 方法，见上表</p></blockquote><p><font color="#f33">ECMAScript 对 Set 采用 SameValueZero 演算 相等采用 ===，0 等于 -0, <u>Set 中若有 NaN，试图再加入 NaN，Set 中还是只有一个 NaN</u></font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Set</span>([<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>]) <span class="comment">// Set(4)&#123;NaN, 10, 1, undefined&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 即使相同属性，相同值的两个对象在 set 中也是不同的</span></span><br><span class="line"><span class="keyword">let</span> o1 = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> o3 = o2</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Set</span>([o1,o2,o3])</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set(2) &#123;&#123;…&#125;, &#123;…&#125;&#125;</span></span><br><span class="line"><span class="comment">   [[Entries]]</span></span><br><span class="line"><span class="comment">   0:</span></span><br><span class="line"><span class="comment">   value: &#123;x: 1&#125;</span></span><br><span class="line"><span class="comment">   1:</span></span><br><span class="line"><span class="comment">   value: &#123;x: 1&#125;</span></span><br><span class="line"><span class="comment">   size: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><font color="#f99">ES6 中也提供了 WeaKSet，只能加入对象，不能加入除对象以外的，如 null,undefined,NaN和一些基本类型；垃圾回收时不会考虑是否被 WeakSet<br>管理，只要对象没有其它名称参考着，就会回收。避免必须使用 Set 管理对象，却忘了从 Set 中清除对象而发生内存泄漏。由于对象没有引用就会被回收，所以WeakSet 没有 size，只有 add(),delete(),has()<br>方法</font></p><h3 id="Map-与-WeakMap"><a href="#Map-与-WeakMap" class="headerlink" title="Map 与 WeakMap"></a>Map 与 WeakMap</h3><p>历史：JavaScript 对象是键值对，键只能是字符串，不可以使用字符串以外的类型<br>现在：ES6 提供的 Map 类型，键可以使用基本类型、undefined、NaN、null 与对象，<strong>Map 对键的唯一性采用的是 SameValueZero 演算</strong></p><p>Map 的实例是可迭代对象，使用 for…of 迭代出的元素会是个包含键与值的数组，使用解构语法可以分解成</p><table><thead><tr><th>API</th><th>描述</th></tr></thead><tbody><tr><td>Map.prototype.size</td><td>返回 Map 对象的键/值</td></tr><tr><td>Map.prototype.has</td><td>返回布尔值，表示 Map 实例是否包含键对应的值</td></tr><tr><td>Map.prototype.clear</td><td>清除 Map</td></tr><tr><td>Map.prototype.keys</td><td>返回一个新的 Iterator 对象，插入顺序包含了Map对象中每个元素的键</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 过去</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> map = &#123;</span><br><span class="line">    [o]: <span class="string">&#x27;veriable&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map) <span class="comment">// &#123;[object Object]: &quot;veriable&quot;&#125;</span></span><br><span class="line"><span class="keyword">for</span> (o <span class="keyword">in</span> map) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> o) <span class="comment">// string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 提供 Map 类型</span></span><br><span class="line"><span class="keyword">let</span> mapES6 = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">mapES6.<span class="title function_">set</span>(o, <span class="string">&#x27;variable&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapES6) <span class="comment">// Map(1)&#123;&quot;[object Object]&quot; =&gt; &quot;variable&quot;&#125;[[Entries]]0: &#123;&quot;[object Object]&quot; =&gt; &quot;variable&quot;&#125;size: (...)__proto__: Map</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> o <span class="keyword">of</span> mapES6) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> o)  <span class="comment">// object</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapES6.<span class="title function_">get</span>(o)) <span class="comment">// variable</span></span><br></pre></td></tr></table></figure><blockquote><p>ES10 新增了 Object.fromEntries() 函数，建构对象时使用，接受可迭代物（如，数组、Map）作自变量，该对象迭代出来的每个元素都必须是[键，值]形式</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">fromEntries</span>([[<span class="string">&#x27;k1&#x27;</span>,<span class="string">&#x27;v1&#x27;</span>],[<span class="string">&#x27;k2&#x27;</span>,<span class="string">&#x27;v2&#x27;</span>]]) <span class="comment">// &#123;k1: &quot;v1&quot;, k2: &quot;v2&quot;&#125;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(<span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;k1&#x27;</span>,<span class="string">&#x27;v1&#x27;</span>],[<span class="string">&#x27;k2&#x27;</span>,<span class="string">&#x27;v2&#x27;</span>]])) <span class="comment">// &#123;k1: &quot;v1&quot;, k2: &quot;v2&quot;&#125;</span></span><br></pre></td></tr></table></figure><p><font color="#f99">WeakMap 只能使用除 null 以外的对象作为，垃圾回收时不会考虑对象是否被 WeakMap，只要对象没有被引用就会被回收。WeakMap<br>不存在对象作为键，值也会被清除。可以用来避免从Map中清除对象而发生内存泄漏</font></p><h2 id="数组重组方法"><a href="#数组重组方法" class="headerlink" title="数组重组方法"></a>数组重组方法</h2><h3 id="1-数组转换成字符串"><a href="#1-数组转换成字符串" class="headerlink" title="1.  数组转换成字符串"></a>1.  数组转换成字符串</h3><ul><li>Array.prototype.toString() 将数组转换成 <strong>以逗号分隔的字符串</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;cookie&quot;</span>, <span class="string">&quot;local storage&quot;</span>, <span class="string">&quot;session storage&quot;</span>, <span class="string">&quot;web storage&quot;</span>];</span><br><span class="line">arr.<span class="title function_">toString</span>();</span><br><span class="line"><span class="comment">// &quot;cookie,local storage,session storage,web storage&quot;</span></span><br></pre></td></tr></table></figure></li><li>Array.prototype.join([separator]) 将数组转换成 <strong>指定分隔符的字符串</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"><span class="comment">// &quot;cookie/local storage/session storage/web storage&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>注意：</code> 如果数组只有一个元素，则该连接字符不显示<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&#x27;category&#x27;</span>]</span><br><span class="line">arr1.<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"><span class="comment">// &quot;category&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-创建新数组"><a href="#2-创建新数组" class="headerlink" title="2.  创建新数组"></a>2.  创建新数组</h3></li></ul></li><li>Array.prototype.concat() 合并两个以上数组，最终拿到生成后的新数组，生成的新数组是需要合并的数组的浅拷贝。<ul><li><code>注意：</code>如果将引用类型复制到数组中,引用类型改变，新的数组数组发生改变，反之一样。因为他们指向同一个引用对象。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr_reference_type = [[<span class="string">&#x27;concat&#x27;</span>],<span class="string">&#x27;array prototype function&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> arr_concat = arr.<span class="title function_">concat</span>(arr_reference_type);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr_concat);</span><br><span class="line"><span class="comment">// [&quot;cookie&quot;, &quot;local storage&quot;, &quot;session storage&quot;, &quot;web storage&quot;, [&quot;concat&quot;], &quot;array prototype function&quot;]</span></span><br><span class="line"><span class="comment">// 修改 arr_reference_type</span></span><br><span class="line">arr_reference_type[<span class="number">0</span>].<span class="title function_">push</span>(<span class="string">&#x27;slice&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr_concat);</span><br><span class="line"><span class="comment">// [&quot;cookie&quot;, &quot;local storage&quot;, &quot;session storage&quot;, &quot;web storage&quot;, [&quot;concat&quot;, &quot;slice&quot;], &quot;array prototype function&quot;]</span></span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 单位</title>
      <link href="/2020/10/22/CSS-css3-%E5%8D%95%E4%BD%8D/"/>
      <url>/2020/10/22/CSS-css3-%E5%8D%95%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS-中长度单位"><a href="#CSS-中长度单位" class="headerlink" title="CSS 中长度单位"></a>CSS 中长度单位</h2><h3 id="CSS-中绝对长度单位【Absolute-Length-Units】"><a href="#CSS-中绝对长度单位【Absolute-Length-Units】" class="headerlink" title="CSS 中绝对长度单位【Absolute Length Units】"></a>CSS 中绝对长度单位【Absolute Length Units】</h3><table><thead><tr><th>单位</th><th>名称</th><th>等价交换</th></tr></thead><tbody><tr><td>cm</td><td>厘米</td><td>1cm=96px/2.54</td></tr><tr><td>in</td><td>英寸</td><td>1in = 96px = 2.54cm</td></tr><tr><td>px</td><td>像素</td><td>1/96th of 1in</td></tr></tbody></table><p>以上单位多用于打印，屏幕主要使用 <code>px</code></p><h3 id="CSS-中相对长度单位【Relative-Length-Units】"><a href="#CSS-中相对长度单位【Relative-Length-Units】" class="headerlink" title="CSS 中相对长度单位【Relative Length Units】"></a>CSS 中相对长度单位【Relative Length Units】</h3><blockquote><p>相对于一些其他元素，如父元素字体大小、视图端口大小。相对单位经过仔细规化，可以使元素大小与页面上其它内容对应</p></blockquote><table><thead><tr><th>单位</th><th>描述</th></tr></thead><tbody><tr><td>em</td><td>相对于父元素字体大小(font-size)进行计算</td></tr><tr><td>rem</td><td>相对于根元素字体大小(font-size)进行计算</td></tr><tr><td>vw</td><td>1vw = 1% 的视口宽度</td></tr><tr><td>vh</td><td>1vh = 1% 的视口高度</td></tr></tbody></table><h3 id="CSS3-中新增的单位"><a href="#CSS3-中新增的单位" class="headerlink" title="CSS3 中新增的单位"></a>CSS3 中新增的单位</h3><ul><li>ch 字符 0（零的宽度）；</li><li>rem 根元素（html元素）的 font-size；<blockquote><p>font size of the root element<br>Equal to the computed value of ‘font-size’ on the root element. when specified on the font-size property of the root element, the rem units refer to the property’s initial value.<br>This means that 1rem equals the the font-size html element (which for most browsers has a default value of 16px)</p></blockquote></li></ul><ol><li>字体或宽、高等单位，值根据 html 元素 font-size 计算得出</li><li>动态修改 html 的 font-size，实现适配</li><li>IOS6 和 Android 2.1 以上基本适配</li><li>1rem = html’s font size(大多数浏览器是 16px)</li></ol><ul><li>em 是一个相对单位，非固定值。相对于其父 font-size 计算</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天 30 词</title>
      <link href="/2020/10/22/EN-words/"/>
      <url>/2020/10/22/EN-words/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>词根</th><th>意思</th><th>造词</th></tr></thead><tbody><tr><td>syn</td><td>同时</td><td></td></tr><tr><td>chron</td><td>时间</td><td></td></tr><tr><td>ous</td><td>…的</td><td>synchronous 同步的<br/>asynchronous 非同时、异步</td></tr><tr><td>ion</td><td>表名词</td><td></td></tr><tr><td>gest</td><td>带来</td><td></td></tr><tr><td>ure</td><td>表行为</td><td>gesture n.手势/v.做手势，用手势表示</td></tr><tr><td>milli</td><td>千</td><td></td></tr><tr><td>second</td><td>秒</td><td>millisecond n.毫秒，千分之一</td></tr><tr><td>re</td><td>不</td><td></td></tr><tr><td>solut</td><td>松开</td><td>resolution n.决议，再次决定，有决心</td></tr><tr><td>pro</td><td>向前</td><td></td></tr><tr><td>file</td><td>纱线</td><td>profile n.概述、印象、简介 <br/> profiling n.资料搜集/v.概述</td></tr><tr><td>cell</td><td>小房子</td><td></td></tr><tr><td>ar</td><td>物</td><td>cellar n.地窖，地下室</td></tr><tr><td>e</td><td>出</td><td></td></tr><tr><td>valu</td><td>价值</td><td></td></tr><tr><td>ate</td><td>表动词</td><td>evaluate v.评估；评价</td></tr><tr><td>book</td><td>书</td><td></td></tr><tr><td>let</td><td>小</td><td>booklet n.小册子</td></tr><tr><td>chemist</td><td>化学家</td><td></td></tr><tr><td>ry</td><td>…学</td><td>chemistry n.化学</td></tr><tr><td>depend</td><td>依靠</td><td></td></tr><tr><td>able</td><td>…的</td><td>dependable adj.可靠的</td></tr><tr><td>de</td><td>加强</td><td></td></tr><tr><td>termin</td><td>界限</td><td></td></tr><tr><td>e</td><td>加强界限</td><td>determine v.查明、限定</td></tr><tr><td>para</td><td>辅助</td><td></td></tr><tr><td>meter</td><td>计量</td><td>parameter n.参数，范围，决定因素</td></tr></tbody></table><p>nest 鸟巢，鸟窝/v.筑巢<br>tradeoff n.权衡、协调，交易，交换<br>interval n.间隔，间隙<br>forwarding 转发，货运代理<br>gecko n.壁虎<br>minimum adj. 最小的/n.最小值<br>mutation n.突变、变异<br>observer n.观察者模式<br>raw adj.生的，未经烹制的<br>brew n.冲泡、沏、煮<br>prune n.干梅子/v.打权、裁减<br>material n.材料、实际的<br>accompany v.陪同<br>clerk n.职员<br>conductor n.指挥、列车长、售票员<br>owe v.欠债<br>semester n.学期</p><p>词根 deep<br>deep adj.深的、低沉的、深奥的<br>deepen vt.使加深；使强烈；使低沉/vi.变沉；更低沉<br>deepen the reform 深化改革<br>the need to conceal the mourning deepened grief<br>掩盖悲痛的需要加深了痛楚</p><span id="more"></span><p>cottage n.村舍、小屋<br>cot 婴儿床<br>I was halfway back to cottage<br>我在回小屋的半路上<br>We’ve got you a lovely little cottage on Spencer Hill<br>我们在斯宾塞山给你准备了一个舒适的小屋</p><p>gardener n.园丁，花匠，园艺爱好者<br>garden n.花园</p><p>The lawn hasn’t been moved. I’ve had it. We are getting a real gardener.<br>草坪根本没有修剪，我受够。我们需要一个专业的园丁<br>They can hire a gardener to do the work<br>他们可以聘请园丁来做这项工作</p><p>词根 cent 唱<br>incentive n.刺激；鼓励；激励</p><p>Awards provide an incentive for young people to improve their skills<br>奖励为年轻人提高他们的技能提供了动力</p><p>词根 avi 鸟<br>aviation n.航空，航空学，飞机制造业</p><p>With the development of aviation, the relations between nations become closer<br>随着飞机制造业的发展，国家间的关系变得更亲近了</p><p>词根 nerv 神经<br>nerve n.神经、勇敢、胆量；厚颜</p><p>have nerve 有勇气<br>get on one’s nerves 惹某人心烦<br>lose one’s nerve 失去勇气</p><p>there are close one million nerve fibers that connect the eyeball to the brain<br>连接眼球和大脑的细胞有接近 100 万个<br>Mum’s chatter often gets on his nerves<br>妈妈的唠叨经常让他心烦</p><p>词根 loc 地点<br>locate vi 定位、定居 vt 探明、找出、安置<br>locate in 在某一点设置；在…定居；坐落于<br>The university is located in a quite community<br>这所大学坐落于安静的社区</p><p>saint n.圣人；圣徒</p><p>After he died, the Church declared him a saint.<br>在他去世后，他生前所在教堂宣布他为圣徒</p><p>collaboration n.合作；勾结；通敌</p><p>There is substantial collaboration with neighboring departments<br>相邻的几个院系进行了通力合作</p><p>boarder 住宿生</p><p>词根 cell 密室，狭窄的空间<br>The box of papers had been stored in a cellar at the family home.<br>那盒文件已经存放在家里的地窖里</p><p>awkward adj.笨拙的；尴尬的；难操纵的</p><p>We are in some sort of an awkward position.<br>我们处于某种尴尬的境地</p><p>词根 broch 刺；缝<br>brochure n. 小册子</p><p>Please send me a copy of your company brochure.<br>请寄给我一份贵公司的宣传册</p><p>vain adj. 徒劳的；自负的；</p><p>be vain of<br>be vain about 为…自负<br>in vain 徒劳、无效</p><p>a lot of effort is made in vain.<br>很多努力都白费了<br>I was singing in a vain effort to cheer him up.<br>我唱歌试图让他高兴起来，结果白费力气</p><p>battalion n.军队；军营</p><p>He joined the second battalion of the Grenadier Guards.<br>他加入了英国近卫步兵第一团第二营</p><p>campus culture 校园文化<br>enterprise image 企业形象<br>heterogenous culture 异质文化<br>run out of 用完；耗尽<br>part with 放弃，交出，卖掉<br>look to 指望、依靠、展望<br>out of stock 无现货<br>May Fourth Movement 五四运动<br>air conditioner 空调<br>die out 逐渐消亡；灭绝<br>emancipate people’s minds 解放思想<br>strike off 砍掉；把…除名<br>member of a standing committee 常务委员</p><p>词根 tein 保持<br>protein n.蛋白质</p><p>protein-rich food 富含蛋白质的食物<br>Participating restaurants must promise to offer at least one children’s meal that has fewer than 600 calories, no soft drinks and at least two items from the following food groups: fruits, vegetables, whole grains, lean protein or low-fat dairy<br>参与的餐厅必须承诺提供至少一种儿童食物，这种儿童食物热量少于 600 卡路里，不包含饮料并且至少从以下食物组合中选择两项：水果，蔬菜，全谷类食物，瘦肉蛋白或低脂乳品</p><p>词根 mens 计算、测量<br>dimension n.尺寸；面积；方面；特点；规模；范围<br>The forest fire rapidly assumed great dimensions because of the high wind<br>因为风大，森林大火面积迅速扩大</p><p>horizon n.地平线；眼界，见识</p><p>broaden one’s horizon 开阔眼界<br>on the horizon 即将发生</p><p>The sun poked over the horizon<br>太阳从地平线升起</p><p>try vt.试图；试验；审判 vi.尝试，努力；n.努力<br>He was tried taking a bribe 他因受贿被审讯</p><p>damp adj.潮湿的，微湿的；n.潮湿；vt.抑制<br>damp down 减弱，抑制</p><p>He knew how to damp the flaming fire down.<br>他知道怎么抑制燃烧的火焰<br>Today is damp, cold and miserable<br>今天寒冷、潮湿、难以忍受</p><p>buckle n.搭扣，扣环/vt.扣住；使弯曲；vt.用搭扣扣紧；（被）压垮、压弯<br>buckle up 系上安全带<br>buckle down 开始认真从事；倾全力<br>The plane will take off soon, please buckle up your seat belts.<br>飞机马上起飞，请系紧您的安全带</p><p>ingredient n.组成部分，成分；原料；要素、因素</p><p>handful n.一把，少数，一小撮<br>a handful of 一把；少量的<br>In 1993, few corporations had a web page, and slightly a handful allowed one to order product or services online.<br>1993 年时，很少有公司拥有自己的网站。而只有几个公司允许人们通过网络下单或购买服务<br>She scooped up a handful of sand and let it trickle through her fingers.<br>她抓了一把沙子，然后让它们从指缝间慢慢漏掉</p><p>deficit n.赤字，亏空，亏损<br>a budget deficit 预算赤字<br>attention deficit hyperactivity disorder 多动症评估<br>This year’s profits have balanced last year’s trade deficit.<br>今年的盈利已经弥补了去年的贸易逆差</p><p>pool vt.共有；n.水塘；游泳池；共有物<br>pool out efforts 共同努力<br>together out efforts 共同努力<br>The girl has no choice but to dive into the pool<br>女孩别无选择，只能跳进水塘里</p><p>bold adj.大胆的<br>bold goals attract bold people 大胆的目标吸引大胆的人<br>She knew she had to make a bold move to fully to her new future.<br>她知道她必须采取大胆行动，全身心投入新的未来</p><p>restrain v.阻止；控制</p><p>compendium n.事实、概要<br>Compendium of Materia Medica 本草纲目</p><p>demo 人民；cracy 统治<br>democracy  n.民主，民主制；民主国家</p><p>As I would not be a slave, so I would not be a master. This expresses my idea of democracy.<br>我不想当奴隶，我也不愿做别人的主人。这是我对民主诠释。</p><p>guard n.守卫；护卫队、vi.保卫、监视<br>guard against 防止；提防<br>on guard 警惕；站岗<br>catch someone off guard 使人措手不及；<br>He said the Coast Guard should have a plan to respond to problems that may arise.<br>他说海岸护卫队应该有计划回复可能遇到的问题<br>These is no one to guard these isolated farms against attack.<br>没有人守卫那些孤立的农场抵御袭击</p><p>fall vi.落下；突然；来到/n.秋天；崩溃<br>fall back on 借助于，依靠<br>fall behind 落后，落在…后面<br>fall for 受…的骗；迷恋</p><p>session n.会议、一场<br>Several bills were enacted at the end of this session of Parliament<br>这场国会结束时，好几个提案制定成法律。</p><p>confident adj.坚信的，自信的<br>In recent years the capital’s culinary scene has developed to the point that it is now confident of its ability to please the tastes of any international visitor.<br>近几年，首都的餐饮业已经发展到有能力满足任何国际游客的品味。</p><p>vers = to turn<br>conversion n.转换、变换<br>The warehouse was undergoing conversion into apartments<br>这座仓库正在被改建成公寓</p><p>tain = to hold<br>container n.集装箱；容器<br>She trickled the water into container<br>她将水慢慢注入容器里</p>]]></content>
      
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macos 常用命令</title>
      <link href="/2020/10/22/macos/"/>
      <url>/2020/10/22/macos/</url>
      
        <content type="html"><![CDATA[<p>空难发生于最近，电脑硬盘坏了，换了新硬盘。新电脑，一切重新开始。</p><h2 id="homebrew-安装"><a href="#homebrew-安装" class="headerlink" title="homebrew 安装"></a>homebrew 安装</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br></pre></td></tr></table></figure><h3 id="curl-7-Failed-to-connect-to-raw-githubusercontent-com-port-443-拒绝连接-问题"><a href="#curl-7-Failed-to-connect-to-raw-githubusercontent-com-port-443-拒绝连接-问题" class="headerlink" title="curl: (7) Failed to connect to raw.githubusercontent.com port 443: 拒绝连接 问题"></a><font color="#f33">curl: (7) Failed to connect to raw.githubusercontent.com port 443: 拒绝连接 问题</font></h3><blockquote><p>DNS 污染造成的</p></blockquote><ol><li> 使用 <code>https://www.ipaddress.com/</code> 查询 <code>raw.githubbusercontent.com</code> 的正确 IP<br><img src="/images/macos/ipaddress.png" alt="img.png">    </li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim /etc/hosts</span></span><br><span class="line">185.199.108.133 raw.githubusercontent.com</span><br><span class="line">185.199.109.133 raw.githubusercontent.com</span><br><span class="line">185.199.110.133 raw.githubusercontent.com</span><br><span class="line">185.199.111.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure><blockquote><p>一个打脸的事实，安装好之后不要乱骚情，测试删除。使用的方法版本不对，结果又整出下面的妖</p></blockquote></li></ol><h3 id="fatal-unable-to-access-‘https-github-com-Homebrew-brew-39-LibreSSL-SSL-connect-SSL-ERROR-SYSCALL-in-connection-to-github-com-443"><a href="#fatal-unable-to-access-‘https-github-com-Homebrew-brew-39-LibreSSL-SSL-connect-SSL-ERROR-SYSCALL-in-connection-to-github-com-443" class="headerlink" title="fatal: unable to access ‘https://github.com/Homebrew/brew/&#39;: LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443"></a><font color="#f33">fatal: unable to access ‘<a href="https://github.com/Homebrew/brew/&#39;">https://github.com/Homebrew/brew/&#39;</a>: LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443</font></h3><p>步骤如上，<code>ipaddress</code> 中查找 <code>github</code> ip。hosts 中配置代理。我的配置如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">140.82.113.4 github.com</span><br></pre></td></tr></table></figure><h2 id="brew-安装-node"><a href="#brew-安装-node" class="headerlink" title="brew 安装 node"></a>brew 安装 node</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><h2 id="macos-解压文件-rar"><a href="#macos-解压文件-rar" class="headerlink" title="macos 解压文件 .rar"></a>macos 解压文件 .rar</h2><p>commands 参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">`e`             Extract files without archived paths # 解压缩文件到当前目录</span><br><span class="line">  `l[t[a],b]`     List archive contents [technical[all], bare]  # 列出压缩文件</span><br><span class="line">  `p`             Print file to stdout #打印文件标准输出设备</span><br><span class="line">  `t`             Test archive files # 测试压缩文件</span><br><span class="line">  `v[t[a],b]`     Verbosely list archive contents [technical[all],bare] # 详细列出压缩文件信息</span><br><span class="line">  `x`             Extract files with full path # 用绝对路径解压缩文件</span><br><span class="line"></span><br><span class="line">  ```bash</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">unrar x x.rar</span></span><br></pre></td></tr></table></figure><h2 id="macos-文件重命名-更多相关"><a href="#macos-文件重命名-更多相关" class="headerlink" title="macos 文件重命名 更多相关"></a>macos 文件重命名 <a href="https://www.cnblogs.com/liujiacai/p/8313548.html">更多相关</a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mv</span> 切图图片资源/ static</span><br></pre></td></tr></table></figure><h2 id="macos-复制文件"><a href="#macos-复制文件" class="headerlink" title="macos 复制文件"></a>macos 复制文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> webpack.config.js webpack.dev.config.js</span><br></pre></td></tr></table></figure><h2 id="macos-安装-tree-命令"><a href="#macos-安装-tree-命令" class="headerlink" title="macos 安装 tree 命令"></a>macos 安装 tree 命令</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><ul><li><code>cd $home</code></li><li><code>vim .bashrc</code></li><li><code>alias tree = &quot;find . -print | sed -e &#39;s;[^/]*/;|____;g;s;____|; |;g&#39;&quot;</code></li><li><code>source .bashrc</code></li></ul><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>也可以使用 homebrew 安装 tree 命令行：<br><code>1 $ brew install tree</code></p><h2 id="tree-命令解释"><a href="#tree-命令解释" class="headerlink" title="tree 命令解释"></a>tree 命令解释</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">usage: tree [-acdfghilnpqrstuvxACDFJQNSUX] [-H baseHREF] [-T title ]</span><br><span class="line">        [-L level [-R]] [-P pattern] [-I pattern] [-o filename] [--version]</span><br><span class="line">        [--<span class="built_in">help</span>] [--inodes] [--device] [--noreport] [--nolinks] [--dirsfirst]</span><br><span class="line">        [--charset charset] [--filelimit[=]<span class="comment">#] [--si] [--timefmt[=]&lt;f&gt;]</span></span><br><span class="line">        [--<span class="built_in">sort</span>[=]&lt;name&gt;] [--matchdirs] [--ignore-case] [--fromfile] [--]</span><br><span class="line">        [&lt;directory list&gt;]</span><br><span class="line">  ------- Listing options -------</span><br><span class="line">  -a            All files are listed. 列出所有的文件夹和目录</span><br><span class="line">  -d            List directories only. 仅列表目录</span><br><span class="line">  -l            Follow symbolic links like directories. 如果遇到符号链接目录，直接列表连接所指的原始目录</span><br><span class="line">  -f            Print the full path prefix <span class="keyword">for</span> each file. 为每个文件加前缀打印完整的地址</span><br><span class="line">  -x            Stay on current filesystem only. 留在当前文件系统，若指向目录下的某些子文件，其存放在另一个文件系统上，则将该目录排除在寻找范围外</span><br><span class="line">  -L level      Descend only level directories deep. 限制打印目录层级</span><br><span class="line">  -R            Rerun tree when max <span class="built_in">dir</span> level reached. </span><br><span class="line">  -P pattern    List only those files that match the pattern given. 只列出给定匹配模式的文件及目录</span><br><span class="line">  -I pattern    Do not list files that match the given pattern. 列出除给定模式以外的文件</span><br><span class="line">  --ignore-case Ignore <span class="keyword">case</span> when pattern matching.</span><br><span class="line">  --matchdirs   Include directory names <span class="keyword">in</span> -P pattern matching.</span><br><span class="line">  --noreport    Turn off file/directory count at end of tree listing.</span><br><span class="line">  --charset X   Use charset X <span class="keyword">for</span> terminal/HTML and indentation line output.</span><br><span class="line">  --filelimit <span class="comment"># Do not descend dirs with more than # files in them.</span></span><br><span class="line">  --timefmt &lt;f&gt; Print and format time according to the format &lt;f&gt;.</span><br><span class="line">  -o filename   Output to file instead of stdout.</span><br><span class="line">  ------- File options -------</span><br><span class="line">  -q            Print non-printable characters as <span class="string">&#x27;?&#x27;</span>.</span><br><span class="line">  -N            Print non-printable characters as is.</span><br><span class="line">  -Q            Quote filenames with double quotes.</span><br><span class="line">  -p            Print the protections <span class="keyword">for</span> each file.</span><br><span class="line">  -u            Displays file owner or UID number.</span><br><span class="line">  -g            Displays file group owner or GID number.</span><br><span class="line">  -s            Print the size <span class="keyword">in</span> bytes of each file.</span><br><span class="line">  -h            Print the size <span class="keyword">in</span> a more human readable way.</span><br><span class="line">  --si          Like -h, but use <span class="keyword">in</span> SI units (powers of 1000).</span><br><span class="line">  -D            Print the <span class="built_in">date</span> of last modification or (-c) status change.</span><br><span class="line">  -F            Appends <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;|&#x27;</span> or <span class="string">&#x27;&gt;&#x27;</span> as per <span class="built_in">ls</span> -F.</span><br><span class="line">  --inodes      Print inode number of each file.</span><br><span class="line">  --device      Print device ID number to <span class="built_in">which</span> each file belongs.</span><br><span class="line">  ------- Sorting options -------</span><br><span class="line">  -v            Sort files alphanumerically by version.</span><br><span class="line">  -t            Sort files by last modification time.</span><br><span class="line">  -c            Sort files by last status change time.</span><br><span class="line">  -U            Leave files unsorted.</span><br><span class="line">  -r            Reverse the order of the <span class="built_in">sort</span>.</span><br><span class="line">  --dirsfirst   List directories before files (-U disables).</span><br><span class="line">  --<span class="built_in">sort</span> X      Select <span class="built_in">sort</span>: name,version,size,mtime,ctime.</span><br><span class="line">  ------- Graphics options -------</span><br><span class="line">  -i            Don<span class="string">&#x27;t print indentation lines.</span></span><br><span class="line"><span class="string">  -A            Print ANSI lines graphic indentation lines.</span></span><br><span class="line"><span class="string">  -S            Print with CP437 (console) graphics indentation lines.</span></span><br><span class="line"><span class="string">  -n            Turn colorization off always (-C overrides).</span></span><br><span class="line"><span class="string">  -C            Turn colorization on always.</span></span><br><span class="line"><span class="string">  ------- XML/HTML/JSON options -------</span></span><br><span class="line"><span class="string">  -X            Prints out an XML representation of the tree.</span></span><br><span class="line"><span class="string">  -J            Prints out an JSON representation of the tree.</span></span><br><span class="line"><span class="string">  -H baseHREF   Prints out HTML format with baseHREF as top directory.</span></span><br><span class="line"><span class="string">  -T string     Replace the default HTML title and H1 header with string.</span></span><br><span class="line"><span class="string">  --nolinks     Turn off hyperlinks in HTML output.</span></span><br><span class="line"><span class="string">  ------- Input options -------</span></span><br><span class="line"><span class="string">  --fromfile    Reads paths from files (.=stdin)</span></span><br><span class="line"><span class="string">  ------- Miscellaneous options -------</span></span><br><span class="line"><span class="string">  --version     Print version and exit.</span></span><br><span class="line"><span class="string">  --help        Print usage and this help message and exit.</span></span><br><span class="line"><span class="string">  --            Options processing terminator.</span></span><br></pre></td></tr></table></figure><blockquote><p>列出除 <code>node_modules</code> 以外的文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tree -I node_modules</span><br></pre></td></tr></table></figure><blockquote><p>当前目录下列 2 层子级目录</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tree -L 2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> grocery </tag>
            
            <tag> macos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS Margin auto</title>
      <link href="/2020/10/19/CSS-Margin-auto/"/>
      <url>/2020/10/19/CSS-Margin-auto/</url>
      
        <content type="html"><![CDATA[<p>众所周知，margin: auto 可以使<code>块级元素</code>水平居中。这里要探讨的是为什么会居中，原理是什么？翻看了<a href="https://wiki.developer.mozilla.org/zh-CN/docs/Web/CSS/margin">MDN</a>，相关描述只有一句，“让浏览器自己选择一个外边距”。</p><p>自动占满可用空间，可用空间平均分配，占满后元素居中，如下图。<br><img src="/images/css/margin-auto-1.jpg" alt="margin:auto"></p><span id="more"></span><h2 id="margin-auto-position-absolute-实现居中"><a href="#margin-auto-position-absolute-实现居中" class="headerlink" title="margin: auto + position: absolute 实现居中"></a>margin: auto + position: absolute 实现居中</h2><p>首先声明：只标题代码是无法实现居中的，下面进行一次解析</p><ol><li> 以下两张图片，说明了，当元素设置 position: absolute，就相当于复制其定位元素的可用空间，但当前元素的可用空间仍为当时元素 content width + padding + border + margin<br><img src="/images/css/margin-auto-2.jpg" alt="margin:auto"></li></ol><hr><p><img src="/images/css/margin-auto-3.jpg" alt="margin:auto"></p><ol start="2"><li> left: 0; right: 0; 相当于可用空间扩展为其定位元素的可用空间(也就是上图中的 200px 或 1280px)</li><li> margin: auto 进行平均分配可用空间，实现居中<br><img src="/images/css/margin-auto-4.jpg" alt="margin:auto"></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS position absolute</title>
      <link href="/2020/10/12/CSS-position-absolute/"/>
      <url>/2020/10/12/CSS-position-absolute/</url>
      
        <content type="html"><![CDATA[<blockquote><p>position: absolute 与 float 一样，使用后<strong>脱离文档流</strong>；具有<strong>破坏性</strong>和<strong>包裹性</strong>；使用会创建 BFC(Block_formatting_context)。<br>absolute 相对于最近的非 ‘static’ 元素定位；如果该元素不存在，则相对于 initial container block 定位</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 300px; height: 100px; background: #efefef;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px; height: 50px; background: #390;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/css/position-absolute-1.jpg" alt="position-absolute-1"></p><span id="more"></span><h3 id="1-具有破坏性-子元素加入-position-absolute-至父元素高度塌陷"><a href="#1-具有破坏性-子元素加入-position-absolute-至父元素高度塌陷" class="headerlink" title="1. 具有破坏性 子元素加入 position: absolute; 至父元素高度塌陷"></a>1. <strong><code>具有破坏性</code></strong> 子元素加入 position: absolute; 至父元素高度塌陷</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 300px; height: 100px; background: #efefef;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px; height: 50px; background: #390; position: absolute&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/css/position-absolute-2.jpg" alt="position-absolute-2"></p><h3 id="2-具有包裹性-父元素使用-position-absolute，父元素包裹子元素"><a href="#2-具有包裹性-父元素使用-position-absolute，父元素包裹子元素" class="headerlink" title="2. 具有包裹性 父元素使用 position: absolute，父元素包裹子元素"></a>2. <strong><code>具有包裹性</code></strong> 父元素使用 position: absolute，父元素包裹子元素</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 300px; height: 100px; background: #efefef; position: absolute&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px; height: 50px; background: #390;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/css/position-absolute-3.jpg" alt="position-absolute-3"></p><h3 id="3-创建BFC-Block-formatting-context-使用-position-absolute，会形成块级作用域，行内元素可使用-width-height-等属性。"><a href="#3-创建BFC-Block-formatting-context-使用-position-absolute，会形成块级作用域，行内元素可使用-width-height-等属性。" class="headerlink" title="3. 创建BFC(Block_formatting_context) 使用 position: absolute，会形成块级作用域，行内元素可使用 width/height 等属性。"></a>3. <strong>创建<a href="https://helenzhanglp.github.io/2019/02/20/CSS-BFC/">BFC(Block_formatting_context)</a></strong> 使用 position: absolute，会形成块级作用域，行内元素可使用 width/height 等属性。</h3><p><a href="https://github.com/HelenZhangLP/demo/blob/master/postionAbsoluteFixedBlock/index.html">以下 demo 代码</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>navigator1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>navigator2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>navigator3<span class="tag">&lt;<span class="name">i</span>&gt;</span>vip icon<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">i</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">2px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f90</span>;</span><br><span class="line">  <span class="attribute">text-indent</span>: -<span class="number">9999px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">28px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">11px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">http://img.mukewang.com/545304730001307300280011.gif</span>) no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/demo/positionAbsoluteFixedBlock/position-absolute-block-1.jpg" alt="position-absolute-block-1"><br>上图是一个注释掉<code>position: absolute</code>后的错误示例，如 <code>&lt;i&gt;</code> 非块级元素，<code>text-indent: -9999px</code> 不生效，<code>margin: -2px 0 0 1px</code>在垂直方向同样不生效。注释文本撑开，显示vip图片，若无<code>vip icon</code>，背影图同样不显示，因为 <code>width/height</code> 对非块级元素不生效。<code>放开position: absolute 注释后，BFC 化后，实现效果如下图</code><br><img src="/images/demo/positionAbsoluteFixedBlock/position-absolute-block-2.jpg" alt="position-absolute-block-2"></p><h3 id="4-demo-图标与提示文本对齐，效果如下图"><a href="#4-demo-图标与提示文本对齐，效果如下图" class="headerlink" title="4. demo-图标与提示文本对齐，效果如下图"></a>4. demo-图标与提示文本对齐，效果如下图</h3><p><img src="/images/css/position-absolute-4.jpg" alt="图标与文本对齐"></p><blockquote><ol><li>利用 float</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;regist-remark regist-warn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-warn&quot;</span> <span class="attr">style</span>=<span class="string">&quot;float: left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">style</span>=<span class="string">&quot;font-style: normal;&quot;</span>&gt;</span>邮箱格式不准确<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>利用 position</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;regist-remark regist-warn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-warn&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute; margin-left: -20px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>邮箱格式不准确</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-demo-利用-position-absolute-在提示文字溢出显出区域时，不折行或隐藏，正常整行显示。"><a href="#5-demo-利用-position-absolute-在提示文字溢出显出区域时，不折行或隐藏，正常整行显示。" class="headerlink" title="5. demo-利用 position: absolute, 在提示文字溢出显出区域时，不折行或隐藏，正常整行显示。"></a>5. demo-利用 position: absolute, 在提示文字溢出显出区域时，不折行或隐藏，正常整行显示。</h3><h3 id="6-demo-利用-position-absolute，实现遮罩层"><a href="#6-demo-利用-position-absolute，实现遮罩层" class="headerlink" title="6. demo-利用 position: absolute，实现遮罩层"></a>6. demo-利用 position: absolute，实现遮罩层</h3><blockquote><p>position: absolute 在文档流之外创建了一个层<br>  left: 0 + right: 0; 新创建的层拉伸至与定位层等宽，相当于 width: 100%;<br>  同理： left: 0 + right: 50% = width: 50%;（可用于一半遮罩）<br>  top: 0 + bottom: 0; 新创建的层拉伸至与定位层等高，相当于 height: 100%;</p></blockquote><p>  <strong><code>注意：</code></strong> 这种方法适用于 <code>IE7+</code> 以上浏览器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: .<span class="number">5</span>;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">alpha</span>(opacity=<span class="number">50</span>); // 兼容 IE 浏览器</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 你不知道的百分比</title>
      <link href="/2020/09/21/CSS-%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E7%99%BE%E5%88%86%E6%AF%94/"/>
      <url>/2020/09/21/CSS-%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E7%99%BE%E5%88%86%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">offsetHeight</span></span><br><span class="line"><span class="comment">// 0</span></span><br></pre></td></tr></table></figure><ul><li><p>宽设置百分比</p><blockquote><p>根据父元素的宽，浏览器端，根元素 html、body 宽为屏可视区的宽</p></blockquote></li><li><p>高设置百分比</p><blockquote><p>根据父元素的高运算，如上 code ，浏览器 body 未设置高，所以设置百分比要特别注意。</p></blockquote></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>padding 设置百分比<blockquote><p>根据父元素宽运算</p></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 动画实现滚动</title>
      <link href="/2020/04/23/CSS-%E5%AE%9E%E4%BD%93%E6%BB%9A%E5%8A%A8/"/>
      <url>/2020/04/23/CSS-%E5%AE%9E%E4%BD%93%E6%BB%9A%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="CSS-动画实现滚动"><a href="#CSS-动画实现滚动" class="headerlink" title="CSS 动画实现滚动"></a>CSS 动画实现滚动</h3><blockquote><p>animation: animation-name（动画名称） animation-duration（动画完成一个周期花费的秒、毫秒）</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.marquee</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1070px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">animation</span>: roll-animation <span class="number">50s</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 规定动画</span><br><span class="line"><span class="keyword">@keyframes</span> animation-roll &#123;</span><br><span class="line">  <span class="selector-tag">from</span>: &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">50px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">to</span>: &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android 问题</title>
      <link href="/2020/04/21/%E5%9D%91-android/"/>
      <url>/2020/04/21/%E5%9D%91-android/</url>
      
        <content type="html"><![CDATA[<h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><blockquote><p>安卓启动 10.0.2.2 =&gt; localhost</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 疑难 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-正则-常用正则case</title>
      <link href="/2020/03/10/Javascript-%E6%AD%A3%E5%88%99-%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99case/"/>
      <url>/2020/03/10/Javascript-%E6%AD%A3%E5%88%99-%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99case/</url>
      
        <content type="html"><![CDATA[<h3 id="1、-Demo-1-——-身份证验证"><a href="#1、-Demo-1-——-身份证验证" class="headerlink" title="1、 Demo(1) —— 身份证验证"></a>1、 Demo(1) —— 身份证验证</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 15 位数字/18 位数字/17 位数字 + （X|x）</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="2、-Demo-2"><a href="#2、-Demo-2" class="headerlink" title="2、 Demo(2)"></a>2、 Demo(2)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="string">&#x27;&lt;html&gt;   $%^##sbd&lt;/html&gt;&#x27;</span></span><br><span class="line"><span class="comment">// 替换 html 代码</span></span><br><span class="line">name = value.<span class="title function_">replace</span>(<span class="regexp">/[&lt;&gt;\w+/]/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="comment">// &quot;   $%^##&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换是否存在表情</span></span><br><span class="line">name = name.<span class="title function_">replace</span>(<span class="regexp">/\uD83C[\uDF00-\uDFFF]|\uD83D[\uDC00-\uDE4F]/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个空格替换为一个空格</span></span><br><span class="line">name = name.<span class="title function_">replace</span>(<span class="regexp">/\s+/g</span>, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊符号</span></span><br><span class="line"><span class="keyword">const</span> regEn = <span class="regexp">/[`~@#$%^&amp;*()_+&lt;&gt;?:&quot;&#123;&#125;,./;&#x27;[]]/g</span>;</span><br><span class="line"><span class="keyword">const</span> regCn = <span class="regexp">/[·#￥（——）：；“”‘、|《》？、【】[]]/g</span>;</span><br><span class="line"></span><br><span class="line">name = name.<span class="title function_">replace</span>(regEn, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">name = name.<span class="title function_">replace</span>(regCn, <span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="3、-Demo-3-——-手机号中间四位替换为"><a href="#3、-Demo-3-——-手机号中间四位替换为" class="headerlink" title="3、  Demo(3) —— 手机号中间四位替换为 ****"></a>3、  Demo(3) —— 手机号中间四位替换为 ****</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;13381895220&#x27;</span></span><br><span class="line">str.<span class="title function_">replace</span>(<span class="regexp">/^(.&#123;3&#125;)(.&#123;4&#125;)(.&#123;4&#125;)$/</span>, <span class="string">&quot;$1****$3&quot;</span>) <span class="comment">// &quot;133****5220&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4、-Demo-4-——-首字母大写"><a href="#4、-Demo-4-——-首字母大写" class="headerlink" title="4、  Demo(4) —— 首字母大写"></a>4、  Demo(4) —— 首字母大写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="string">&#x27;front-end development engineer&#x27;</span></span><br><span class="line">value.<span class="title function_">replace</span>(<span class="regexp">/^./</span>,value[<span class="number">0</span>].<span class="title function_">toUpperCase</span>()) <span class="comment">// &quot;Front-end development engineer&quot;</span></span><br><span class="line"></span><br><span class="line">value.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="title function_">replace</span>(<span class="regexp">/^./</span>, item[<span class="number">0</span>].<span class="title function_">toUpperCase</span>())).<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="comment">// &quot;Front-end Development Engineer&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> RegExp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发工具-Fiddler</title>
      <link href="/2020/03/06/%E5%B7%A5%E5%85%B7-Fiddler/"/>
      <url>/2020/03/06/%E5%B7%A5%E5%85%B7-Fiddler/</url>
      
        <content type="html"><![CDATA[<h3 id="安装教程推荐"><a href="#安装教程推荐" class="headerlink" title="安装教程推荐"></a><a href="https://www.cnblogs.com/yyhh/p/5140852.html">安装教程推荐</a></h3><h3 id="坑一，配置后手机移动端不能正确连接抓包"><a href="#坑一，配置后手机移动端不能正确连接抓包" class="headerlink" title="坑一，配置后手机移动端不能正确连接抓包"></a>坑一，配置后手机移动端不能正确连接抓包</h3><blockquote><p>1、fiddler 配置完成后要重启后才生效<br>2、重启打开后，File-Capture Traffic</p></blockquote><h3 id="坑二，Inspector-syntaxView-乱码"><a href="#坑二，Inspector-syntaxView-乱码" class="headerlink" title="坑二，Inspector - syntaxView 乱码"></a>坑二，Inspector - syntaxView 乱码</h3><blockquote><p>工具栏选中 <code>Decode</code></p></blockquote><span id="more"></span><h3 id="坑三，-SecureClientPipeDirect-failed-System-Security-Authentication-Authenticatio"><a href="#坑三，-SecureClientPipeDirect-failed-System-Security-Authentication-Authenticatio" class="headerlink" title="坑三，!SecureClientPipeDirect failed: System.Security.Authentication.Authenticatio"></a>坑三，!SecureClientPipeDirect failed: System.Security.Authentication.Authenticatio</h3><blockquote><p>以 ios 为例，<code>设置 - 通用 - 关于本机 - 证书信任设置 - DO_NOT_TRUST_FiddlerRoot</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> develop-tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码管理工具 - git</title>
      <link href="/2020/03/03/%E5%B7%A5%E5%85%B7-%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86-git/"/>
      <url>/2020/03/03/%E5%B7%A5%E5%85%B7-%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86-git/</url>
      
        <content type="html"><![CDATA[<h3 id="gitHub-项目内搜索"><a href="#gitHub-项目内搜索" class="headerlink" title="gitHub 项目内搜索"></a>gitHub 项目内搜索</h3><blockquote><p>输入 t</p></blockquote><h3 id="Generating-Your-SSH-Public-Key"><a href="#Generating-Your-SSH-Public-Key" class="headerlink" title="Generating Your SSH Public Key"></a>Generating Your SSH Public Key</h3><blockquote><p>$ ssh-keygen</p></blockquote><h3 id="id-rsa-pub-存储位置"><a href="#id-rsa-pub-存储位置" class="headerlink" title="id_rsa.pub 存储位置"></a>id_rsa.pub 存储位置</h3><blockquote><p><code>windows</code> /c/Users/Administrator/.ssh/id_rsa.pub<br><code>mac</code> ~/.ssh/id_rsa.pub</p></blockquote><h3 id="git-删除分支"><a href="#git-删除分支" class="headerlink" title="git 删除分支"></a>git 删除分支</h3><ol><li> git 删除本地分支 <code>git branch -d branch-name</code>(如果删除不了 -D 强制删除)</li><li> git 删除远程分支 <code>git push origin --delete branch-name</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node 工具包</title>
      <link href="/2020/02/17/Node-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
      <url>/2020/02/17/Node-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="tools"><a href="#tools" class="headerlink" title="tools"></a>tools</h2><h3 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h3><p><span class='custom-box custom-box-933'>问题：</span>在编写 <code>node.js</code> 项目时，修改项目代码后，需要 <code>ctrl+c</code> 停止项目，再重启。</p><blockquote><p><a href="https://www.npmjs.com/package/nodemon">nodemon</a>工具，可以监听项目变化，项目代码修改后，nodemon 自动重启项目，方便开发调试。<br>nodemon is a tool that helps develop node.js based applications by automatically restarting the node application when file changes in the directory are detected.<br>nodemon 是一个帮助开发 node 的工具，当文件夹中的文件被检测到变化时，自动重启 node 应用。<br>nodemon does not require any additional changes to your code or method of development. nodemon is a replacement wrapper for node. to use nodemon,replace the word node on the command line when executing your script<br>nodemon 不需要对你的代码或开发方法做额外的改变，<br>nodemon 是 <code>node</code> 的替换包。要使用 nodemon，需要在执行脚本时替换命令行中的 <code>node</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g nodemon</span><br></pre></td></tr></table></figure><h3 id="pm2"><a href="#pm2" class="headerlink" title="pm2"></a>pm2</h3><p>服务持久化管理的 <span class='custom-box custom-box-939'>即使终端关闭，服务器也在，电脑重启后，服务器关闭。</span></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm i pm2 -g <span class="comment">#安装 pm2</span></span><br><span class="line">$ pm2 start server.js --name TASK <span class="comment">#启动</span></span><br><span class="line">$ pm2 restart TASK <span class="comment">#重启</span></span><br><span class="line">$ pm2 stop TASK <span class="comment">#暂停</span></span><br><span class="line">$ pm2 delete TASK <span class="comment">#删除</span></span><br></pre></td></tr></table></figure><h3 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h3><p>由于 npm 官方镜像源在国外，下包时会存在下载慢的问题。所以我们一般在将镜像源切换为淘宝镜像源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhangliping@zhangliingdembp ~/Documents/vite  $ npm config get reigstry <span class="comment"># 查看当前下包的镜像源</span></span><br><span class="line">zhangliping@zhangliingdembp ~/Documents/vite  $ npm <span class="built_in">set</span> registry=https://registry.npm.taobao.org/ <span class="comment"># 将下包的镜像源切换为淘宝的镜像源</span></span><br><span class="line">zhangliping@zhangliingdembp ~/Documents/vite  $ npm config get registry <span class="comment"># 查看镜像源是否下载成功</span></span><br></pre></td></tr></table></figure><div class="custome-box custom-box-933">这里需要注意，淘宝镜像源地址一定要写正确。</div>为了避免镜像源写错的问题，这里介绍一个工具<span class="custome-box custom-box-393">nrm 利用 nrm 提供的终端命令，可快速切换</span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhangliping@zhangliingdembp ~/Desktop/node/src/demo5/中文/leave a blank space  $ npm i nrm -g  <span class="comment"># 全局安装 nrm 工具</span></span><br><span class="line">zhangliping@zhangliingdembp ~/Desktop/node/src/demo5/中文/leave a blank space  $ nrm <span class="built_in">ls</span> <span class="comment"># 查看可用的镜像源</span></span><br><span class="line">zhangliping@zhangliingdembp ~/Desktop/node/src/demo5/中文/leave a blank space  $ nrm use taobao <span class="comment"># 使用淘宝镜像</span></span><br></pre></td></tr></table></figure><h3 id="i5ting-toc-把-md-文档转换为-html-页面的工具"><a href="#i5ting-toc-把-md-文档转换为-html-页面的工具" class="headerlink" title="i5ting_toc 把 md 文档转换为 html 页面的工具"></a>i5ting_toc 把 md 文档转换为 html 页面的工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhangliping@zhangliingdembp /  $ npm install -g iString_toc <span class="comment"># 将 iString_toc 安装为全局包</span></span><br><span class="line">zhangliping@zhangliingdembp /  $ iString_toc -f ./name.md -o <span class="comment"># 调用 iString_toc 将 md 转换为 html </span></span><br></pre></td></tr></table></figure><h3 id="nvm-node-版本管理工具"><a href="#nvm-node-版本管理工具" class="headerlink" title="nvm node 版本管理工具"></a>nvm node 版本管理工具</h3><blockquote><p>安装 use the following cURL command 脚本 [具体参考](<a href="https://github.com/nvm-sh/nvm%EF%BC%89">https://github.com/nvm-sh/nvm）</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install script use the following cURL command</span></span><br><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># attempts to add the source lines from the snippet below to the correct profile file (~/.bash_profile, ~/.zshrc, ~/.profile, or ~/.bashrc).</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="subst">$([ -z <span class="string">&quot;<span class="variable">$&#123;XDG_CONFIG_HOME-&#125;</span>&quot;</span> ] &amp;&amp; printf %s <span class="string">&quot;<span class="variable">$&#123;HOME&#125;</span>/.nvm&quot;</span> || printf %s <span class="string">&quot;<span class="variable">$&#123;XDG_CONFIG_HOME&#125;</span>/nvm&quot;</span>)</span>&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>与 n 相同，nvm 同样是管理 node 版本的。</p></blockquote><h2 id="spm-Sea-js-安装工具"><a href="#spm-Sea-js-安装工具" class="headerlink" title="spm Sea.js 安装工具"></a>spm Sea.js 安装工具</h2><h2 id="npx"><a href="#npx" class="headerlink" title="npx"></a>npx</h2><p>This command allows you to run an arbitrary command from an npm package(either one installed locally, or fetched remotely) in a similar context as running it via <code>npm run</code>.<br>该命令允许你运行 npm 包中的任一命令（本地安装或远程获取）如同运行通过 <code>npm run</code> 在相同环境中运行它。</p><p>Whatever packages are specified by the <code>--package</code> option will provied in the PATH of the executed command，along with any locally installed package executables. The <code>--package</code> option may be specified multiple times, to execute the supplied command in an environment where all specified packages are availiable<br>不管 “–package” 指定的任何包都将提供给执行命令的 PATH，以及任何本地安装的可执行包。“–package” 选项可以被指定多次。在所有指定包的环境中执行提供的命令均可用。</p><p>If any requested packages are not present in the local project dependencies，then they are installed to a folder in the npm cache,which is added to the <code>PATH</code> environment variable in the executed process. A prompt is printed(which can be suppressed by providing either – yes or  –no)<br>如果任何请求包在本地项目依赖中不存在，那么它们会被安装到 npm 缓存的文件夹中，添加到执行过程中的 PATH 环境变量。提示被打印（通过提供 –yes 或 –no 控制）</p><p>Package names provided without a specifier will be matched with Whatever version exists in the local project，Package names with a specifier will only be considered a match if they have the exact same name and version as the local dependency.<br>提供不带说明符的包名将被与本地项目中任何存在的版本相匹配，带有说明符的包名在本地依赖项中有着完全相同的名称和版本将被认为匹配。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小灰算法-数组排序</title>
      <link href="/2020/01/15/%E5%B0%8F%E7%81%B0%E7%AE%97%E6%B3%95-%E6%95%B0%E7%BB%84/"/>
      <url>/2020/01/15/%E5%B0%8F%E7%81%B0%E7%AE%97%E6%B3%95-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><p>不知道自己在干嘛，总之看这个很累，看完了，再看 <code>Array.prototy.sort()</code> 源码实现。还是一言难尽呐！不过，不管怎么样，既然看都看了，笔记还是写写。</p><span id="more"></span><h3 id="冒泡排序（bubble-sort）"><a href="#冒泡排序（bubble-sort）" class="headerlink" title="冒泡排序（bubble sort）"></a>冒泡排序（bubble sort）</h3><p>冒泡排序是一种基础的交换排序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">9</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">14</span>,<span class="number">22</span>]</span><br></pre></td></tr></table></figure><h4 id="基础冒泡"><a href="#基础冒泡" class="headerlink" title="基础冒泡"></a>基础冒泡</h4><blockquote><p>相邻元素两两比较，相邻元素左边大于右边交换位置；否则位置不变。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>; j &lt; arr.<span class="property">length</span> - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">      num ++</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">var</span> temp = arr[j]</span><br><span class="line">        arr[j] = arr[j+<span class="number">1</span>]</span><br><span class="line">        arr[j+<span class="number">1</span>] = temp</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 共 9 次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="冒泡优化"><a href="#冒泡优化" class="headerlink" title="冒泡优化"></a>冒泡优化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSortV2</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>-<span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> isSorted = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;arr.<span class="property">length</span>-<span class="number">1</span>-i; j++) &#123;</span><br><span class="line">      num ++</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">var</span> temp = arr[j]</span><br><span class="line">        arr[j] = arr[j+<span class="number">1</span>]</span><br><span class="line">        arr[j+<span class="number">1</span>] = temp</span><br><span class="line">        isSorted = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(isSorted) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>其实这个方法执行下的结果并不正确，我再三跟书的案例确认下。代码一毛一样，那么下面要怎么着。这个方法执行的前提是数组前后两部分，后一部分有序，前半部分无序而且前半部分阳大的数小于后半部分最小数。如：[3,2,4,1,2,5,6,7,8]</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSortV3</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>-<span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> isSorted = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> sortBorder = arr.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;sortBorder; j++) &#123;</span><br><span class="line">      num ++</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">var</span> temp = arr[j]</span><br><span class="line">        arr[j] = arr[j+<span class="number">1</span>]</span><br><span class="line">        arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">        isSorted = <span class="literal">false</span>;</span><br><span class="line">        sortBorder = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(isSorted) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 共 11 次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="鸡尾酒排序"><a href="#鸡尾酒排序" class="headerlink" title="鸡尾酒排序"></a>鸡尾酒排序</h4><blockquote><p>与冒泡相同，都是通过交换排序的。冒泡从左到右比较元素，进行单向位置交换。鸡尾酒元素比较和交换是<code>双向</code>。<br>鸡尾酒排序书中举了个特殊的例子 [8,2,3,4,5,6,7,1]，其大意是，只有问部分无序，确要比较 7 轮 。。。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">cocktail</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> isSorted = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">var</span> temp = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="built_in">parseInt</span>(arr.<span class="property">length</span>/<span class="number">2</span>); i++) &#123;</span><br><span class="line">    <span class="comment">// 由左到右交换，最大数排在最后面</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - <span class="number">1</span> - i; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">        temp = arr[j]</span><br><span class="line">        arr[j] = arr[j+<span class="number">1</span>]</span><br><span class="line">        arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">        isSorted = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSorted) <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    isSorted = <span class="literal">true</span>;</span><br><span class="line">    temp = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 由右向左交换，最小数排在最前面</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k=arr.<span class="property">length</span>-i-<span class="number">1</span>; k &gt; i; k--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[k] &lt; arr[k-<span class="number">1</span>]) &#123;</span><br><span class="line">        temp = arr[k]</span><br><span class="line">        arr[k] = arr[k-<span class="number">1</span>]</span><br><span class="line">        arr[k-<span class="number">1</span>] = temp;</span><br><span class="line">        isSorted = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSorted) <span class="keyword">break</span>;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h4 id="基础快速排序"><a href="#基础快速排序" class="headerlink" title="基础快速排序"></a>基础快速排序</h4><h4 id="基准元素选择"><a href="#基准元素选择" class="headerlink" title="基准元素选择"></a>基准元素选择</h4><h4 id="单边循环"><a href="#单边循环" class="headerlink" title="单边循环"></a>单边循环</h4>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-正则</title>
      <link href="/2020/01/13/Javascript-%E6%AD%A3%E5%88%99/"/>
      <url>/2020/01/13/Javascript-%E6%AD%A3%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h2 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a>RegExp</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/[\u4e00-\u9fa5]/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(reg)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * /[\u4e00-\u9fa5]/</span></span><br><span class="line"><span class="comment">    dotAll: false</span></span><br><span class="line"><span class="comment">    flags: &quot;&quot;</span></span><br><span class="line"><span class="comment">    global: false</span></span><br><span class="line"><span class="comment">    ignoreCase: false</span></span><br><span class="line"><span class="comment">    lastIndex: 0</span></span><br><span class="line"><span class="comment">    multiline: false</span></span><br><span class="line"><span class="comment">    source: &quot;[\u4e00-\u9fa5]&quot;</span></span><br><span class="line"><span class="comment">    sticky: false</span></span><br><span class="line"><span class="comment">    unicode: false</span></span><br><span class="line"><span class="comment"> * /</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="RegExp-prototype-dotAll-在正则表达式中是否使用-s-修饰符，s-修饰符可以匹配任意单个字符。只读属性，属于单个正则表达式实例。"><a href="#RegExp-prototype-dotAll-在正则表达式中是否使用-s-修饰符，s-修饰符可以匹配任意单个字符。只读属性，属于单个正则表达式实例。" class="headerlink" title="RegExp.prototype.dotAll 在正则表达式中是否使用 s 修饰符，s 修饰符可以匹配任意单个字符。只读属性，属于单个正则表达式实例。"></a>RegExp.prototype.dotAll 在正则表达式中是否使用 <code>s</code> 修饰符，<code>s</code> 修饰符可以匹配任意单个字符。只读属性，属于单个正则表达式实例。</h3><p><code>***暂留，我承认我没有搞明白***</code></p><h3 id="RegExp-prototype-flags-返回由当前正则表达式对象的标志组成的字符串，是一个只读属性"><a href="#RegExp-prototype-flags-返回由当前正则表达式对象的标志组成的字符串，是一个只读属性" class="headerlink" title="RegExp.prototype.flags 返回由当前正则表达式对象的标志组成的字符串，是一个只读属性"></a>RegExp.prototype.flags 返回由当前正则表达式对象的标志组成的字符串，是一个只读属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/[\u4e00-\u9fa5]/</span>sg</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(reg)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * /[\u4e00-\u9fa5]/gs</span></span><br><span class="line"><span class="comment">    dotAll: (...)</span></span><br><span class="line"><span class="comment">    flags: &quot;gs&quot;</span></span><br><span class="line"><span class="comment">    global: (...)</span></span><br><span class="line"><span class="comment">    ignoreCase: (...)</span></span><br><span class="line"><span class="comment">    lastIndex: 0</span></span><br><span class="line"><span class="comment">    multiline: (...)</span></span><br><span class="line"><span class="comment">    source: (...)</span></span><br><span class="line"><span class="comment">    sticky: (...)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="RegExp-prototype-global-正则表达式是否使用了-g-标志，是找到所有匹配，而不是第一个匹配后停止，是一个只读属性"><a href="#RegExp-prototype-global-正则表达式是否使用了-g-标志，是找到所有匹配，而不是第一个匹配后停止，是一个只读属性" class="headerlink" title="RegExp.prototype.global 正则表达式是否使用了 g 标志，是找到所有匹配，而不是第一个匹配后停止，是一个只读属性"></a>RegExp.prototype.global 正则表达式是否使用了 <code>g</code> 标志，是找到所有匹配，而不是第一个匹配后停止，是一个只读属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/[gimuy]*$/g</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(reg)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * /[gimuy]*$/g</span></span><br><span class="line"><span class="comment">    dotAll: false</span></span><br><span class="line"><span class="comment">    flags: &quot;g&quot;</span></span><br><span class="line"><span class="comment">    global: true</span></span><br><span class="line"><span class="comment">    ignoreCase: (...)</span></span><br><span class="line"><span class="comment">    lastIndex: 0</span></span><br><span class="line"><span class="comment">    multiline: (...)</span></span><br><span class="line"><span class="comment">    source: (...)</span></span><br><span class="line"><span class="comment">    sticky: (...)</span></span><br><span class="line"><span class="comment">    unicode: (...)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="RegExp-prototype-ignoreCase-正则表达式是否使用了-i-标志，是否忽略大小写，只读属性"><a href="#RegExp-prototype-ignoreCase-正则表达式是否使用了-i-标志，是否忽略大小写，只读属性" class="headerlink" title="RegExp.prototype.ignoreCase 正则表达式是否使用了 i 标志，是否忽略大小写，只读属性"></a>RegExp.prototype.ignoreCase 正则表达式是否使用了 <code>i</code> 标志，是否忽略大小写，只读属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/[\u4e00-\u9faf]/gi</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(reg)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * /[\u4e00-\u9faf]/gi</span></span><br><span class="line"><span class="comment">      dotAll: false</span></span><br><span class="line"><span class="comment">      flags: &quot;gi&quot;</span></span><br><span class="line"><span class="comment">      global: true</span></span><br><span class="line"><span class="comment">      ignoreCase: true</span></span><br><span class="line"><span class="comment">      lastIndex: 0</span></span><br><span class="line"><span class="comment">      multiline: false</span></span><br><span class="line"><span class="comment">      source: &quot;[\u4e00-\u9faf]&quot;</span></span><br><span class="line"><span class="comment">      sticky: false</span></span><br><span class="line"><span class="comment">      unicode: false</span></span><br><span class="line"><span class="comment"> */</span> </span><br></pre></td></tr></table></figure><h3 id="RegExp-prototype-multiline-正则表达式中使用-m-属性，多行匹配，只读属性"><a href="#RegExp-prototype-multiline-正则表达式中使用-m-属性，多行匹配，只读属性" class="headerlink" title="RegExp.prototype.multiline 正则表达式中使用 m 属性，多行匹配，只读属性"></a>RegExp.prototype.multiline 正则表达式中使用 <code>m</code> 属性，多行匹配，只读属性</h3><blockquote><p>“m” 标志意味着一个多行输入字符串被看作多行<br>使用 “m”，”^” 和 “$” 将会从只匹配正则字符串的开头或结尾，变为匹配字符串中任一行的开头或结尾。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/[\u4e00-\u9faf]/gim</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(reg)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * /[\u4e00-\u9faf]/gim</span></span><br><span class="line"><span class="comment">      dotAll: false</span></span><br><span class="line"><span class="comment">      flags: &quot;gim&quot;</span></span><br><span class="line"><span class="comment">      global: true</span></span><br><span class="line"><span class="comment">      ignoreCase: true</span></span><br><span class="line"><span class="comment">      lastIndex: 0</span></span><br><span class="line"><span class="comment">      multiline: true</span></span><br><span class="line"><span class="comment">      source: &quot;[\u4e00-\u9faf]&quot;</span></span><br><span class="line"><span class="comment">      sticky: false</span></span><br><span class="line"><span class="comment">      unicode: false</span></span><br><span class="line"><span class="comment"> */</span> </span><br></pre></td></tr></table></figure><h3 id="RegExp-prototype-exec-在一个指定字符串中执行一个搜索匹配。返回匹配数组或-null。"><a href="#RegExp-prototype-exec-在一个指定字符串中执行一个搜索匹配。返回匹配数组或-null。" class="headerlink" title="RegExp.prototype.exec() 在一个指定字符串中执行一个搜索匹配。返回匹配数组或 null。"></a>RegExp.prototype.exec() 在一个指定字符串中执行一个搜索匹配。返回匹配数组或 null。</h3><blockquote><p>regexObj.exec(str)</p></blockquote><p>*** notice ***</p><ul><li><input disabled="" type="checkbox"> 设置了 global 或 sticky 标志位后 RegExp 对象是<code>有状态</code>的；</li><li><input disabled="" type="checkbox"> 会将上次成功匹配的位置记录在 lastIndex 属性中。</li><li><input disabled="" type="checkbox"> 如此 exec() 可用来对单个字符串中的多次匹配结果进行逐条遍历。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reg = <span class="regexp">/[\u4e00-\u9fa5]/</span></span><br><span class="line">reg.<span class="title function_">exec</span>(<span class="string">&#x27;1233 我是张丽萍 abc&#x27;</span>)</span><br><span class="line"><span class="comment">// [&quot;我&quot;, index: 5, input: &quot;1233 我是张丽萍 abc&quot;, groups: undefined]</span></span><br></pre></td></tr></table></figure><h4 id="“我”-index-5-input-“1233-我是张丽萍-abc”-groups-undefined-返回值解析"><a href="#“我”-index-5-input-“1233-我是张丽萍-abc”-groups-undefined-返回值解析" class="headerlink" title="[“我”, index: 5, input: “1233 我是张丽萍 abc”, groups: undefined] 返回值解析"></a>[“我”, index: 5, input: “1233 我是张丽萍 abc”, groups: undefined] 返回值解析</h4><table><thead><tr><th>索引</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>我</td><td>匹配的全部字符串</td></tr><tr><td>1</td><td>index:5</td><td>匹配字符串开始索引</td></tr><tr><td>2</td><td>1233 我是张丽萍 abc</td><td>匹配原始字符串</td></tr><tr><td>3</td><td>groups:undefined</td><td>分组捕获的结果</td></tr></tbody></table><p>加全局匹配标识符，会记录上次匹配的位置，可以循环遍历。<code>注意不要在遍历条件中写入正则表达式，如果一直匹配，会造成死循环</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/(\w+)(\s)/g</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;abc abc abc&#x27;</span></span><br><span class="line">reg.<span class="title function_">exec</span>(str)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  [ &#x27;abc &#x27;, &#x27;abc&#x27;, &#x27; &#x27;, index: 0, input: &#x27;abc abc abc&#x27;, groups: undefined ]</span></span><br><span class="line"><span class="comment">&gt; reg.exec(str)</span></span><br><span class="line"><span class="comment">[ &#x27;abc &#x27;, &#x27;abc&#x27;, &#x27; &#x27;, index: 4, input: &#x27;abc abc abc&#x27;, groups: undefined ]</span></span><br><span class="line"><span class="comment">&gt; reg.exec(str)</span></span><br><span class="line"><span class="comment">null</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值 []"></a>返回值 []</h4><ul><li>[0] 匹配的字符串（[‘abc ‘]）</li><li>[1],…[n] 分组捕获（[‘abc’, ‘ ‘]）</li><li>index 匹配到的字符位于原始字符串的基于0的索引值 （index: 0）</li><li>input 原始字符串</li></ul><hr><ul><li><input disabled="" type="checkbox"> <code>\w</code> 匹配任意来自基本拉丁字母表中的字母数字字符，还包括下划线。等价于 [A-Za-z0-9_]</li><li><input disabled="" type="checkbox"> <code>\w+</code> 匹配数字、字母、下划线 x 1 或多次。等价于 {1,}</li><li><input disabled="" type="checkbox"> <code>(\w+)</code> 匹配数字、字母、下划线至少一次，并且捕获匹配项</li><li><input disabled="" type="checkbox"> <code>\s</code> 匹配空白符，包括空格、制表符、换页符、其它 Unicode 空格</li></ul><h4 id="字符集合-character-sets"><a href="#字符集合-character-sets" class="headerlink" title="字符集合(character sets)"></a>字符集合(character sets)</h4><p>[xyz] [x-z] 匹配是 xyz 的字符集</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/[x-z]/.<span class="title function_">exec</span>(<span class="string">&#x27;zxyd&#x27;</span>)</span><br><span class="line"><span class="comment">// [&quot;z&quot;, index: 0, input: &quot;zxyd&quot;, groups: undefined]</span></span><br><span class="line">/[^x-z]/g.<span class="title function_">exec</span>(<span class="string">&#x27;xyzabdxyz&#x27;</span>)</span><br><span class="line"><span class="comment">// [&quot;a&quot;, index: 3, input: &quot;xyzabdxyz&quot;, groups: undefined]</span></span><br></pre></td></tr></table></figure><p>[^xyz] [^x-z] 匹配非 xyz 的字符集</p><h4 id="分组（grouping）"><a href="#分组（grouping）" class="headerlink" title="分组（grouping）"></a>分组（grouping）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 分组匹配 */</span></span><br><span class="line">regGroups = <span class="regexp">/(\d+)([\u4e00-\u9fa5]+)(\w)/</span></span><br><span class="line">regGroups.<span class="title function_">exec</span>(<span class="string">&#x27;1233我是张丽萍abc&#x27;</span>)</span><br><span class="line"><span class="comment">// [&quot;1233我是张丽萍a&quot;, &quot;1233&quot;, &quot;我是张丽萍&quot;, &quot;a&quot;, index: 0, input: &quot;1233我是张丽萍abc&quot;, groups: undefined]</span></span><br></pre></td></tr></table></figure><h4 id="“1233我是张丽萍a”-“1233”-“我是张丽萍”-“a”-index-0-input-“1233我是张丽萍abc”-groups-undefined"><a href="#“1233我是张丽萍a”-“1233”-“我是张丽萍”-“a”-index-0-input-“1233我是张丽萍abc”-groups-undefined" class="headerlink" title="[“1233我是张丽萍a”, “1233”, “我是张丽萍”, “a”, index: 0, input: “1233我是张丽萍abc”, groups: undefined]"></a>[“1233我是张丽萍a”, “1233”, “我是张丽萍”, “a”, index: 0, input: “1233我是张丽萍abc”, groups: undefined]</h4><table><thead><tr><th>索引</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>1233我是张丽萍a</td><td>匹配的全部字符串</td></tr><tr><td>1</td><td>1233</td><td>分组匹配的结果 RegExp.$1</td></tr><tr><td>2</td><td>我是张丽萍</td><td>分组匹配的结果 RegExp.$2</td></tr><tr><td>3</td><td>a</td><td>分组匹配的结果 RegExp.$3</td></tr><tr><td>4</td><td>index</td><td>匹配到的字符位于原始字符串的基于0的索引值</td></tr><tr><td>5</td><td>groups:undefined</td><td>分组捕获的结果</td></tr></tbody></table><h4 id="字符类别-Character-Classes"><a href="#字符类别-Character-Classes" class="headerlink" title="字符类别(Character Classes)"></a>字符类别(Character Classes)</h4><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td><code>\d</code> <code>[0-9]</code></td><td>匹配任意阿拉伯字符串</td></tr></tbody></table><h4 id="边界（Boundaries）"><a href="#边界（Boundaries）" class="headerlink" title="边界（Boundaries）"></a>边界（Boundaries）</h4><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>^</td><td>匹配输入<code>开始</code>位置，如果设置 flag multiline，该标识会匹配每个断行（line-break）符后的<code>开始</code>位置</td></tr><tr><td>$</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> RegExp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Array sort 源码解析</title>
      <link href="/2020/01/08/Array%20sort%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2020/01/08/Array%20sort%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><blockquote><p>ToUint32 将指定的值转换为 32 位，不带正负号的整数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ArraySort</span>(<span class="params">comparefn</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> custom_compare = <span class="title function_">IS_FUNCTION</span>(comparefn);</span><br><span class="line">  <span class="keyword">var</span> length = <span class="title class_">ToUint32</span>(<span class="variable language_">this</span>.<span class="property">length</span>);</span><br><span class="line">  <span class="title class_">QuickSort</span>(<span class="variable language_">this</span>, <span class="number">0</span>, length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">QuickSort</span>(<span class="params">a, <span class="keyword">from</span>, to</span>) &#123;</span><br><span class="line">  <span class="comment">// Insertion sort is faster for short arrays.</span></span><br><span class="line">  <span class="keyword">if</span> (to - <span class="keyword">from</span> &lt;= <span class="number">22</span>) &#123;</span><br><span class="line">    <span class="title class_">InsertionSort</span>(a, <span class="keyword">from</span>, to);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>mid 运算 (max - min) &gt;&gt; 1 + min</code>，compare 对比数组中的中间数与遍历的当前元素，Compare 会返回 0，大于或小于的数字</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">InsertionSort</span>(<span class="params">a, <span class="keyword">from</span>, to</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="keyword">from</span> + <span class="number">1</span>; i &lt; to; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = a[i];</span><br><span class="line">    <span class="comment">// Pre-convert the element to a string for comparison if we know</span></span><br><span class="line">    <span class="comment">// it will happen on each compare anyway.</span></span><br><span class="line">    <span class="keyword">var</span> key =</span><br><span class="line">        (custom_compare || %<span class="title function_">_IsSmi</span>(element)) ? element : <span class="title class_">ToString</span>(element);</span><br><span class="line">    <span class="comment">// place element in a[from..i[</span></span><br><span class="line">    <span class="comment">// binary search</span></span><br><span class="line">    <span class="keyword">var</span> min = <span class="keyword">from</span>;</span><br><span class="line">    <span class="keyword">var</span> max = i;</span><br><span class="line">    <span class="comment">// The search interval is a[min..max[</span></span><br><span class="line">    <span class="keyword">while</span> (min &lt; max) &#123;</span><br><span class="line">      <span class="keyword">var</span> mid = min + ((max - min) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">var</span> order = <span class="title class_">Compare</span>(a[mid], key);</span><br><span class="line">      <span class="keyword">if</span> (order == <span class="number">0</span>) &#123;</span><br><span class="line">        min = max = mid;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (order &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        min = mid + <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        max = mid;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// place element at position min==max.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j &gt; min; j--) &#123;</span><br><span class="line">      a[j] = a[j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    a[min] = element;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>x,y 进行大小比较，x 为数组中间的元素，y 相对比的元素（即 数组中的某一个元素）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Compare</span>(<span class="params">x,y</span>) &#123;</span><br><span class="line">  <span class="comment">// Assume the comparefn, if any, is a consistent comparison function.</span></span><br><span class="line">  <span class="comment">// If it isn&#x27;t, we are allowed arbitrary behavior by ECMA 15.4.4.11.</span></span><br><span class="line">  <span class="keyword">if</span> (x === y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (custom_compare) &#123;</span><br><span class="line">    <span class="comment">// Don&#x27;t call directly to avoid exposing the builtin&#x27;s global object.</span></span><br><span class="line">    <span class="keyword">return</span> comparefn.<span class="title function_">call</span>(<span class="literal">null</span>, x, y);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (%<span class="title function_">_IsSmi</span>(x) &amp;&amp; %<span class="title function_">_IsSmi</span>(y)) &#123;</span><br><span class="line">    <span class="keyword">return</span> %<span class="title class_">SmiLexicographicCompare</span>(x, y);</span><br><span class="line">  &#125;</span><br><span class="line">  x = <span class="title class_">ToString</span>(x);</span><br><span class="line">  y = <span class="title class_">ToString</span>(y);</span><br><span class="line">  <span class="keyword">if</span> (x == y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> x &lt; y ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ArraySort</span>(<span class="params">comparefn</span>) &#123;</span><br><span class="line">  <span class="comment">// In-place QuickSort algorithm.</span></span><br><span class="line">  <span class="comment">// For short (length &lt;= 22) arrays, insertion sort is used for efficiency.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> custom_compare = <span class="title function_">IS_FUNCTION</span>(comparefn);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Compare</span>(<span class="params">x,y</span>) &#123;</span><br><span class="line">    <span class="comment">// Assume the comparefn, if any, is a consistent comparison function.</span></span><br><span class="line">    <span class="comment">// If it isn&#x27;t, we are allowed arbitrary behavior by ECMA 15.4.4.11.</span></span><br><span class="line">    <span class="keyword">if</span> (x === y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (custom_compare) &#123;</span><br><span class="line">      <span class="comment">// Don&#x27;t call directly to avoid exposing the builtin&#x27;s global object.</span></span><br><span class="line">      <span class="keyword">return</span> comparefn.<span class="title function_">call</span>(<span class="literal">null</span>, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (%<span class="title function_">_IsSmi</span>(x) &amp;&amp; %<span class="title function_">_IsSmi</span>(y)) &#123;</span><br><span class="line">      <span class="keyword">return</span> %<span class="title class_">SmiLexicographicCompare</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    x = <span class="title class_">ToString</span>(x);</span><br><span class="line">    y = <span class="title class_">ToString</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> x &lt; y ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">InsertionSort</span>(<span class="params">a, <span class="keyword">from</span>, to</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="keyword">from</span> + <span class="number">1</span>; i &lt; to; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> element = a[i];</span><br><span class="line">      <span class="comment">// Pre-convert the element to a string for comparison if we know</span></span><br><span class="line">      <span class="comment">// it will happen on each compare anyway.</span></span><br><span class="line">      <span class="keyword">var</span> key =</span><br><span class="line">          (custom_compare || %<span class="title function_">_IsSmi</span>(element)) ? element : <span class="title class_">ToString</span>(element);</span><br><span class="line">      <span class="comment">// place element in a[from..i[</span></span><br><span class="line">      <span class="comment">// binary search</span></span><br><span class="line">      <span class="keyword">var</span> min = <span class="keyword">from</span>;</span><br><span class="line">      <span class="keyword">var</span> max = i;</span><br><span class="line">      <span class="comment">// The search interval is a[min..max[</span></span><br><span class="line">      <span class="keyword">while</span> (min &lt; max) &#123;</span><br><span class="line">        <span class="keyword">var</span> mid = min + ((max - min) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">var</span> order = <span class="title class_">Compare</span>(a[mid], key);</span><br><span class="line">        <span class="keyword">if</span> (order == <span class="number">0</span>) &#123;</span><br><span class="line">          min = max = mid;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (order &lt; <span class="number">0</span>) &#123;</span><br><span class="line">          min = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          max = mid;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// place element at position min==max.</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j &gt; min; j--) &#123;</span><br><span class="line">        a[j] = a[j - <span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      a[min] = element;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">QuickSort</span>(<span class="params">a, <span class="keyword">from</span>, to</span>) &#123;</span><br><span class="line">    <span class="comment">// Insertion sort is faster for short arrays.</span></span><br><span class="line">    <span class="keyword">if</span> (to - <span class="keyword">from</span> &lt;= <span class="number">22</span>) &#123;</span><br><span class="line">      <span class="title class_">InsertionSort</span>(a, <span class="keyword">from</span>, to);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 取中间的 index</span></span><br><span class="line">    <span class="keyword">var</span> pivot_index = $floor($random() * (to - <span class="keyword">from</span>)) + <span class="keyword">from</span>;</span><br><span class="line">    <span class="comment">// 取中的 element</span></span><br><span class="line">    <span class="keyword">var</span> pivot = a[pivot_index];</span><br><span class="line">    <span class="comment">// Pre-convert the element to a string for comparison if we know</span></span><br><span class="line">    <span class="comment">// it will happen on each compare anyway.</span></span><br><span class="line">    <span class="keyword">var</span> pivot_key =</span><br><span class="line">      (custom_compare || %<span class="title function_">_IsSmi</span>(pivot)) ? pivot : <span class="title class_">ToString</span>(pivot);</span><br><span class="line">    <span class="comment">// Issue 95: Keep the pivot element out of the comparisons to avoid</span></span><br><span class="line">    <span class="comment">// infinite recursion if comparefn(pivot, pivot) != 0.</span></span><br><span class="line">    a[pivot_index] = a[<span class="keyword">from</span>];</span><br><span class="line">    a[<span class="keyword">from</span>] = pivot;</span><br><span class="line">    <span class="keyword">var</span> low_end = <span class="keyword">from</span>;   <span class="comment">// Upper bound of the elements lower than pivot.</span></span><br><span class="line">    <span class="keyword">var</span> high_start = to;  <span class="comment">// Lower bound of the elements greater than pivot.</span></span><br><span class="line">    <span class="comment">// From low_end to i are elements equal to pivot.</span></span><br><span class="line">    <span class="comment">// From i to high_start are elements that haven&#x27;t been compared yet.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="keyword">from</span> + <span class="number">1</span>; i &lt; high_start; ) &#123;</span><br><span class="line">      <span class="keyword">var</span> element = a[i];</span><br><span class="line">      <span class="keyword">var</span> order = <span class="title class_">Compare</span>(element, pivot_key);</span><br><span class="line">      <span class="keyword">if</span> (order &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        a[i] = a[low_end];</span><br><span class="line">        a[low_end] = element;</span><br><span class="line">        i++;</span><br><span class="line">        low_end++;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (order &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        high_start--;</span><br><span class="line">        a[i] = a[high_start];</span><br><span class="line">        a[high_start] = element;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;  <span class="comment">// order == 0</span></span><br><span class="line">        i++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">QuickSort</span>(a, <span class="keyword">from</span>, low_end);</span><br><span class="line">    <span class="title class_">QuickSort</span>(a, high_start, to);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> old_length = <span class="title class_">ToUint32</span>(<span class="variable language_">this</span>.<span class="property">length</span>);</span><br><span class="line">  <span class="keyword">if</span> (old_length &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  %<span class="title class_">RemoveArrayHoles</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> length = <span class="title class_">ToUint32</span>(<span class="variable language_">this</span>.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Move undefined elements to the end of the array.</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">IS_UNDEFINED</span>(<span class="variable language_">this</span>[i])) &#123;</span><br><span class="line">      length--;</span><br><span class="line">      <span class="variable language_">this</span>[i] = <span class="variable language_">this</span>[length];</span><br><span class="line">      <span class="variable language_">this</span>[length] = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">QuickSort</span>(<span class="variable language_">this</span>, <span class="number">0</span>, length);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We only changed the length of the this object (in</span></span><br><span class="line">  <span class="comment">// RemoveArrayHoles) if it was an array.  We are not allowed to set</span></span><br><span class="line">  <span class="comment">// the length of the this object if it is not an array because this</span></span><br><span class="line">  <span class="comment">// might introduce a new length property.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">IS_ARRAY</span>(<span class="variable language_">this</span>)) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> = old_length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SO，把以上源码粗略的看下来。总结如下："><a href="#SO，把以上源码粗略的看下来。总结如下：" class="headerlink" title="** SO，把以上源码粗略的看下来。总结如下：**"></a>** SO，把以上源码粗略的看下来。总结如下：**</h4><ol><li> 先回复我第一个疑问，sort 排序，回调中有两个参数，一个是从0到当前遍历的元素中的中间的元素，另外一个是当前遍历元素；</li><li> 对比以上两个元素，返回结果赋值给order，order 的结果决定 min 的计算方法；</li><li> min 初始值为 0，计算 min 决定对比元素插入的位置。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>发布订阅者</title>
      <link href="/2019/08/28/%E6%A8%A1%E5%BC%8F-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/08/28/%E6%A8%A1%E5%BC%8F-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-观察者模式"><a href="#1-观察者模式" class="headerlink" title="1. 观察者模式"></a>1. 观察者模式</h1><p>对象间的一对多依赖关系，一个对象状态发生改变，依赖于它的对象都将得到通知，并自动更新。 观察者模式属于行为模式，行为模式。行为模式关注的是对象之间的通讯，观察者模式是观察者与被观察者之间的通讯。</p><h1 id="2-订阅-发布模式"><a href="#2-订阅-发布模式" class="headerlink" title="2. 订阅-发布模式"></a>2. 订阅-发布模式</h1><p>在现在的发布订阅模式中，称为发布者的消息发送者不会将消息直接发送给订阅者。发面者和订阅者之间存在第三个组件，称为调度中心或事件通道。调度中心或事件通道，维持着发布者和订阅者间的联系，过滤所有发布者传入的消息并相应地分发给订阅者。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PubSub</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscribers</span> = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">subscribe</span>(<span class="params">topic, callback</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> callbacks = <span class="variable language_">this</span>.<span class="property">subscribers</span>[topic];</span><br><span class="line">        <span class="keyword">if</span> (!callbacks) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">subscribers</span>[topic] = [callback];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            callbacks.<span class="title function_">push</span>(callback);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">publish</span>(<span class="params">topic, ...args</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> callbacks = <span class="variable language_">this</span>.<span class="property">subscribers</span>[topic] || [];</span><br><span class="line">        callbacks.<span class="title function_">forEach</span>(<span class="function"><span class="params">callback</span> =&gt;</span> <span class="title function_">callback</span>(...args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建事件调度中心，为订阅者和发布者提供调度服务</span></span><br><span class="line"><span class="keyword">let</span> pubSub = <span class="keyword">new</span> <span class="title class_">PubSub</span>();</span><br><span class="line"><span class="comment">// A订阅了SMS事件（A只关注SMS本身，而不关心谁发布这个事件）</span></span><br><span class="line">pubSub.<span class="title function_">subscribe</span>(<span class="string">&#x27;SMS&#x27;</span>, <span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"><span class="comment">// B订阅了SMS事件</span></span><br><span class="line">pubSub.<span class="title function_">subscribe</span>(<span class="string">&#x27;SMS&#x27;</span>, <span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"><span class="comment">// C发布了SMS事件（C只关注SMS本身，不关心谁订阅了这个事件）</span></span><br><span class="line">pubSub.<span class="title function_">publish</span>(<span class="string">&#x27;SMS&#x27;</span>, <span class="string">&#x27;I published `SMS` event&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">observers</span> = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">add</span>(<span class="params">observer</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">push</span>(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">notify</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">observer</span> =&gt;</span> observer.<span class="title function_">update</span>(...args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="title function_">update</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(...args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建观察者ob1</span></span><br><span class="line"><span class="keyword">let</span> ob1 = <span class="keyword">new</span> <span class="title class_">Observer</span>();</span><br><span class="line"><span class="comment">// 创建观察者ob2</span></span><br><span class="line"><span class="keyword">let</span> ob2 = <span class="keyword">new</span> <span class="title class_">Observer</span>();</span><br><span class="line"><span class="comment">// 创建目标sub</span></span><br><span class="line"><span class="keyword">let</span> sub = <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line"><span class="comment">// 目标sub添加观察者ob1 （目标和观察者建立了依赖关系）</span></span><br><span class="line">sub.<span class="title function_">add</span>(ob1);</span><br><span class="line"><span class="comment">// 目标sub添加观察者ob2</span></span><br><span class="line">sub.<span class="title function_">add</span>(ob2);</span><br><span class="line"><span class="comment">// 目标sub触发SMS事件（目标主动通知观察者）</span></span><br><span class="line">sub.<span class="title function_">notify</span>(<span class="string">&#x27;I fired `SMS` event&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - 坑</title>
      <link href="/2019/08/28/%E5%9D%91-Vue/"/>
      <url>/2019/08/28/%E5%9D%91-Vue/</url>
      
        <content type="html"><![CDATA[<p>今天遇到了一个小问题，’blur’ 事件失焦时，vue 并没有把接口请求回来的data回填到页面。 现在来分析分析：</p><ul><li><input disabled="" type="checkbox"> blur 的锅，no ，it isn’t！因为吧，失焦事件的回调函数执行了；</li><li><input checked="" disabled="" type="checkbox"> 异步请求回调成功后赋值失败，打完断点发现吧，没这回事。赋值成功。 嘿嘿，不卖关子了！上代码</li></ul><span id="more"></span> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;姓名：&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.name&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;handlerAccount&quot;</span> @<span class="attr">blur</span>=<span class="string">&quot;checkSame&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">form</span>: &#123;&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">checkSame</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">account</span> = <span class="string">&#x27;test1&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里先简单的说说，vue 实现双像绑定用的是 Obeject.defineProperty() 来监听属性变动， 需要监听的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter和getter，data 中的 form 没有 account 属性，checkSame 方法直接给 form 添加新属性，通过 <code>this.form.account</code> 添加的属性没有 setter 和 setter和getter 方法，不具备监听。所以双向绑定也就无从谈起了。修改方法有以下两种：</p></blockquote><hr><hr><ul><li>修改方式 – 初始化每个需要双向绑定的属性及对象属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化每个需要双向绑定的属性及对象属性</span></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">form</span>: &#123;</span><br><span class="line">      <span class="attr">account</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">checkSame</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">account</span> = <span class="string">&#x27;test1&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过 Object.assign 给 form 添加新属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 Object.assign 给 form 添加新属性</span></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">form</span>: &#123;</span><br><span class="line">      <span class="attr">account</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">checkSame</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">form</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, &#123;</span><br><span class="line">      <span class="attr">account</span>: <span class="string">&#x27;test1&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios 源码解读</title>
      <link href="/2019/07/23/axios-%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
      <url>/2019/07/23/axios-%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<center>Getting Started(入门)</center>Promise based HTTP client (基于 Promise 的 HTTP 客户端)，for the browser and node.js.(用于浏览器和 nodeJS)<h2 id="What-is-Axios"><a href="#What-is-Axios" class="headerlink" title="What is Axios?"></a>What is Axios?</h2><p>Axios ia a promise-based HTTP Client for node.js and the browser.<br>Axios 是一个 HTTP Client，用于 node.js 和 浏览器。<br>it is isomorphic(同构的)（=it can run in the browser and node.js with the same codebase）.<br>On the server-side it uses the native node.js http module, while on the client it uses XMLHTTPRequests.</p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li>Make XMLHttpRequests from the browser 从浏览器端发送 XMLHttpRequest 请求</li><li>Make http requests from node.js 从 node.js 端发送 http 请求</li><li>Supports the Promise API 支持 Promise API</li><li>Intercept request and response 拦截请求和响应</li><li>Transform request and response data 转换请求和响应数据</li><li>Cancel requests</li><li>Timeouts</li><li>Query parameters serialization with support for nested(嵌套) entries 支持嵌套的查询参数序列化嵌套条目</li><li>Automatic request body serialization to: 自动将请求体序列化为：<ul><li>json( application/json )</li><li>Multipart / FormData( multiple/form-data )</li><li>URL encoded form( application/x-www-form-urlencoded )</li></ul></li><li>Posting HTML forms as JSON 以 JSON 形式发布 HTML 表单</li><li>Automatic JSON data handling in response 响应时自动处理 JSON 数据</li><li>Progess capturing for browser and node.js with extra info(speed rate, remaining time) 携带额外信息的浏览器和 node.js 的进度捕获。</li><li>Setting bandwidth limits for node.js 设置 node.js 带宽限制。</li><li>Compatible with spec-compliant FormData and Blob (including node.js) 兼容数据规范和 Blob</li><li>Client side support for protecting against XSRF 客户端支持防止XSRF</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">├── /dist/                     # 项目输出目录</span><br><span class="line">├── /lib/                      # 项目源码目录</span><br><span class="line">│ ├── /cancel/                 # 定义取消功能</span><br><span class="line">│ ├── /core/                   # 一些核心功能</span><br><span class="line">│ │ ├── Axios.js               # axios的核心主类</span><br><span class="line">│ │ ├── dispatchRequest.js     # 用来调用http请求适配器方法发送请求</span><br><span class="line">│ │ ├── InterceptorManager.js  # 拦截器构造函数</span><br><span class="line">│ │ └── settle.js              # 根据http响应状态，改变Promise的状态</span><br><span class="line">│ ├── /helpers/                # 一些辅助方法</span><br><span class="line">│ ├── /adapters/               # 定义请求的适配器 xhr、http</span><br><span class="line">│ │ ├── http.js                # 实现http适配器</span><br><span class="line">│ │ └── xhr.js                 # 实现xhr适配器</span><br><span class="line">│ ├── axios.js                 # 对外暴露接口</span><br><span class="line">│ ├── defaults.js              # 默认配置</span><br><span class="line">│ └── utils.js                 # 公用工具</span><br><span class="line">├── package.json               # 项目信息</span><br><span class="line">├── index.d.ts                 # 配置TypeScript的声明文件</span><br><span class="line">└── index.js                   # 入口文件</span><br></pre></td></tr></table></figure><pre class="mermaid">graph TDa["index.js/require('./lib/axios')"] --> b["createInstance(defaults)"]b --> c["new Axios(defaults)"]c --> d["Constructor Axios"]</pre>]]></content>
      
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue.config.js</title>
      <link href="/2019/07/22/vue-config-js/"/>
      <url>/2019/07/22/vue-config-js/</url>
      
        <content type="html"><![CDATA[<h1 id="全面解读-vue-config-js"><a href="#全面解读-vue-config-js" class="headerlink" title="全面解读 vue.config.js"></a>全面解读 <code>vue.config.js</code></h1><blockquote><p><a href="https://cli.vuejs.org/zh/config/">参考</a></p></blockquote><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 基本路径，默认被部署在根路径，如果需要部署在子路径，publicPath 设置为 /example/</span></span><br><span class="line">  <span class="attr">publicPath</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;development&quot;</span> ? <span class="string">&quot;/&quot;</span> : <span class="string">&quot;/mallActivity/&quot;</span>,</span><br><span class="line">  <span class="attr">outputDir</span>: <span class="string">&#x27;dist&#x27;</span>, <span class="comment">// 运行 vue-cli-service build 时生成生产环境构建文件的目录</span></span><br><span class="line">  <span class="attr">assetsDir</span>: <span class="string">&#x27;assets&#x27;</span>, <span class="comment">//生成文件的静态资源目录</span></span><br><span class="line">  <span class="comment">// productionSourceMap：&#123; type:Bollean,default:true &#125; 生产源映射</span></span><br><span class="line">  <span class="comment">// 如果您不需要生产时的源映射，那么将此设置为false可以加速生产构建</span></span><br><span class="line">  <span class="attr">productionSourceMap</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">loaderOptions</span>: &#123; <span class="comment">// CSS 加载器</span></span><br><span class="line">      <span class="attr">stylus</span>: &#123;</span><br><span class="line">        <span class="attr">javascriptEnabled</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> types = [<span class="string">&#x27;vue-modules&#x27;</span>, <span class="string">&#x27;vue&#x27;</span>, <span class="string">&#x27;normal-modules&#x27;</span>, <span class="string">&#x27;normal&#x27;</span>]</span><br><span class="line">    types.<span class="title function_">forEach</span>(<span class="function"><span class="params">type</span> =&gt;</span> <span class="title function_">addStyleResource</span>(config.<span class="property">module</span>.<span class="title function_">rule</span>(<span class="string">&#x27;stylus&#x27;</span>).<span class="title function_">oneOf</span>(type)))</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123; <span class="comment">// 在开发环境下将 API 请求代理到 API 服务器</span></span><br><span class="line">      <span class="string">&#x27;/mock&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://10.8.5.180:80&#x27;</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;^/mock&#x27;</span>: <span class="string">&#x27;/mock&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addStyleResource</span> (rule) &#123;</span><br><span class="line">  rule.<span class="title function_">use</span>(<span class="string">&#x27;style-resource&#x27;</span>)</span><br><span class="line">    .<span class="title function_">loader</span>(<span class="string">&#x27;style-resources-loader&#x27;</span>)</span><br><span class="line">    .<span class="title function_">options</span>(&#123;</span><br><span class="line">      <span class="attr">patterns</span>: [</span><br><span class="line">        path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src/assets/stylus/golbal.styl&#x27;</span>)</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cookie 与 Web Storage</title>
      <link href="/2019/06/14/%E6%B5%8F%E8%A7%88%E5%99%A8-cookie-webStorage/"/>
      <url>/2019/06/14/%E6%B5%8F%E8%A7%88%E5%99%A8-cookie-webStorage/</url>
      
        <content type="html"><![CDATA[<p>先了解下浏览器缓存存储过程的序列图：</p><div id="sequence-0"></div>`If-None-Match:"4f80f-13c-3a1xb12a"` 服务器用来判断请求资源是否有更新，如果没有更新就返回 304 状态码，浏览器继续使用缓存数据。如有更新，服务器直接返回资源给浏览器。<p>Web Storage 将少量数据存储于客户端磁盘的技术。实际业务中将不希望从数据库的少量数据通过 web storage 存储，如：用户登录态、用户当前的部分操作如购物车数量增加等。</p><h2 id="Web-Storage-使用前验证兼容性"><a href="#Web-Storage-使用前验证兼容性" class="headerlink" title="Web Storage 使用前验证兼容性"></a>Web Storage 使用前验证兼容性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">typeof</span> <span class="title class_">Storage</span>) == <span class="string">&#x27;undefined&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">// localStorage || sessionStorage 程序代码</span></span><br></pre></td></tr></table></figure><p><code>注意：</code></p><ul><li>由于部分 IE 和 Firefox 浏览器在测试的时候需要上传到服务器或 localhost 上执行，建议本地安装 http-server 测试。</li></ul><span id="more"></span><h2 id="window-localStorage"><a href="#window-localStorage" class="headerlink" title="window.localStorage"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage">window.localStorage</a></h2><p>只读的 localStorage 属性<code>允许你访问一个 Document 源（origin）的对象 Storage</code>；其存储的数据能在跨浏览器会话保留，不会随浏览器关闭而消失，数据可分页、跨窗口访问。</p><p>localStorage 类似 sessionStorage<br>但其区别在于：存储在 localStorage 的数据可以长期保留；而当页面会话结束——也就是说，当页面被关闭时，存储在 sessionStorage 的数据会被清除 。</p><p><code>注意:</code></p><ul><li>无论数据存储在 localStorage 还是 sessionStorage ，它们都特定于页面的协议。</li><li>localStorage 中的键值对总是以字符串的形式存储。 (需要注意, 和 javascript 对象相比, 键值对总是以字符串的形式存储意味着数值类型会自动转化为字符串类型。</li><li>localStorage API 与 javascript 一样基于同源策略（Same-Origin Policy），网页之间的相互调用仅限于相同的网站，同源才能获取同一个 localStorage。（同源策略：相同协议，相同域名IP，相同端口）</li></ul><h3 id="window-localStorage-存取的三种方式"><a href="#window-localStorage-存取的三种方式" class="headerlink" title="window.localStorage 存取的三种方式"></a>window.localStorage 存取的三种方式</h3><ol><li><p>window.localStorage 的对象方法 setItem 与 getItem</p><blockquote><p>window.localStorage.setItem(key, value)<br>var value = window.localStorage.getItem(key)</p></blockquote></li><li><p> 数组索引</p><blockquote><p>window.localStorage[‘key’] = value<br>var value = window.localStorage[‘key’]</p></blockquote></li><li><p> 属性</p><blockquote><p>window.localStorage.key = value<br>var value = window.localStorage.key</p></blockquote></li></ol><h3 id="window-localStorage-清除的几种方式"><a href="#window-localStorage-清除的几种方式" class="headerlink" title="window.localStorage 清除的几种方式"></a>window.localStorage 清除的几种方式</h3><ol><li>浏览器开发者工具 - application - localStorage - 选中删除项，点击管理工具上的删除</li><li><code>window.localStorage.removeItem(key)</code></li><li><code>delete window.localStorage.key</code></li><li><code>delete window.localStorage[key]</code></li><li>清除全部数据 <code>window.localStorage.clear()</code></li></ol><h2 id="window-sessionStorage"><a href="#window-sessionStorage" class="headerlink" title="window.sessionStorage"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage">window.sessionStorage</a></h2><p>用于保存临时数据，防止用户不小心刷新数据丢失，如大的表单提交。<br>sessionStorage 属性<code>允许你访问一个 session Storage 对象</code>。它与 localStorage 相似，不同之处在于 localStorage 里面存储的数据没有过期时间设置，而存储在 sessionStorage 里面的数据在页面会话结束时会被清除。页面会话在浏览器打开期间一直保持，并且重新加载或恢复页面仍会保持原来的页面会话。在新标签或窗口打开一个页面时会在顶级浏览上下文中初始化一个新的会话，这点和 session cookies 的运行方式不同。</p><blockquote><p>存储在 sessionStorage 或 localStorage 中的数据特定于该页面的协议。</p></blockquote><h3 id="window-sessionStorage-存取的三种方式"><a href="#window-sessionStorage-存取的三种方式" class="headerlink" title="window.sessionStorage 存取的三种方式"></a>window.sessionStorage 存取的三种方式</h3><ol><li><p>window.sessionStorage 的对象方法 setItem 与 getItem</p><blockquote><p>window.sessionStorage.setItem(key, value)<br>var value = window.sessionStorage.getItem(key)</p></blockquote></li><li><p> 数组索引</p><blockquote><p>window.sessionStorage[‘key’] = value<br>var value = window.sessionStorage[‘key’]</p></blockquote></li><li><p> 属性</p><blockquote><p>window.sessionStorage.key = value<br>var value = window.sessionStorage.key</p></blockquote></li></ol><h3 id="window-sessionStorage-清除的几种方式"><a href="#window-sessionStorage-清除的几种方式" class="headerlink" title="window.sessionStorage 清除的几种方式()"></a>window.sessionStorage 清除的几种方式()</h3><ol><li>浏览器开发者工具 - application - sessionStorage - 选中删除项，点击管理工具上的删除</li><li><code>window.sessionStorage.removeItem(key)</code></li><li><code>delete window.sessionStorage.key</code></li><li><code>delete window.sessionStorage[key]</code></li><li>清除全部数据 <code>window.sessionStorage.clear()</code></li><li>关闭浏览器或当前窗口</li></ol><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cookie">Cookie</a></h2><p>Cookie 是一个请求首部，其中含有先前由服务器通过 Set-Cookie 首部投放并存储到客户端的 HTTP cookies。<br>这个首部可能会被完全移除，例如在浏览器的隐私设置里面设置为禁用cookie。</p><blockquote><ul><li> Cookie 数据始终在同源的http请求中携带（即使不需要），就会在浏览器和服务器间来回传递，安全性低。而 Web Storage 不会把数据发给服务器，仅存在本地</li><li> 以键值对应组合保存数据</li></ul></blockquote><h2 id="Web-Storage-与-Cookie-对比表"><a href="#Web-Storage-与-Cookie-对比表" class="headerlink" title="Web Storage 与 Cookie 对比表"></a>Web Storage 与 Cookie 对比表</h2><table class="table table-striped"><thead><tr><th></th><th>属性</th><th>访问对象</th><th>过期时间</th><th>存储大小</th></tr></thead><tbody><tr><td>window.localStorage</td><td>/</td><td>Document 源（origin）的对象 Storage(local storage)</td><td>永久存储数据，浏览器关闭后数据不丢失，除非主动执行删除指令删除</td><td>HTML5 规范中，容量由客户端程序（浏览器）决定，通常 1mb~5mb</td></tr><tr><td>window.sessionStorage</td><td>/</td><td>session storage 对象</td><td>页面关闭，会话结束，session 清除</td><td>HTML5 规范中，容量由客户端程序（浏览器）决定，通常 1mb~5mb</td></tr><tr><td>Cookie</td><td>标识用户用户身份而存储在用户本地终端上的数据（通常经过加密）</td><td>/</td><td>Expires/Max-Age 之前有效</td><td>4kb</td></tr></tbody></table><script src="https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">title: 浏览器缓存序列图Note left of 浏览器:发起 http 请求浏览器->Cache: GET /index HTTP/1.1Note right of Cache: 缓存是空的，\n继续请求 web 服务器Cache->Web 服务器:GET /index HTTP/1.1Note left of Web 服务器: 缓存本地Web 服务器->Cache: HTTP/1.1 200 OK \n Cache-Control: \n Max-age=2000Cache->浏览器: HTTP/1.1 200 OK \n Cache-Control: \n Max-age=2000 \n Age:0Note left of 浏览器: 1000 秒后再次发起请求浏览器->Cache: GET /index HTTP/1.1Cache->Cache: /index.html \n Max-age=2000 \n Age=1000Note right of Cache: 缓存生命周期内的Cache->浏览器: HTTP/1.1 200 OK \n Cache-Control: \n Max-age=2000 \n Age:1000Note left of 浏览器: 2100 秒后再次发起请求浏览器->Cache: GET /index HTTP/1.1Note right of Cache: /index.html \n Max-age=2000 \n Age=2100 \n 缓存过期，向服务器请求Cache->Web 服务器: GET /index HTTP/1.1 \n If-None-MatchWeb 服务器->Cache: HTTP/1.1 304 Not ModifiedNote left of Web 服务器:服务器 304，\n 缓存内容没有改动Cache->浏览器: HTTP/1.1 304 \n Not Modified \n Cache-Control: \n Max-age=2000 \n Age:0</textarea><textarea id="sequence-0-options" style="display: none">{"theme":"simple"}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script>]]></content>
      
      
      
        <tags>
            
            <tag> browser </tag>
            
            <tag> window </tag>
            
            <tag> web-storage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 坑</title>
      <link href="/2019/06/03/%E5%9D%91-%E5%B7%A5%E5%85%B7-%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86-git/"/>
      <url>/2019/06/03/%E5%9D%91-%E5%B7%A5%E5%85%B7-%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86-git/</url>
      
        <content type="html"><![CDATA[<h3 id="orgin-Head-gt-origin-master-分支"><a href="#orgin-Head-gt-origin-master-分支" class="headerlink" title="orgin/Head -&gt; origin/master 分支"></a>orgin/Head -&gt; origin/master 分支</h3><blockquote><p>orgin/HEAD 像一个指针，表示默认分支。origin/Head -&gt; origin/master 代表 origin/master 是默认分支<br><code>git remote set-haed origin -d</code> 可以删除这个分支</p></blockquote><h3 id="idea-gitignore-忽略问题"><a href="#idea-gitignore-忽略问题" class="headerlink" title=".idea gitignore 忽略问题"></a>.idea gitignore 忽略问题</h3><blockquote><p>.gitignore 中添加 .idea/ 没用</p></blockquote><p><a href="https://help.github.com/en/articles/ignoring-files">原因参照 - 1</a><br><a href="https://git-scm.com/docs/gitignore">原因参照 - 2</a><br>忽略所有目录下的 .idea -&gt; **/.idea/</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">rm</span> --cached FILENAME</span><br></pre></td></tr></table></figure><h3 id="macos-升级后-git-编译错误"><a href="#macos-升级后-git-编译错误" class="headerlink" title="macos 升级后 git 编译错误"></a>macos 升级后 git 编译错误</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$&gt; git</span><br><span class="line">dyld: Symbol not found: _OBJC_IVAR_$_NSFont._fFlags</span><br><span class="line">  Referenced from: /Applications/Xcode.app/Contents/Frameworks/IDEFoundation.framework/Versions/A/../../../../SharedFrameworks/DVTKit.framework/Versions/A/DVTKit</span><br><span class="line">  Expected in: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit</span><br><span class="line"> in /Applications/Xcode.app/Contents/Frameworks/IDEFoundation.framework/Versions/A/../../../../SharedFrameworks/DVTKit.framework/Versions/A/DVTKit</span><br><span class="line">gcc: error: unable to locate xcodebuild, please make sure the path to the Xcode folder is set correctly!</span><br><span class="line">gcc: error: You can set the path to the Xcode folder using /usr/bin/xcode-select -switch</span><br></pre></td></tr></table></figure><blockquote><p>git: error: unable to locate xcodebuild, please make sure the path to the Xcode folder is set correctly!</p></blockquote><p><strong>解决办法</strong></p><blockquote><p>xcode-select –install<br>sudo /usr/bin/xcode-select –switch /Library/Developer/CommandLineTools/</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs 学习笔记</title>
      <link href="/2019/05/31/NodeJs-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/05/31/NodeJs-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>Node.js 是一个开源的、跨平台的 JavaScript 运行时环境。</p><p>官方提供的全局变量：</p><ul><li>__dirname 当前 JS 文件所在的目录的绝对路径</li><li>__filename 当前 JS 文件所在的绝对路径</li></ul><h2 id="fs-模块"><a href="#fs-模块" class="headerlink" title="fs 模块"></a>fs 模块</h2><p>The <code>node:fs</code> module enables interacting with the file system in a way modeled on standand POSIX functions<br><code>node:fs</code> 支持以标准POSIX函数为模型化的方式与文件系统交互。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./context.txt&#x27;</span>,callback)</span><br></pre></td></tr></table></figure><p><font color='red'>[Error: ENOENT: no such file or directory, open ‘context.txt’] </font><br><span class='custom-box custom-box-393'><code>path</code> 为相对路径时，<code>./</code> 指的是 node 运行环境的地址，如在 ‘/‘ 下运行 <code>node ./src/index.js</code> 当前目录是指根目录，<code>/context.txt</code>不存在，所以找不到文件。</span><br><a href="https://github.com/HelenZhangLP/demo/blob/master/node/src/demo14/index.js">具体的 Demo 案例</a></p><h3 id="fs-realpathSync-path-options"><a href="#fs-realpathSync-path-options" class="headerlink" title="fs.realpathSync(path[,options])"></a>fs.realpathSync(path[,options])</h3><p>return the resolved pathname 返回已解析的路径名</p><ul><li>  path <code>&lt;string&gt;</code> | <code>&lt;Buffer&gt;</code> | <code>&lt;URL&gt;</code></li><li>options <code>&lt;string&gt;</code> | <code>&lt;Object&gt;</code><ul><li>encoding <code>&lt;string&gt;</code> Default: ‘utf8’</li><li>encoding utf8/buffer/base64</li></ul></li><li>  Returns: <code>&lt;string&gt;</code> | <code>&lt;Buffer&gt;</code></li></ul><h3 id="fs-util"><a href="#fs-util" class="headerlink" title="fs - util"></a>fs - util</h3><p>The node:util module supports the needs of Node.js internal APIs. Many of the utilities are useful for application and developers as well.<br>node:util 模块支持 Node.js 内部 APIs 的需求。许多实用程序对应用程序和模块开发人员是有用的</p><h4 id="fs-util-promisify"><a href="#fs-util-promisify" class="headerlink" title="fs - util.promisify"></a>fs - util.promisify</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * original &lt;Function&gt;</span></span><br><span class="line"><span class="comment"> * returns: &lt;Function&gt;</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line">util.<span class="title function_">promisify</span>(original)</span><br></pre></td></tr></table></figure><p>Takes a function following the common error-first callback style, i.e. taking an (err, value) =&gt; … callback as the last argument，and returns a version that returns promises.<br>采用遵循常见的错误优先样式的回调函数，也就是说采用 <code>(err, value) =&gt; ...</code> 回调函数作为参数，且返回 promises 版本。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 util 模块</span></span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>), fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> uReadFile = util.<span class="title function_">promisify</span>(fs.<span class="property">readFile</span>)</span><br><span class="line"><span class="title function_">uReadFile</span>(<span class="string">&#x27;./context.txt&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v.<span class="title function_">toString</span>()), <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e))</span><br></pre></td></tr></table></figure><h3 id="vm-模块"><a href="#vm-模块" class="headerlink" title="vm 模块"></a>vm 模块</h3><p>The node:vm module enables compiling and running code within V8 Virtual Machine context<br>vm 模块可以在 V8 虚拟机中编译运行代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vm.<span class="title function_">runInNewContext</span>(code)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * code &lt;string&gt; 要运行和编译的 JavaScript 代码（The JavaScript code to compile and run）</span></span><br><span class="line"><span class="comment"> * contextObject &lt;Object&gt; 一个要被上下文化的对象（An object that will be contextified）, 如果未定义，会创建一个新对象（if undefined, a new object will be created.）</span></span><br><span class="line"><span class="comment"> * options &lt;Object&gt; | &lt;string&gt; </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.<span class="title function_">runInNewContext</span>(code, sandbox, <span class="string">&quot;sea-debug.vm&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><h3 id="http-模块"><a href="#http-模块" class="headerlink" title="http 模块"></a>http 模块</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、导入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="comment">// 2、创建 Web 服务</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createSever</span>()</span><br><span class="line"><span class="comment">// 3、绑定 request 事件</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = req.<span class="property">url</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&#x27;&lt;h1&gt;Not Found&lt;/h1&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (url === <span class="string">&#x27;/&#x27;</span> || url === <span class="string">&#x27;/index.html&#x27;</span>) &#123;</span><br><span class="line">        str = <span class="string">&#x27;&lt;h1&gt;首页&lt;/h1&gt;&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">&#x27;/about.html&#x27;</span>) &#123;</span><br><span class="line">        str = <span class="string">&#x27;&lt;h1&gt;关于&lt;/h1&gt;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理响应数据乱码的问题</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment">// 响应发送给客户端</span></span><br><span class="line">    res.<span class="title function_">end</span>(str)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、 启动服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(port, host, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`http://<span class="subst">$&#123;host&#125;</span>:<span class="subst">$&#123;port&#125;</span> 已启动`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="path-模块"><a href="#path-模块" class="headerlink" title="path 模块"></a>path 模块</h3><blockquote><p>提供用于处理文件路径和目录路径的实用工具</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> path.resolve()<blockquote><p>将路径或片断序列解析为绝对路径</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不传参</span></span><br><span class="line">path.<span class="title function_">resolve</span>()  <span class="comment">// &#x27;/Users/lipingzhang/gitProject/blog&#x27;</span></span><br><span class="line">path.<span class="title function_">resolve</span>(<span class="number">1</span>) <span class="comment">// TypeError [ERR_INVALID_ARG_TYPE]: The &quot;path&quot; argument must be of type string. Received type number</span></span><br><span class="line">path.<span class="title function_">resolve</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>) <span class="comment">// &#x27;/Users/lipingzhang/gitProject/blog/a/b&#x27;</span></span><br><span class="line">path.<span class="title function_">resolve</span>(<span class="string">&#x27;/temp&#x27;</span>,<span class="string">&#x27;new&#x27;</span>) <span class="comment">//  &#x27;/temp/new&#x27;</span></span><br><span class="line">path.<span class="title function_">resolve</span>(<span class="string">&#x27;wwwroot&#x27;</span>, <span class="string">&#x27;static_files/png/&#x27;</span>, <span class="string">&#x27;../gif/image.gif&#x27;</span>) <span class="comment">// &#x27;/Users/lipingzhang/gitProject/blog/wwwroot/static_files/gif/image.gif&#x27;</span></span><br></pre></td></tr></table></figure></li><li><input checked="" disabled="" type="checkbox"> path.join(<string>)<blockquote><p>使用平台特定分隔符将所有给定 path 片段连接在一起，规范化生成路径</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">join</span>() <span class="comment">// &#x27;.&#x27; 表示当前目录</span></span><br><span class="line">path.<span class="title function_">join</span>(process.<span class="title function_">cwd</span>(), <span class="string">&#x27;hexo.json&#x27;</span>) <span class="comment">// &#x27;/Users/lipingzhang/Desktop/hexo-cli的副本/a.json&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="process"><a href="#process" class="headerlink" title="process"></a>process</h2><p>The process object provides information about, and control over(对…的控制)，the current Node.js process.<br>进程对象提供了当前 NodeJs 进程的相关信息和支配。</p><blockquote><p>全局变量，提供有关当前 Node.js 进程信息，并对其进行控制，不需要 require</p></blockquote><h3 id="platform"><a href="#platform" class="headerlink" title="platform"></a>platform</h3><h3 id="chdir"><a href="#chdir" class="headerlink" title="chdir"></a>chdir</h3><h3 id="process-cwd"><a href="#process-cwd" class="headerlink" title="process.cwd()"></a>process.cwd()</h3><p>The <code>process.cwd()</code> 返回 <string>，this method returns the current working directory of the Node.js process.</p><h3 id="process-env"><a href="#process-env" class="headerlink" title="process.env"></a>process.env</h3><blockquote><Object>The process.env property returns an object containing the user enviroment.</blockquote><h3 id="argv"><a href="#argv" class="headerlink" title="argv"></a>argv</h3><h3 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h3><h3 id="Process-events"><a href="#Process-events" class="headerlink" title="Process events"></a>Process events</h3><h4 id="Event-‘unhandledRejection’"><a href="#Event-‘unhandledRejection’" class="headerlink" title="Event: ‘unhandledRejection’"></a>Event: ‘unhandledRejection’</h4><blockquote><p>The ‘unhandledRejection’ event is emitted whenever a Promise is rejected and no error handler is attached to the promise within a turn of the event loop.<br>当 Promise 请求被拒绝且一轮事件循环中没有错误处理程序添加到 promise 时，发送 ‘unhandledRejection’<br>when programing with Promises, exceptions are encapsulated as ‘rejected promise’<br>当使用 Promise 编程时，异常被封装为 ‘rejected promise’<br>Rejections can be caught and handled using <code>promise.catch()</code> and are propagated through a <code>Promise</code> chain.<br>使用 <code>prmise.catch()</code> 可以捕获并处理 Rejections，通过 promise chain 可以传播 rejections.<br>The <code>unhandledRejection</code> event is useful for detecting and keeping track of promises that were rejected whose rejections have not yet been handled.<br><code>unhandledRejection</code> 事件可以用于检测和跟踪那些未处理或拒绝的 rejections </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> process = <span class="built_in">require</span>(<span class="string">&#x27;node:process&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * reason &lt;Error&gt; | &lt;any&gt; The object with which the promise was rejected (typically an Error object).</span></span><br><span class="line"><span class="comment"> * promise &lt;Promise&gt; The rejected promise.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;unhandledRejection&#x27;</span>, <span class="function">(<span class="params">reason, promise</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The following will also trigger the &#x27;unhandledRejection&#x27; event to be emitted:</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SomeResource</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Initially set the loaded status to a rejected promise</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">loaded</span> = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Resource not yet loaded!&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resource = <span class="keyword">new</span> <span class="title class_">SomeResource</span>();</span><br></pre></td></tr></table></figure><h4 id="process-信号事件"><a href="#process-信号事件" class="headerlink" title="process - 信号事件"></a>process - 信号事件</h4><p>Interrupt from keyboard<br>SIGINT 在终端运行时，可以被所有平台支持，通常可以通过 <Ctrl>+C 触发(虽然这个不能配置)。 当终端运行在raw模式，它不会被触发。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;SIGINT&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// callback function</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分析 hexo 脚手架</title>
      <link href="/2019/05/21/%E5%88%86%E6%9E%90-hexo-%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>/2019/05/21/%E5%88%86%E6%9E%90-hexo-%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$: hexo</span><br><span class="line"></span><br><span class="line">Usage: hexo &lt;<span class="built_in">command</span>&gt;</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  <span class="built_in">help</span>     Get <span class="built_in">help</span> on a <span class="built_in">command</span>.</span><br><span class="line">  init     Create a new Hexo folder.</span><br><span class="line">  version  Display version information.</span><br><span class="line"></span><br><span class="line">Global Options:</span><br><span class="line">  --config  Specify config file instead of using _config.yml</span><br><span class="line">  --cwd     Specify the CWD</span><br><span class="line">  --debug   Display all verbose messages <span class="keyword">in</span> the terminal</span><br><span class="line">  --draft   Display draft posts</span><br><span class="line">  --safe    Disable all plugins and scripts</span><br><span class="line">  --silent  Hide output on console</span><br><span class="line"></span><br><span class="line">For more <span class="built_in">help</span>, you can use <span class="string">&#x27;hexo help [command]&#x27;</span> <span class="keyword">for</span> the detailed information</span><br><span class="line">or you can check the docs: http://hexo.io/docs/</span><br></pre></td></tr></table></figure><span id="more"></span><ol><li> help</li><li> init</li><li> version</li></ol><h3 id="引入依赖包"><a href="#引入依赖包" class="headerlink" title="引入依赖包"></a>引入依赖包</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chalk = <span class="built_in">require</span>(<span class="string">&#x27;chalk&#x27;</span>); <span class="comment">// chalk 粉笔  &quot;chalk&quot;: &quot;^1.1.3&quot;,</span></span><br><span class="line"><span class="keyword">var</span> tildify = <span class="built_in">require</span>(<span class="string">&#x27;tildify&#x27;</span>); <span class="comment">// tildify 使变薄 &quot;tildify&quot;: &quot;^1.2.0&quot; convert an absolute path to a tilde path 将绝对路径转换为 ~/路径</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Promise</span> = <span class="built_in">require</span>(<span class="string">&#x27;bluebird&#x27;</span>); <span class="comment">// bluebird 知更鸟 &quot;bluebird&quot;: &quot;^3.4.0&quot;,</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Context</span> = <span class="built_in">require</span>(<span class="string">&#x27;./context&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> findPkg = <span class="built_in">require</span>(<span class="string">&#x27;./find_pkg&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> goodbye = <span class="built_in">require</span>(<span class="string">&#x27;./goodbye&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> minimist = <span class="built_in">require</span>(<span class="string">&#x27;minimist&#x27;</span>); <span class="comment">//minimist 参数解析</span></span><br><span class="line"><span class="keyword">var</span> resolve = <span class="built_in">require</span>(<span class="string">&#x27;resolve&#x27;</span>); <span class="comment">// 同步或异步解决方案</span></span><br><span class="line"><span class="keyword">var</span> camelCaseKeys = <span class="built_in">require</span>(<span class="string">&#x27;hexo-util/lib/camel_case_keys&#x27;</span>); <span class="comment">// 参数对象转换为驼峰命名 (?)</span></span><br></pre></td></tr></table></figure><h3 id="lib-hexo-js"><a href="#lib-hexo-js" class="headerlink" title="./lib/hexo.js"></a>./lib/hexo.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">entry</span>(<span class="params">cwd, args</span>) &#123;</span><br><span class="line">  cwd = cwd || process.<span class="title function_">cwd</span>();</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 返回 node 进程工作的当前目录    </span></span><br><span class="line"><span class="comment">   * &#x27;/Users/lipingzhang/Desktop/hexo-cli的副本&#x27;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * process.argv</span></span><br><span class="line"><span class="comment">   * [ &#x27;/usr/local/bin/node&#x27;, &#x27;/Users/lipingzhang/Desktop/hexo-cli的副本/bin/hexo&#x27;, &#x27;init&#x27; ]</span></span><br><span class="line"><span class="comment">   * 返回一个包含 node process 命令行启动时传入的参数数组</span></span><br><span class="line"><span class="comment">   * 第一个参数 process.execPath 启动 node 进程的可执行文件绝对路径</span></span><br><span class="line"><span class="comment">   * 第二个参数是将要执行的文件路径</span></span><br><span class="line"><span class="comment">   * 其它为所有其余命令行参数</span></span><br><span class="line"><span class="comment">   * process.argv.slice(2) [ &#x27;init&#x27; ]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * minimist minimist(process.argv.slice(2))</span></span><br><span class="line"><span class="comment">    * &#123; _: Array(1) &#125; &#123; _: [ &#x27;init&#x27; ]&#125;</span></span><br><span class="line"><span class="comment">    * camelCaseKeys 参数对象转换为驼峰命名</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  args = <span class="title function_">camelCaseKeys</span>(args || <span class="title function_">minimist</span>(process.<span class="property">argv</span>.<span class="title function_">slice</span>(<span class="number">2</span>)));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> hexo = <span class="keyword">new</span> <span class="title class_">Context</span>(cwd, args);</span><br><span class="line">  <span class="keyword">var</span> log = hexo.<span class="property">log</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Change the title in console</span></span><br><span class="line">  process.<span class="property">title</span> = <span class="string">&#x27;hexo&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pathFn = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkPkg</span>(<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> pkgPath = pathFn.<span class="title function_">join</span>(path, <span class="string">&#x27;package.json&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> fs.<span class="title function_">readFile</span>(pkgPath).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">content</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> json = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(content);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> json.<span class="property">hexo</span> === <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> path;</span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err &amp;&amp; err.<span class="property">cause</span>.<span class="property">code</span> === <span class="string">&#x27;ENOENT&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> parent = pathFn.<span class="title function_">dirname</span>(path);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (parent === path) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">checkPkg</span>(parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="context-js"><a href="#context-js" class="headerlink" title="./context.js"></a>./context.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> logger = <span class="built_in">require</span>(<span class="string">&#x27;hexo-log&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> chalk = <span class="built_in">require</span>(<span class="string">&#x27;chalk&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">EventEmitter</span> = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>).<span class="property">EventEmitter</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Promise</span> = <span class="built_in">require</span>(<span class="string">&#x27;bluebird&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ConsoleExtend</span> = <span class="built_in">require</span>(<span class="string">&#x27;./extend/console&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Context</span>(<span class="params">base, args</span>) &#123;</span><br><span class="line">  base = base || process.<span class="title function_">cwd</span>();</span><br><span class="line">  args = args || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">EventEmitter</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">base_dir</span> = base;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">log</span> = <span class="title function_">logger</span>(args);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">extend</span> = &#123;</span><br><span class="line">    <span class="attr">console</span>: <span class="keyword">new</span> <span class="title class_">ConsoleExtend</span>()</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="extend-console-js"><a href="#extend-console-js" class="headerlink" title="./extend/console.js"></a>./extend/console.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> abbrev = <span class="built_in">require</span>(<span class="string">&#x27;abbrev&#x27;</span>); <span class="comment">// 速记短别名</span></span><br><span class="line"><span class="comment">// constructor Console  --&gt; Initialization parameters store &amp;&amp; alias</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Console</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">store</span> = &#123;&#125;;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">alias</span> = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Console</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span> = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  name = name.<span class="title function_">toLowerCase</span>(); <span class="comment">// 入参转换为小写</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">store</span>[<span class="variable language_">this</span>.<span class="property">alias</span>[name]];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Console</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">list</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">store</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Console</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">register</span> = <span class="keyword">function</span>(<span class="params">name, desc, options, fn</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!name) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;name is required&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">    <span class="keyword">if</span> (options) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> options === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        fn = options;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> desc === <span class="string">&#x27;object&#x27;</span>) &#123; <span class="comment">// name, options, fn</span></span><br><span class="line">          options = desc;</span><br><span class="line">          desc = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// name, desc, fn</span></span><br><span class="line">          options = &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;fn must be a function&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// name, fn</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> desc === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        fn = desc;</span><br><span class="line">        options = &#123;&#125;;</span><br><span class="line">        desc = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;fn must be a function&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fn.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      fn = <span class="title class_">Promise</span>.<span class="title function_">promisify</span>(fn);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fn = <span class="title class_">Promise</span>.<span class="title function_">method</span>(fn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> c = <span class="variable language_">this</span>.<span class="property">store</span>[name.<span class="title function_">toLowerCase</span>()] = fn;</span><br><span class="line">    c.<span class="property">options</span> = options;</span><br><span class="line">    c.<span class="property">desc</span> = desc;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">alias</span> = <span class="title function_">abbrev</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">store</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="console-init"><a href="#console-init" class="headerlink" title="./console/init"></a>./console/init</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> assign = <span class="built_in">require</span>(<span class="string">&#x27;object-assign&#x27;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initConsole</span>(<span class="params">args</span>) &#123;</span><br><span class="line">  args = <span class="title function_">assign</span>(&#123;</span><br><span class="line">    <span class="attr">install</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">clone</span>: <span class="literal">true</span></span><br><span class="line">  &#125;, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS display: none vs visibility: hidden</title>
      <link href="/2019/05/13/CSS-display-none-vs-visibility-hidden/"/>
      <url>/2019/05/13/CSS-display-none-vs-visibility-hidden/</url>
      
        <content type="html"><![CDATA[<h3 id="display-none-与-visibility-hidden-区别"><a href="#display-none-与-visibility-hidden-区别" class="headerlink" title="display:none 与 visibility:hidden 区别"></a>display:none 与 visibility:hidden 区别</h3><blockquote><p>display 指定元素显示框架的类型，none 隐藏不占文档流，不会影响布局<br>visibility 显示或隐藏元素而不更改文档的布局，hidden 相当于此元素变成透明并且 text-indent: -9999px，会影响布局</p></blockquote><span id="more"></span><h4 id="可以用以下实例进行验证"><a href="#可以用以下实例进行验证" class="headerlink" title="可以用以下实例进行验证"></a>可以用以下实例进行验证</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&#x27;item-wrap&#x27;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;li class=&quot;style1&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;img src=&quot;&quot; alt=&quot;&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;div&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;/li&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;style2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;style3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>last dom<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><!-- more --><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.style1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;http://img0.fengqu-inc.com/cmsres/20190430/2f836f6d-91ed-4c5e-ae2a-81c32357786e.png&#x27;</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.style2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;http://img0.fengqu-inc.com/cmsres/20190430/a8c73c89-6175-404a-b2b5-533c05d0f601.png&#x27;</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.style3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;http://img0.fengqu-inc.com/cmsres/20190430/0e16b8ee-4251-456a-bf35-093bace3d252.png&#x27;</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上三张背景图是否下载-？-没有在官方文档中找到详细说明，以下仅代表个人实验结果"><a href="#以上三张背景图是否下载-？-没有在官方文档中找到详细说明，以下仅代表个人实验结果" class="headerlink" title="以上三张背景图是否下载 ？(没有在官方文档中找到详细说明，以下仅代表个人实验结果)"></a>以上三张背景图是否下载 ？(<code>没有在官方文档中找到详细说明，以下仅代表个人实验结果</code>)</h3><ul><li><input disabled="" type="checkbox"> 定义样式不引用，图片资源不会下载，其它形式不管是 display: none 还是 visibility: hidden 都会下载图片资源，如下图</li></ul><hr><iframe id="cp_embed_ewpVBp" src="//codepen.io/helenzhanglp|anonymous|anon/embed/ewpVBp?height=265&theme-id=0&slug-hash=ewpVBp&default-tab=result&embed-version=2" scrolling="no" frameborder="no" height="265" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><p><img src="https://s2.ax1x.com/2019/06/14/V4D334.png" alt="图片下载资源"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 居中</title>
      <link href="/2019/05/05/CSS-%E5%B1%85%E4%B8%AD/"/>
      <url>/2019/05/05/CSS-%E5%B1%85%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<p>居中分为两种：一是水平居中，二是垂直居中。可借用不同的布局方式做多种实现。</p><h2 id="水平布局-Normal-flow"><a href="#水平布局-Normal-flow" class="headerlink" title="水平布局 + Normal flow"></a>水平布局 + Normal flow</h2><p>不进行任何布局，采用 html 默认布局方式</p><ol><li> 行内元素，父容器设置 text-align: center;</li><li> 块级元素：margin: 0 auto;</li></ol><span id="more"></span><h2 id="水平布局-Flexbox"><a href="#水平布局-Flexbox" class="headerlink" title="水平布局 + Flexbox"></a>水平布局 + Flexbox</h2><ol><li> 父容器设置：display: flex; justify-content: center; align-items: start; // 垂直方向不要拉伸</li><li> 父容器设置：display: flex; margin: 0 auto;</li></ol><h2 id="水平布局-grid-IE-浏览器不兼容"><a href="#水平布局-grid-IE-浏览器不兼容" class="headerlink" title="水平布局 + grid (IE 浏览器不兼容)"></a>水平布局 + grid (IE 浏览器不兼容)</h2><p>父容器：display: grid; 子容器 justify-self: center; align-self: center;</p><h2 id="水平布局-定位-position-absolute"><a href="#水平布局-定位-position-absolute" class="headerlink" title="水平布局 + 定位 position: absolute"></a>水平布局 + 定位 position: absolute</h2><p>这里有三种实现(假设 元素 width: 100px)：</p><ol><li>position: absolute; margin-left: 50%; transform: translateX(-50%);</li><li>position: absolute; margin-left: 50%; transform: translateX(-50px);</li><li>position: absolute; left: 50%; margin-left: 50%;</li><li>position: absolute; left: 0; right: 0; margin: auto;</li></ol><blockquote><p><code>注意：</code></p></blockquote><ol><li> absolute 相对于最近的非 ‘static’ 元素定位；如果该元素不存在，则相对于 initial container block 定位。<a href="https://helenzhanglp.github.io/2020/10/12/CSS-position-absolute/">详见</a></li><li> transform 属性兼容 IE10 以上浏览器</li><li> <a href="https://helenzhanglp.github.io/2020/10/19/CSS-Margin-auto/">有关第4种实现方式的理解</a></li></ol><h2 id="水平布局-定位-position-relative"><a href="#水平布局-定位-position-relative" class="headerlink" title="水平布局 + 定位 position: relative"></a>水平布局 + 定位 position: relative</h2><p>需要居中的 block 元素上设置样式： position: relative; margin: auto;</p><h2 id="水平布局-table-cell"><a href="#水平布局-table-cell" class="headerlink" title="水平布局 + table-cell"></a>水平布局 + table-cell</h2><h3 id="demo-垂直布局-imgIcon-文案"><a href="#demo-垂直布局-imgIcon-文案" class="headerlink" title="demo 垂直布局 imgIcon + 文案"></a>demo 垂直布局 imgIcon + 文案</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;vote&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;voteImg&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleVote&#125;</span> /&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;ml5&quot;</span>&gt;</span>&#123;vote&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: auto;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span> <span class="selector-tag">span</span>,</span><br><span class="line"><span class="selector-class">.item</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote></blockquote><hr><h2 id="垂直居中-Normal-Flow"><a href="#垂直居中-Normal-Flow" class="headerlink" title="垂直居中 + Normal Flow"></a>垂直居中 + Normal Flow</h2><ol><li>行内元素，父容器：line-height: height</li></ol><h2 id="垂直居中-flexbox"><a href="#垂直居中-flexbox" class="headerlink" title="垂直居中 + flexbox"></a>垂直居中 + flexbox</h2><ol><li>父容器：display: flex; 要实现居中的子容器：margin: auto 0(垂直水平居中 margin: auto)</li></ol><blockquote><h1 id="display-block"><a href="#display-block" class="headerlink" title="display: block"></a>display: block</h1></blockquote><h2 id="块级元素垂直居中-display-block-position-relative-margin-25px-auto-0"><a href="#块级元素垂直居中-display-block-position-relative-margin-25px-auto-0" class="headerlink" title="块级元素垂直居中 - display: block; position: relative; margin: -25px auto 0;"></a>块级元素垂直居中 - <code>display: block; position: relative; margin: -25px auto 0;</code></h2><blockquote><p>居中元素相对于父元素向下偏移父元素的 left: 50%；再向上偏移该元素的 margin-top: -50%<br>  *** 必须 - 居中元素的高 ***</p></blockquote><img src="https://s2.ax1x.com/2019/05/10/ERVQnx.png" alt='块级元素垂直居中' width="300" hegiht="200" align=center /><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.db-vertical-center</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">25px</span> auto <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="块级元素垂直居中-position-absolute-margin-auto"><a href="#块级元素垂直居中-position-absolute-margin-auto" class="headerlink" title="块级元素垂直居中 - position: absolute; margin: auto;"></a>块级元素垂直居中 - <code>position: absolute; margin: auto;</code></h2><blockquote><p>position: absolute; 脱离文档流<br>  margin-left + left + width + margin-right + right = view width<br>  margin: auto 浏览器计算 margin<br>  脱离文档流后 margin 根据原位置进行位移</p></blockquote><img src="https://s2.ax1x.com/2019/05/10/ERVlB6.png" alt='块级元素水平居中' width="300" hegiht="200" align=center /><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#efefef</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.db-center</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="块级元素垂直居中-position-relative-left-amp-top-calc"><a href="#块级元素垂直居中-position-relative-left-amp-top-calc" class="headerlink" title="块级元素垂直居中 - position: relative; left &amp; top calc()"></a>块级元素垂直居中 - <code>position: relative; left &amp; top calc()</code></h2><blockquote><p>根据父元素定位，calc 计算 left , top 位置。 用父元素的 50% - 子元素的 50%<br>  *** 必须 - 居中元素的宽高 ***</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.db-center</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">25px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="块级元素垂直居中-position-relative-top-50-transform-translateY-50"><a href="#块级元素垂直居中-position-relative-top-50-transform-translateY-50" class="headerlink" title="块级元素垂直居中 - position: relative; top: 50%; transform: translateY(-50%)"></a>块级元素垂直居中 - <code>position: relative; top: 50%; transform: translateY(-50%)</code></h2><blockquote><p>position: 相对于父元素的宽高进行计算<br>  translate 元素自身的 50%</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.db-center</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h1 id="display-inline-block"><a href="#display-inline-block" class="headerlink" title="display: inline-block"></a>display: inline-block</h1></blockquote><h2 id="行内元素水平居中-text-align-center"><a href="#行内元素水平居中-text-align-center" class="headerlink" title="行内元素水平居中 - text-align: center"></a>行内元素水平居中 - <code>text-align: center</code></h2><blockquote><p>父容器为块状元素，子元素是为行内元素 display: inline-block;<br>  设置父元素的行内元素的水平居中</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.dib-horizontal-center</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="行内元素水平居中-line-height"><a href="#行内元素水平居中-line-height" class="headerlink" title="行内元素水平居中 - line-height"></a>行内元素水平居中 - <code>line-height</code></h2><blockquote><p>父容器为块状元素，子元素是为行内元素 display: inline-block;<br>  设置父元素的行内元素的垂直居中<br>  line-height: 值为父容器的高<br>  *** 子容器为单行元素适用，如果是多行需要居中，就采用块级元素居中方案 ***</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.dib-horizontal-center</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h1 id="display-flex"><a href="#display-flex" class="headerlink" title="display: flex"></a>display: flex</h1></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.df-center</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><iframe id="cp_embed_byGwXx" src="//codepen.io/helenzhanglp|anonymous|anon/embed/byGwXx?height=265&theme-id=0&slug-hash=byGwXx&default-tab=result&embed-version=2" scrolling="no" frameborder="no" height="265" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><blockquote><h1 id="display-table-cell"><a href="#display-table-cell" class="headerlink" title="display: table-cell"></a>display: table-cell</h1></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.dtable-center</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h1 id="display-grid"><a href="#display-grid" class="headerlink" title="display: grid"></a>display: grid</h1></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fatherWrap</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: center;</span><br><span class="line">    justify-self: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建 http 环境</title>
      <link href="/2019/05/03/%E6%90%AD%E5%BB%BA%20http%20%E7%8E%AF%E5%A2%83/"/>
      <url>/2019/05/03/%E6%90%AD%E5%BB%BA%20http%20%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="OpenResty"><a href="#OpenResty" class="headerlink" title="OpenResty"></a>OpenResty</h2><p>OpenResty 基于 Nginx 的 “强化包”，不仅<strong>支持 http/https</strong>，还特别<u>集成了<font color="red">脚本语言 Lua 简化 Nginx 二次开发</font>。<strong>方便搭建动态网关</strong>，能够当成应用容器来编写业务逻辑</u></p><h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><p>wireshark 抓包工具，能够截获在 TCP/IP 协议栈中传输的所有流量，并按协议类型、地址、端口等任意过滤。</p><h2 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cd http_study/www/</span><br><span class="line">$ openresty -p `pwd` -c config/nginx.conf</span><br><span class="line"></span><br><span class="line"># 停止项目</span><br><span class="line">$ openresty -s quit -p `pwd` -c config/nginx.conf</span><br></pre></td></tr></table></figure><p><font color="red">mac 使用 run.sh 替换 windows 的 run.bat</font><br><font color="darkgreen">127.0.0.1 为 loopback 环回地址 wireshark(windows) 中选择 Npcap loopback Adapter; wireshark(mac) 选择 loopback: lo0</font></p><h2 id="踩坑记"><a href="#踩坑记" class="headerlink" title="踩坑记"></a>踩坑记</h2><h3 id="Error-Failed-to-connect-to-raw-githubusercontent-com-port-443-Failed-to-download-resource-“openresty-openssl111–patch”"><a href="#Error-Failed-to-connect-to-raw-githubusercontent-com-port-443-Failed-to-download-resource-“openresty-openssl111–patch”" class="headerlink" title="Error: Failed to connect to raw.githubusercontent.com port 443:Failed to download resource “openresty-openssl111–patch”"></a>Error: Failed to connect to raw.githubusercontent.com port 443:Failed to download resource “openresty-openssl111–patch”</h3><blockquote><p>域名被 DNS 污染了，需要重新设置下本地的 hosts 域名解析顺序：<font color="red">浏览器缓存 -&gt; 本地 hosts -&gt; 外部 DNS</font></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/hosts</span><br><span class="line"># 添加</span><br><span class="line">199.232.4.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure><h3 id="Error-An-unexpected-error-occurred-during-the-brew-link-step-解决办法"><a href="#Error-An-unexpected-error-occurred-during-the-brew-link-step-解决办法" class="headerlink" title="Error: An unexpected error occurred during the brew link step 解决办法"></a>Error: An unexpected error occurred during the <code>brew link</code> step 解决办法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 创建 Frameworks 文件夹</span><br><span class="line">$ sudo mkdir /usr/local/Frameworks</span><br><span class="line"># 更改目录权限</span><br><span class="line">$ sudo chown -R $(whoami) /usr/local/Frameworks</span><br></pre></td></tr></table></figure><h3 id="The-capture-session-could-not-be-initiated-on-interface-‘lo0’-You-don’t-have-…"><a href="#The-capture-session-could-not-be-initiated-on-interface-‘lo0’-You-don’t-have-…" class="headerlink" title="The capture session could not be initiated on interface ‘lo0’ (You don’t have …"></a>The capture session could not be initiated on interface ‘lo0’ (You don’t have …</h3><blockquote><p>打开终端输入命令sudo chmod 777 /dev/bpf*</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>由一个面试题引发的一系列事故</title>
      <link href="/2019/04/04/Javascript-%E9%9D%A2%E8%AF%95%E9%A2%98-2/"/>
      <url>/2019/04/04/Javascript-%E9%9D%A2%E8%AF%95%E9%A2%98-2/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);&#125;)</span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)&#125;)</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="JavaScript-异步编程"><a href="#JavaScript-异步编程" class="headerlink" title="JavaScript 异步编程"></a>JavaScript 异步编程</h3><p>JavaScript 是单线程，同步方式运行代码。会出现阻塞进程的问题。</p><h4 id="JavaScript-异步编程的实现"><a href="#JavaScript-异步编程的实现" class="headerlink" title="JavaScript 异步编程的实现"></a>JavaScript 异步编程的实现</h4><p>主要分三类：回调函数、发布订阅、Promise 对象</p><p>** 回调函数 **</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 5, 5, 5, 5, 5</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">fn</span>();</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>(b);</span><br><span class="line"><span class="comment">// a b function a 相当于异步执行</span></span><br></pre></td></tr></table></figure><p>** PubSub Publish/Subscribe ** 发布、订阅模式，用以分发事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">PubSub</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">handlers</span> = &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">PubSub</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">subscribe</span> = <span class="keyword">function</span>(<span class="params">eventType, handler</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!(eventType <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">handlers</span>)) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handlers</span>[eventType] = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">handlers</span>[eventType].<span class="title function_">push</span>(handler); <span class="comment">// 添加事件监听器</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>; <span class="comment">// 返回上下文环境，实现链式调用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">PubSub</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">publish</span> = <span class="keyword">function</span>(<span class="params">eventType</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> _args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-模块化</title>
      <link href="/2019/03/26/Node-%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2019/03/26/Node-%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考：</p><ul><li>   <a href="http://nodejs.cn/api/modules.html#modules_exports_shortcut">Nodejs</a></li><li><a href="https://www.tutorialsteacher.com/nodejs/nodejs-module-exports">tutorials</a></li></ul></blockquote><h2 id="CommonJS-模块"><a href="#CommonJS-模块" class="headerlink" title="CommonJS 模块"></a>CommonJS 模块</h2><p>Node.js 打包 JavaScript 代码的原始方式</p><blockquote><p>Node.js 中每个文件都被视为一个单独的模块</p></blockquote><p>NodeJs 环境运行以下代码，测试代码保存在 index.js 文件下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">global</span>.<span class="property">a</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node index.js</span><br><span class="line">undefined</span><br></pre></td></tr></table></figure><p>以上代码若运行在浏览器环境，<code>widnow.a</code> 必定输出 1，浏览器中默认绑定在全局 <code>window</code> 对象上。但在 NodeJs 环境中 <span class="custom-box custom-box-933">在 NodeJs 中，存在模块化，它会将当前文件，按模块的方式进行加载或导出</span>相当于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>即在函数环境中访问全局环境的变量。<span class="custom-box custom-box-939">NodeJs 环境下，若想在全局环境下访问变量 a，需要显式将 a 绑定在 global 对象上。</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">global</span>.<span class="property">a</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="arguments-函数实参"><a href="#arguments-函数实参" class="headerlink" title="arguments 函数实参"></a>arguments 函数实参</h3><blockquote><p><a href="/2023/02/03/Javascript-%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0/">有关函数实参的介绍</a><br>NodeJs 环境中，js 文件直接打印 <code>arguments</code> 对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">$ node index.js</span><br><span class="line">[Arguments] &#123;</span><br><span class="line">  <span class="string">&#x27;0&#x27;</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">&#x27;1&#x27;</span>: [Function: require] &#123;</span><br><span class="line">    resolve: [Function: resolve] &#123; paths: [Function: paths] &#125;,</span><br><span class="line">    main: Module &#123;</span><br><span class="line">      <span class="built_in">id</span>: <span class="string">&#x27;.&#x27;</span>,</span><br><span class="line">      path: <span class="string">&#x27;/Users/.../Desktop/node/src&#x27;</span>,</span><br><span class="line">      exports: &#123;&#125;,</span><br><span class="line">      filename: <span class="string">&#x27;/Users/.../Desktop/node/src/index.js&#x27;</span>,</span><br><span class="line">      loaded: <span class="literal">false</span>,</span><br><span class="line">      children: [],</span><br><span class="line">      paths: [Array]</span><br><span class="line">    &#125;,</span><br><span class="line">    extensions: [Object: null prototype] &#123;</span><br><span class="line">      <span class="string">&#x27;.js&#x27;</span>: [Function (anonymous)],</span><br><span class="line">      <span class="string">&#x27;.json&#x27;</span>: [Function (anonymous)],</span><br><span class="line">      <span class="string">&#x27;.node&#x27;</span>: [Function (anonymous)]</span><br><span class="line">    &#125;,</span><br><span class="line">    cache: [Object: null prototype] &#123;</span><br><span class="line">      <span class="string">&#x27;/Users/.../Desktop/node/src/index.js&#x27;</span>: [Module]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;2&#x27;</span>: Module &#123;</span><br><span class="line">    <span class="built_in">id</span>: <span class="string">&#x27;.&#x27;</span>,</span><br><span class="line">    path: <span class="string">&#x27;/Users/.../Desktop/node/src&#x27;</span>,</span><br><span class="line">    exports: &#123;&#125;,</span><br><span class="line">    filename: <span class="string">&#x27;/Users/.../Desktop/node/src/index.js&#x27;</span>,</span><br><span class="line">    loaded: <span class="literal">false</span>,</span><br><span class="line">    children: [],</span><br><span class="line">    paths: [</span><br><span class="line">      <span class="string">&#x27;/Users/.../Desktop/node/src/node_modules&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;/Users/.../Desktop/node/node_modules&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;/Users/.../Desktop/node_modules&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;/Users/.../node_modules&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;/Users/node_modules&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;/node_modules&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;/Users/.../Desktop/node/src/index.js&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;/Users/.../Desktop/node/src&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class="custom-box custom-box-933">以上代码的执行，充分验证了，在 NodeJS 中，每个文件都是一个函数。</span>，那么这些实参代表哪些行参呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[Arguments] &#123;</span><br><span class="line">  <span class="comment"># module,exports</span></span><br><span class="line">  <span class="string">&#x27;0&#x27;</span>: &#123;&#125;,</span><br><span class="line">  <span class="comment"># require</span></span><br><span class="line">  <span class="string">&#x27;1&#x27;</span>: [Function: require] &#123;</span><br><span class="line">    resolve: [Function: resolve] &#123; paths: [Function: paths] &#125;,</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment"># module</span></span><br><span class="line">  <span class="string">&#x27;2&#x27;</span>: Module &#123;</span><br><span class="line">    <span class="built_in">id</span>: <span class="string">&#x27;.&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment"># __filename</span></span><br><span class="line">  <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;/Users/.../Desktop/node/src/index.js&#x27;</span>,</span><br><span class="line">  <span class="comment"># __dirname</span></span><br><span class="line">  <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;/Users/.../Desktop/node/src&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即：<code>module.exports, require, exports, __filename, __dirname</code></p><h3 id="通过-this-认识-exports-amp-amp-module-exports"><a href="#通过-this-认识-exports-amp-amp-module-exports" class="headerlink" title="通过 this 认识 exports &amp;&amp; module.exports"></a>通过 <code>this</code> 认识 exports &amp;&amp; module.exports</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(this)</span><br></pre></td></tr></table></figure><p>运行结果：<br><span class="custom-box custom-box-339">浏览器器下运行：</span><code>this</code>指针指前当调用环境对象，即 <code>window</code><br><span class="custom-box custom-box-393">NodeJs 环境下运行：</span><code>this</code>指针指向<code>&#123;&#125;</code>，似乎并不明白，可以通过如下代码验证：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> === <span class="variable language_">module</span>.<span class="property">exports</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> === <span class="built_in">exports</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><span class="custom-box custom-box-933">所以在 NodeJs 文件中，<code>this</code> 指针，指向的是 <code>module.exports or exports</code></span>如下</p><pre class="mermaid">flowchart LR    exports([exports]) --> obj("{}")    ME([module.exports]) --> obj</pre><p>即</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">a</span> = <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">exports</span> === <span class="built_in">exports</span>, <span class="variable language_">module</span>.<span class="property">exports</span>, <span class="built_in">exports</span>) <span class="comment">// true &#123;a:1&#125; &#123;a:1&#125;</span></span><br><span class="line"><span class="built_in">exports</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">// require 取的 module.exports 的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">exports</span> === <span class="built_in">exports</span>, <span class="variable language_">module</span>.<span class="property">exports</span>, <span class="built_in">exports</span>) <span class="comment">// false &#123;a:1&#125; 1</span></span><br></pre></td></tr></table></figure><p>也就是说 <code>exports</code> 和 <code>module.exports</code> 指向同一个引用地址。或者可以理解为 <code>exports</code> 是 <code>module.exports</code> 的简写或引用。<span class="custom-box custom-box-933">注意：如果给 <code>exports</code> 重新赋值会切断指向 <code>module.exports</code> 的指针。</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="built_in">exports</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">require</span>(<span class="string">&#x27;./a&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>正确的方式是</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">a</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">require</span>(<span class="string">&#x27;./a&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123;a:1&#125;</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">require</span>(<span class="string">&#x27;./a&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="exports-和-module-exports-的使用误区"><a href="#exports-和-module-exports-的使用误区" class="headerlink" title="exports 和 module.exports 的使用误区"></a>exports 和 module.exports 的使用误区</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`module.exports`</span>, <span class="variable language_">module</span>.<span class="property">exports</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`exports`</span>, <span class="built_in">exports</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">exports</span> === <span class="built_in">exports</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zhangliping@zhangliingdembp ~/Desktop/node  $ node ./src/demo4/moduleDemo.js </span><br><span class="line">module.exports &#123;&#125;</span><br><span class="line">exports &#123;&#125;</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>首先明确一点： exports 和 module.exports 指向同一对象，exports 是 module.exports 的简写。如同一个人，中文名：萍；英文名： Helen</p></blockquote><h3 id="常见的不规范代码-1"><a href="#常见的不规范代码-1" class="headerlink" title="常见的不规范代码(1)"></a>常见的不规范代码(1)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.js</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">name</span> = <span class="string">&#x27;helen&#x27;</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">weight</span> = <span class="string">&#x27;50kg&#x27;</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;audery&#x27;</span>,</span><br><span class="line">  <span class="attr">weight</span>: <span class="string">&#x27;22kg&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pepole = <span class="built_in">require</span>(<span class="string">&#x27;demo&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pepole)</span><br></pre></td></tr></table></figure><blockquote><p>以上代码运行后，exports 与 module.exports 已经不指向同一个对象了。相当于，将 <code>module.exports</code> 这个标签贴到了一个名为 ‘audery’ 的人身上了。那么 <code>require(‘demo’)</code> 取的是名为 helen 这个对象，还是 名为 audery 这个对象呢？</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhangliping@zhangliingdembp ~/Desktop/node  $ node ./src/demo4/index.js     </span><br><span class="line">&#123; name: <span class="string">&#x27;audery&#x27;</span>, weight: <span class="string">&#x27;22kg&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><pre class="mermaid">classDiagram    class `module.exports`    class `exports`    `module.exports` --> `audery Class`    `exports` --> `helen Class`    `require` --> `module.exports`</pre><h3 id="常见的不规范代码-2"><a href="#常见的不规范代码-2" class="headerlink" title="常见的不规范代码(2)"></a>常见的不规范代码(2)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">username</span> = <span class="string">&#x27;helen&#x27;</span></span><br><span class="line"><span class="built_in">exports</span> = &#123;</span><br><span class="line">  <span class="attr">weight</span>: <span class="string">&#x27;22kg&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;audery&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> pepole = <span class="built_in">require</span>(<span class="string">&#x27;demo&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pepole) </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhangliping@zhangliingdembp ~/Desktop/node  $ node ./src/demo4/index.js</span><br><span class="line">&#123; username: <span class="string">&#x27;helen&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><pre class="mermaid">classDiagram    class `module.exports`    class `exports`    `module.exports` --> `helen Class`    `exports` --> `audery Class`    `require` --> `module.exports`</pre><blockquote><p>require 导入的对象 ==&gt; module.exports 所指的对象</p></blockquote><h3 id="常见的不规范代码-3"><a href="#常见的不规范代码-3" class="headerlink" title="常见的不规范代码(3)"></a>常见的不规范代码(3)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.js</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">name</span> = <span class="string">&#x27;helen&#x27;</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">weight</span> = <span class="string">&#x27;50kg&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> pepole = <span class="built_in">require</span>(<span class="string">&#x27;demo&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pepole)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhangliping@zhangliingdembp ~/Desktop/node  $ node ./src/demo4/index.js</span><br><span class="line">&#123; name: <span class="string">&#x27;helen&#x27;</span>,  weight: <span class="string">&#x27;50kg&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><pre class="mermaid">classDiagram  class `module.exports`  class `exports`  class helen {    +String name    -String weight  }  require --> `module.exports`  `module.exports` --> helen  `exports` --> helen</pre><blockquote><p>module.exports 与 exports 修改的是同一对象</p></blockquote><h3 id="常见的不规范代码（4）"><a href="#常见的不规范代码（4）" class="headerlink" title="常见的不规范代码（4）"></a>常见的不规范代码（4）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;helen&#x27;</span>,</span><br><span class="line">  <span class="attr">weight</span>: <span class="string">&#x27;50kg&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="built_in">exports</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">gender</span> = <span class="string">&#x27;female&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> pepole = <span class="built_in">require</span>(<span class="string">&#x27;demo&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pepole)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhangliping@zhangliingdembp ~/Desktop/node  $ node ./src/demo4/index.js</span><br><span class="line">&#123; name: <span class="string">&#x27;helen&#x27;</span>, weight: <span class="string">&#x27;50kg&#x27;</span>, gender: <span class="string">&#x27;female&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><pre class="mermaid">classDiagram  class `exports`  class `module.exports`  class helen {    +String name    -String weight    +String gender  }  exports --> helen  `module.exports` --> exports  require --> `module.exports`</pre><p><span class="custom-box custom-box-933">不要在同一个模块中同时使用 exports 与 module.exports</span></p><h2 id="CommonJS-规定"><a href="#CommonJS-规定" class="headerlink" title="CommonJS 规定"></a>CommonJS 规定</h2><ul><li>每个模块内部，module 变量代表当前模块</li><li>module 变量是一个对象，它的 exports 属性是对外接口</li><li>加截某个模块，其实是加载该模块的 module.exports 属性。 require() 方法用于加截模块。</li></ul><h2 id="模块的加载机制"><a href="#模块的加载机制" class="headerlink" title="模块的加载机制"></a>模块的加载机制</h2><p><code>If the exact filename is not found, then Node.js will attempt to load the required filename with the added extensions: .js,.json,.node</code></p><ul><li><span class='custom-box custom-box-933'>模块在第一次加载后被缓存</span>，也就是说多次调用 <code>require()</code> 不会导致模块代码执行多次。不论是内置模块、用户自定义模块、第三方模块，优先从缓存中加载，<span class='custom-box custom-box-393'>从而提高模块的加载效率。</span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;require 是否从缓存中读取&#x27;</span>)</span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;test&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhangliping@zhangliingdembp ~/Desktop/node/src  $ node demo6/index.js </span><br><span class="line">加载几次该模块呢？</span><br></pre></td></tr></table></figure></li><li>内置模块是由 Node.js 官方提供的模块，<span class='custom-box custom-box-933'>内置模块的加载优先级最高</span></li><li>使用 require() 加载自定义模块时，必须指定以 <code>./ or ../</code> 开头的路径标识符。在加载自定义模块时，如果没有指定 <code>./ or ../</code> 这样的路径标识符，则 node 会把它当作 <span class='custom-box custom-box-393'>内置模块或第三方模块进行加载</span><blockquote><p>在使用 <code>require()</code> 导入自定义模块时，如果省略了文件的扩展名，则 Node.js 会 <span class='custom-box custom-box-933'>按顺序</span> 分别尝试加载以下文件</p></blockquote><pre class="mermaid">    flowchart LR  id1[按确切的文件名进行加载] --> id2[补全 .js 扩展名进行加载]   id2 --> id3[补全 .json 扩展名进行加载]  id3 --> id4[补全 .node 扩展名进行加载]  id4 --> id5((加载失败))</pre></li><li>第三方模块加载机制的加载机制<br>如果传递给 require() 的模块标识符不是一个内置模块，也不是自定义模块，没有 <code>./</code> 或 <code>../</code> 开头，则 <code>Node.js</code> 会从当前模块的父目录开始，尝试从 <code>/node_modules</code> 文件夹中加载第三方模块。<span class='custom-box custom-box-933'>如果没有找到对应的第三方模块，则移动到再上一层父目录中，进行加载，走到文件系统的根目录。</span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if  require(&#x27;foo&#x27;); 查找 ./node_modules/foo</span><br><span class="line">no  ../node_modules/foo</span><br><span class="line">no  /users/node_modules/foo</span><br></pre></td></tr></table></figure><pre class="mermaid">flowchart TDstart["require('module')"] --> condition{cookies}condition -->|yes| E((end))condition -->|no| buildIn{内置模块中是否包含导入模块}buildIn -->|yes| EbuildIn -->|no| path{"是否存在 ./ 或者 ../"}path -->|yes| customModule[自定义模块]path -->|no| thirdPartyModules[第三方模块]customModule --> EthirdPartyModules --> E</pre></li><li>当把目录作为模块标识符，传递给 require() 进行加载，有三种加载方式：</li></ul><ol><li> 在被加载的目录下查的 package.json 文件，进而在 package.json 文件下找 main 属性，作为 require() 加载入口；</li><li> 目录里没有 package.json 或 main 入口不存在或无法解析，则 Node.js 会试图解析 index.js;</li><li> 如果以上两步都失败，返回 Error: Cannot find module ‘xxx’;</li></ol><!-- ## exports 和 module.exports --><!-- nodeJS 官网中对 require() 有一段假设实现，如下： --><!-- ```JavaScript --><!-- function require() {  const module = { exports: {} };  ((module, exports) => {    function sFn() {}    exports = sFn    module.exports = sFn  })(module, module.exports);  return module.exports;} --><!-- ```#### 回过头来看定义1.  exports```JavaScript --><!-- // utils.jsexports.cssLoaders = function (options) {  options = options || {}  var cssLoader = {    loader: 'css-loader',    options: {      minimize: process.env.NODE_ENV === 'production',      sourceMap: options.sourceMap    }  }}// vue.loader.config.jsvar utils = require('./utils')var config = require('../config')var isProduction = process.env.NODE_ENV === 'production'module.exports = {  loaders: utils.cssLoaders({    sourceMap: isProduction      ? config.build.productionSourceMap      : config.dev.cssSourceMap,    extract: isProduction  }),  postcss: [    require('autoprefixer')({      browsers: ['iOS >= 7', 'Android >= 4.1']    })  ]}``` --><!-- > exports 导出的是函数，引入文件 require() 之后直接调用> module.exports 导出的是一个对象### export && export default -->]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 模块化 </tag>
            
            <tag> Node </tag>
            
            <tag> ES6-modules </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-模块化</title>
      <link href="/2019/03/26/Javascript-%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2019/03/26/Javascript-%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="无模块化时期"><a href="#无模块化时期" class="headerlink" title="无模块化时期"></a>无模块化时期</h2><p>JavaScript 起初只为了验证表单，后来加入了动画、交互等功能。实现只需要在 html 中添加 <code>&lt;script&gt;&lt;/script&gt;</code> 标签即可。随着前端复杂度的提高，对于前端代码的<code>可读性、可扩展性、可复用</code>就有较高的要求，就需要分多模块。这一阶段就是无模块化阶段：<br>无模块化阶段代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery_scroller.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>无模块化带来的问题：</p></blockquote><ol><li> 变量、对象、函数均绑在全局，<span class='custom-box custom-box-933'>污染全局作用域</span> 会出现命名冲突的问题。</li><li> <span class='custom-box custom-box-933'>依赖关系不明显</span>，开发手动处理各模块依赖，维护成本加大。</li></ol><h2 id="模块化时期"><a href="#模块化时期" class="headerlink" title="模块化时期"></a>模块化时期</h2><h3 id="模块化的发展史"><a href="#模块化的发展史" class="headerlink" title="模块化的发展史"></a>模块化的发展史</h3><pre class="mermaid">  timeline    title 模块化的发展历史    2009 : CommonJS         : Mozilla 工程师发起了 CommonJS 规范制定提案         : 同年5月，美国程序员 Ryan Dahl 开发了 Node.js         : Node.js 基于CommonJS规范问世    2010 : AMD         : 美国程序员 James Burke 开发了Requirejs         : 美国程序员 James Burke 发布了AMD规范    2011 : CMD         : 支付宝大神王伯开发了 seajs         : 发布了 CMD 规范    2015 : ESMoudle         : ECMAScript发布第6版         : ECMAScript 发布了 ES6 Module</pre><p>因为浏览器加载资源需要异步（Asynchronous），如从不同的服务器（不同源）或 cnd 获取脚本。AMD 应运而生。</p><blockquote><p>2010年，这位程序员同样来自美国，James Burke 开发了 RequireJS。同样也给到自己的规范 AMD(Asynchronous Module Definition)。<span class='custom-box custom-box-393'>AMD 适用于浏览器，是异步加载规范。</span> <u>RequireJS 是一个 js 文件，同时也是一个 模块加载器。</u> 可以在浏览器端开发中解决文件加载顺序带来的依赖问题。</p></blockquote><p>CMD(Common Module Define) 同样适用浏览器端的异步加载规范。sea.js 可以像一样书写模块代码。<br>ES6 是官方标准，2015 年发布后，基本淘汰了 AMD 和 CMD。目前浏览器端需要 babel 转换。因为是官方，nodejs 中也在逐渐完善对 ES6 模块化的支持。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ul><li>在 vue-cli 中 webpack 采用 CommonJS 规范， webpack 基于 NodeJs 运行，支持 CommonJS。</li><li>基于 webpack 开发的前端项目（Vue, React）中，可以直接采用 ES6 模块化规范，因为 webpack 集成了 Babel 插件</li></ul><img  src=http://www.plantuml.com/plantuml/svg/SoWkIImgoStCIybDBE3IKdYnlEL5JpENbfQ2ewyBaD9IUDdGz7pAYgUTlSzNhmU9EwE8FzdLXoILdvkRd-SLZ2O_eGygxnfiXathqqazK3KEgK1tGDm20000><p>美国程序员程序员 Ryan Dahl，开创了 JavaScript 在非浏览器环境中运行的先河。开发了 NodeJs 同时给出了 CommonJS 规范。CommonJS 规范模块加载是<span class='custom-box custom-box-933'>同步的（Synchronous）</span>。服务器端加截的模块从内存或磁盘中加载，耗时基本可忽略。<span class='custom-box custom-box-393'>浏览器端需要从网络加载资源，存在延迟及多个 js 前后依赖，很难保证加载顺序，文件依赖就存在问题。</span><span class='custom-box custom-box-933'>结论：CommonJS 不适用于浏览器端。</span></p><h3 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h3><ul><li>NodeJs 中可以同时使用 CommonJS 规范和 ES6 模块规范；</li><li>CommonJS 由 JavaScript 社区 2009 年提出的包含模块、文件、IO、控制台在内的一系列标准。</li><li>Node.js 的实现中采用了 CommonJS 标准的一部分，并在其基础上作了一些调整。</li><li>在 Node.js 中，每个文f件被作为一个单独的模块对待。（In Node.js, each file is treated as a separate module.）</li></ul><h4 id="认识-module-对象"><a href="#认识-module-对象" class="headerlink" title="认识 module 对象"></a>认识 <code>module</code> 对象</h4><ol><li> <span class='custom-box custom-box-939'>每个文件为一个 module，每个模块有自己的作用域。</span> 该模块定义的变量、函数、类均为私有，其它模块不可见。<u>不会污染全局作用域</u></li><li> CommonJS 规范规定，每个模块内部，<span class='custom-box custom-box-339'><code>module</code> 代表当前模块。</span> <code>module</code> 是一个对象，属性 <code>exports</code> 是对外接口。加载模块，则是加载 <code>module.exports</code> 属性。</li></ol><p>Node 环境中 <code>console.log(module)</code> 查看 <code>Module</code> 属性。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># v18.11.0</span></span><br><span class="line">Module &#123;</span><br><span class="line">  <span class="built_in">id</span>: <span class="string">&#x27;.&#x27;</span>,</span><br><span class="line">  path: <span class="string">&#x27;/Users/**/Desktop/demo/demo/commonJs&#x27;</span>,</span><br><span class="line">  exports: &#123;&#125;,</span><br><span class="line">  parent: null,</span><br><span class="line">  filename: <span class="string">&#x27;/Users/**/Desktop/demo/demo/commonJs/index.js&#x27;</span>,</span><br><span class="line">  loaded: <span class="literal">false</span>,</span><br><span class="line">  children: [],</span><br><span class="line">  paths: [</span><br><span class="line">    <span class="string">&#x27;/Users/zhangliping/Desktop/demo/demo/commonJs/node_modules&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/Users/zhangliping/Desktop/demo/demo/node_modules&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/Users/zhangliping/Desktop/demo/node_modules&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/Users/zhangliping/Desktop/node_modules&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/Users/zhangliping/node_modules&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/Users/node_modules&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/node_modules&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Node</code> 内部提供一个 <code>Module</code> 构造函数，所有模块都是 <code>Module</code> 的实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Module</span>(<span class="params">id, parent</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = id; <span class="comment">// 模块识别符，即带有绝对路径的模块文件</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">parent</span> = parent; <span class="comment">// 返回是一个对象，为调用该模块的模块</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">children</span> = []; <span class="comment">// 返回一个数组，表示该模块需要调用哪些模块</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">filename</span> = <span class="string">&#x27;/filename&#x27;</span>; <span class="comment">// 带有绝对路径模块的文件名</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">loaded</span> = <span class="literal">true</span>; <span class="comment">// 返回一个布尔值，表示模块是否已经完成加载</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">exports</span> = &#123;&#125;; <span class="comment">// 表示该模块输出的值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">path</span> = <span class="string">&quot;&quot;</span>, <span class="comment">// the directory name of the module. this is usaually as the path.dirname() of the module.id</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">paths</span> = []; <span class="comment">// The search paths for the module. 模块的搜索路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="module-exports-exports-导出模块"><a href="#module-exports-exports-导出模块" class="headerlink" title="module.exports | exports 导出模块"></a><code>module.exports | exports</code> 导出模块</h4><p>CommonJS 中，通过 <code>module.exports</code> 导出模块中的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example.js</span></span><br><span class="line"><span class="keyword">const</span> variable = <span class="string">&#x27;this is a variable&#x27;</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="string">&#x27;this is a function&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将以上变量、函数、对象，对过 module.exports 暴露出去</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">variable</span> = variable</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">fn</span> = fn</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">obj</span> = obj</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; variable: &#x27;this is a varialbe&#x27;, fn: [Function: fn], obj: &#123;&#125; &#125;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">variable</span>: <span class="string">&#x27;this is a variable&#x27;</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="string">&#x27;this is a function&#x27;</span>&#125;,</span><br><span class="line">  <span class="attr">obj</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#123; variable: &#x27;this is a variable&#x27;, fn: [Function: fn], obj: &#123;&#125; &#125;</span></span><br></pre></td></tr></table></figure><h4 id="错误案例"><a href="#错误案例" class="headerlink" title="错误案例"></a>错误案例</h4><ul><li><p>Demo —— 修改 exports 指向</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;new object&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-939'>exports 指向新的对象引用，module.exports 还是原对象引用，是个空对象。即，<code>exports</code> 与 <code>module.exports</code> 指向不同的对象，所以 name 属性并不会导出。</span><a href="/2019/03/26/Node-%E6%A8%A1%E5%9D%97%E5%8C%96/">参考图示</a></p></li><li><p>Demo —— exports 与 module.exports 混合使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">fn</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;this. is a function&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">variable</span>: <span class="string">&#x27;this is a variable&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#123; variable: &#x27;this is a variable&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-939'>fn 属性丢失，原因在于先导出了一个函数，然后 <code>module.exports</code> 重新赋值为另一个对象，之前的对象属性丢失。</span></p></li><li><p>Demo —— 建议 exports | module.exports 写在文件未尾</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">fn</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;this. is a function&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line"><span class="comment">// end</span></span><br><span class="line"><span class="comment">// &#123; fn: [Function] &#125;</span></span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-939'>先打印出 end, 再打印出 <code>exports</code> 的内容，说明这个 exports 之后的内容也会被执行，为提高代码可读性，<code>module.exports</code> 写在文件尾部</span></p></li></ul><h4 id="3-导入"><a href="#3-导入" class="headerlink" title="3. 导入"></a>3. 导入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test the number of times the export file is executed&#x27;</span>)</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">hello</span> = <span class="string">&#x27;instruction: export the function of hello&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> example = <span class="built_in">require</span>(<span class="string">&#x27;./example&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;wait a moment..., require the js file of example again&#x27;</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./example&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[@dembp:demo (master)]$ node ./commonJs/index.js</span><br><span class="line">test the number of times the export file is executed</span><br><span class="line">wait a moment..., require the js file of export again</span><br></pre></td></tr></table></figure><h4 id="Cannot-find-module-‘export’"><a href="#Cannot-find-module-‘export’" class="headerlink" title="Cannot find module ‘export’"></a><span class='custom-box custom-box-933'>Cannot find module ‘export’</span></h4><blockquote><p><code>require(&#39;example&#39;)</code> 导致以上报错，导致入的文件要给出文件路径 <code>require(&#39;./example&#39;)</code></p></blockquote><h4 id="结论："><a href="#结论：" class="headerlink" title="结论："></a><span class='custom-box custom-box-339'><code>结论：</code></span></h4><ol><li> NodeJs 中所有代码都运行在模块作用域，不会污染全局作用域。</li><li> 模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。<code>module.loaded</code> 默认为 false，如果加载过的话，该值会被设置为 true，模块代码将不再执行。</li><li> 模块加载的顺序，按照其在代码中出现的顺序。</li></ol><h4 id="require-函数接收表达式，可以利用该特性将动态加载模块到全局"><a href="#require-函数接收表达式，可以利用该特性将动态加载模块到全局" class="headerlink" title="require 函数接收表达式，可以利用该特性将动态加载模块到全局"></a><span class='custom-box custom-box-339'>require 函数接收表达式，可以利用该特性将动态加载模块到全局</span></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> needModules = [<span class="string">&#x27;moduleA&#x27;</span>,<span class="string">&#x27;moduleB&#x27;</span>,<span class="string">&#x27;moduleC&#x27;</span>,...]</span><br><span class="line">needModules.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;./&#x27;</span>+item);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="AMD规范"><a href="#AMD规范" class="headerlink" title="AMD规范"></a>AMD规范</h2><p>RequireJS is a JavaScript file and module loader. It is optimized for in-browser use, but it can be used in other JavaScript environments, like Rhino and Node. using a modular script loader like Requirejs will improve the speed and quality of your code.<br>RequireJS 是一个 JavaScript 文件和模块加载器。针对浏览器的使用进行了优化，也可能用于其它 JavaScript 环境，像 Rhino 和 Node。使用像 RequireJS 这样的模块加载器，可以提高你代码的运行速度与质量。<a href="requirejs.org">具体查看</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 导入 requirejs，并定义入口文件 main.js</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">&quot;scripts/main&quot;</span> <span class="attr">src</span>=<span class="string">&quot;scripts/libs/require.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * scripts/main.js</span></span><br><span class="line"><span class="comment"> * 1.   添加配置文件</span></span><br><span class="line"><span class="comment"> * requirejs.config(&#123;...&#125;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"> requirejs.<span class="title function_">config</span>(&#123;</span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;scripts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;jquery&quot;</span>: <span class="string">&quot;libs/jquery&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 加载或导入需要运行的自定义文件</span></span><br><span class="line"> requirejs([<span class="string">&#x27;./index&#x27;</span>])</span><br></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * scripts/index.js</span></span><br><span class="line"><span class="comment"> * defined([&#x27;jquery&#x27;], function($)&#123;...&#125;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_">defined</span>([<span class="string">&#x27;jquery&#x27;</span>], <span class="keyword">function</span>(<span class="params">$</span>)&#123;</span><br><span class="line">    $(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;js 模块化，你好&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><h2 id="CMD规范"><a href="#CMD规范" class="headerlink" title="CMD规范"></a>CMD规范</h2><h2 id="模块是如何工作的"><a href="#模块是如何工作的" class="headerlink" title="模块是如何工作的"></a>模块是如何工作的</h2><p>使用模块开发时，浏览器或 Node 会创建依赖图。即，你给到入口文件 <code>main.js</code>，<code>import</code> 加载相关模块代码</p><div style="background: #fff">    <pre class="mermaid">     graph LR        main[main.js] --> |import a from './a.js'| a[a.js]        main --> |import b from './b.js'| b[b.js]</pre></div>浏览器需要将文件解析成 模块记录（Module Records），模块记录需要转换为 模块实例（Module Instance）。对于 ES 模块，具体包含以下三个步骤<h3 id="1-构造（constructor）-——-查找、下载并解析所有文件到模块记录中。"><a href="#1-构造（constructor）-——-查找、下载并解析所有文件到模块记录中。" class="headerlink" title="1.    构造（constructor） —— 查找、下载并解析所有文件到模块记录中。"></a>1.    构造（constructor） —— 查找、下载并解析所有文件到<strong>模块记录</strong>中。</h3><p>构造阶段要做的事情：</p><blockquote><p>模块解析 —— 找出下载包含该模块的文件的方式（Url, 文件系统加载）<br>获取文件（从 URL 下载或从文件系统加载）<br>将文件解析为模块记录</p></blockquote><div style="background: #fff">    <pre class="mermaid">     graph TD     html[index.html] --> |"&lt;script type='module' src='/main.js'&gt;&lt;/script&gt;"| main[main.js]     main --> |"import a from './a.js'"|a[a.js]</pre></div><ol start="2"><li>   实例化（instance） —— 在内存中寻找一块区域来存储所有导出的变量（但还没有填充值）。然后让 export 和 import 都指向这些内存块。这个过程叫做链接（linking）。</li><li>   求值 —— 运行代码，在内存块中填入变量的实际值。</li></ol><pre class="mermaid"> sequenceDiagram     participant constructor     participant instance     participant eveluation</pre><p>ES 模块是异步的，加载、实例化、求值，异步完成</p><h3 id="五、ES6模块化"><a href="#五、ES6模块化" class="headerlink" title="五、ES6模块化"></a>五、ES6模块化</h3><p>2015 年 6 月，TC39 标准委员会正式发布 ES6(ECMAScript 6.0) 以后，JavaScript 有了 <code>模块</code> 的概念。<br><strong>模块</strong>为你提供了更好的方法<u>来组织这些变量和函数。通过模块，你可以将有意义的变量和函数分组在一起。</u></p><ul><li>与 CommonJS 一样，ES6 Module 每个模块都有自身的作用域；</li><li>在 ES6 版本中，<code>import</code> 和 <code>export</code> 是保留关键字；</li><li>ES6 Module 自动采用严格模式（<code>use strict</code>）;</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="string">&#x27;this is a variable&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;this is a arrow function&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;a,fn&#125; <span class="keyword">from</span> <span class="string">&#x27;./example&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="title function_">fn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br></pre></td></tr></table></figure><h4 id="node-index-js"><a href="#node-index-js" class="headerlink" title="node index.js"></a>node index.js</h4><blockquote><p><code>SyntaxError: Cannot use import statement outside a module</code><br>不支持 import，需要 babel 转义</p></blockquote><ol><li> 浏览器环境解决办法（目前没有运行起来）<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/@babel/standalone/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// Your ES6 code</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li> 引入依赖包处理<a href="https://wangdoc.com/es6/intro.html">参考解决</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 模块化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 面试题</title>
      <link href="/2019/03/25/CSS-%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2019/03/25/CSS-%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<ul><li><p><input checked="" disabled="" type="checkbox">  absolute 相对于最近的非 ‘static’ 元素定位；如果该元素不存在，则相对于 initial container block 定位。该定位方式脱离文档流，同样脱离文档流的还是 float</p></li><li><p><input checked="" disabled="" type="checkbox">  margin/padding 设置百比时，根据父元素宽运算</p></li><li><p><input disabled="" type="checkbox">  使用css实现一个自适应浏览器大小并且宽和高的比是2:1，有几种实现方法？</p><blockquote><ul><li>width 与 height 百分比是根据父元素计算的，<code>&lt;body&gt;</code> 是根据宽一般是浏览器的宽，高一般为 0，不同浏览器有所差异，这里不细说。</li><li>padding 百分比是相对于包含块的宽度,指定一个值时 该值指定四个边的内边距</li></ul></blockquote></li><li><p><input checked="" disabled="" type="checkbox">  用 padding 撑 50% 的高</p></li></ul><span id="more"></span><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>; // 根据父元素计算</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">25%</span> <span class="number">0</span>; // 高度根据父元素的宽计算</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f90</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="supports、cacl-、-media-的用法和含义"><a href="#supports、cacl-、-media-的用法和含义" class="headerlink" title="@supports、cacl()、@media 的用法和含义"></a>@supports、cacl()、@media 的用法和含义</h3><hr><blockquote><ul><li>@supports 在这里卡了许久，想要找出当红 ui 框架中使用的案例，但最终一无所获。但是吧，既然有这样一道面试题，那就看看文档，整理整理<br>  <code>兼容性：移动端浏览器兼容较好，pc 端 IE 不兼容</code><br>  声明语法，如下 demo，包含 not, and, or 三种操作符  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">@supports</span> (<span class="attribute">transform-origin</span>: <span class="number">5%</span> <span class="number">5%</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>  <strong>总结一下</strong>，@supports 是用来检验某个 css 属性是否支持。是一个判断条件。</li></ul></blockquote><hr><blockquote><ul><li>@media 以下 demo 源自 bootstrap  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>, <span class="selector-class">.h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="number">1.375rem</span> + <span class="number">1.5vw</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">1200px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">h1</span>, <span class="selector-class">.h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2.5rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span>, <span class="selector-class">.h2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="number">1.325rem</span> + <span class="number">0.9vw</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">1200px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">h2</span>, <span class="selector-class">.h2</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <strong>总结一下</strong>：根据不同的媒体类型，定义不同的样式，作响应式处理</li></ul></blockquote><hr><blockquote><ul><li>cacl() 函数允许对 css 属性值进行一些 + - * / 的运算，如上例</li></ul></blockquote><ul><li><p><a href="https://helenzhanglp.github.io/2019/05/05/%E5%B1%85%E4%B8%AD/">水平垂直居中</a></p></li><li><p><input checked="" disabled="" type="checkbox">  使用 vw 为单位</p><blockquote><ul><li>vw: viewport width, 1vw = 视窗宽度的 1%</li><li>vh: viewport height, 1vh = 视窗高度的 1%</li><li>vmin: vh 与 vw 哪个小取哪个</li><li>vmax: vh 与 vw 哪个大取哪个</li></ul></blockquote></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.warp</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50vw</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f90</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Object Oriented</title>
      <link href="/2019/03/21/JavaScript-Object-Oriented/"/>
      <url>/2019/03/21/JavaScript-Object-Oriented/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript-对象与对象属性"><a href="#JavaScript-对象与对象属性" class="headerlink" title="JavaScript 对象与对象属性"></a>JavaScript 对象与对象属性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">v</span>: <span class="number">1</span>, <span class="attr">o</span>: <span class="literal">undefined</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;o&#x27;</span> <span class="keyword">in</span> obj, obj.<span class="property">o</span>) <span class="comment">// true undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b&#x27;</span> <span class="keyword">in</span> obj, obj.<span class="property">b</span>) <span class="comment">// false undefined</span></span><br></pre></td></tr></table></figure><p><font color="#f33">虽然，属性值都是 undefined，但 <strong>特性名不存在与特性值赋为 undefined 是不同的，</strong> 可以用 <code>in</code> 运算符，查看对象是否有某个属性</font></p><blockquote><p>JavaScript 通过一些属性时都会带有一些特征值，ECMA-262 定义的，只有内部使用的，外部不能访问的特性，初期是为了实现 JavaScript 引擎使用的。具体如下表</p></blockquote><h3 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h3><table><thead><tr><th>characteristic</th><th>description</th></tr></thead><tbody><tr><td>[[Configurable]]</td><td>能否通过 delete 删除属性，然后重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性</td></tr><tr><td>[[Enumerable]]</td><td>是否可以通过 for-in 循环枚举属性</td></tr><tr><td>[[Writable]]</td><td>能否修改属性的值</td></tr><tr><td>[[Value]]</td><td>包含这个属性的数据值</td></tr></tbody></table><p><a href="#useDefineProperty"><font color="#f33"><strong>使用 Object.defineProperty 定义属性特性</strong></font></a></p><h3 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h3><p>访问器属性不包含数据，只有 getter,setter 函数。读取访问器属性时会调用 getter 函数，这个函数负责返回有效的值，setter 负责写入，处理新数据</p><table><thead><tr><th>characteristic</th><th>description</th></tr></thead><tbody><tr><td>[[Configurable]]</td><td>能否通过 delete 删除属性，或修改为数据属性</td></tr><tr><td>[[Enumerable]]</td><td>是否能通过 for-in 枚举属性</td></tr><tr><td>[[Get]]</td><td>读取属性时调用</td></tr><tr><td>[[Set]]</td><td>设置属性时调用</td></tr></tbody></table><h2 id="工厂模式——解决复用"><a href="#工厂模式——解决复用" class="headerlink" title="工厂模式——解决复用"></a><a id="factoryPattern" href="#factoryPattern">工厂模式——<font color="#f99">解决复用</font></a></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">baby</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    age</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Audrey</span> = <span class="title function_">baby</span>(<span class="string">&#x27;Audrey&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Gulu</span> = <span class="title function_">baby</span>(<span class="string">&#x27;Gulu&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Audrey</span> <span class="keyword">instanceof</span> baby</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"><span class="title class_">Audrey</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="title class_">Audrey</span>)</span><br><span class="line"><span class="comment">// &#123;&#125;__proto__: Object</span></span><br></pre></td></tr></table></figure><h2 id="构造函数-new——解决对象识别问题"><a href="#构造函数-new——解决对象识别问题" class="headerlink" title="构造函数 + new——解决对象识别问题"></a>构造函数 + new——<font color="#f99">解决对象识别问题</font></h2><blockquote><p>解决对象识别问题 <code>Audrey instanceof object</code> 结果 true，使得 <code>Audrey instanceof baby</code> 为 true</p></blockquote><p>ECMASript 中的构造函数可以用来创建指定类型的对象</p><h4 id="构建构造函数的理解"><a href="#构建构造函数的理解" class="headerlink" title="构建构造函数的理解"></a>构建构造函数的理解</h4><p>对比工厂模式，按以下方式创建一个构造函数：</p><ol><li> 依照(Object oriented)思想，区别普通函数，方法名首字母大写。如 <code>Baby</code>;</li><li> 不需要 <code>new object()</code> 或 声明 <code>&#123;&#125;</code></li><li>将<strong>属性和方法</strong>赋值给 <code>this</code>。从这里可以看出，<code>this</code> 首先是一个对象。[关于 this 的理解，可从 JavaScript 执行上下文的视角看](<a href="https://helenzhanglp.github/">https://helenzhanglp.github</a>.<br> io/2020/11/18/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94Javascript%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/)</li><li> 不需要 <code>return</code> 语句</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Baby</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造函数调用-——-普通调用"><a href="#构造函数调用-——-普通调用" class="headerlink" title="构造函数调用 —— 普通调用"></a>构造函数调用 —— 普通调用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通调用</span></span><br><span class="line"><span class="title class_">Baby</span>(<span class="string">&#x27;Audery&#x27;</span>,<span class="number">4</span>)</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">name</span> <span class="comment">// Aduery</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">age</span> <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p><font color="#f33">构造函数当普通函数调用时，在 window 环境中调用，this 指向 window 对象，属性绑定在 window 上</font></p><h4 id="构造函数调用-——-call-apply-在部分"><a href="#构造函数调用-——-call-apply-在部分" class="headerlink" title="构造函数调用 —— call/apply 在部分"></a>构造函数调用 —— call/apply 在部分</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Cat</span> = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line"><span class="title class_">Baby</span>.<span class="title function_">call</span>(<span class="title class_">Cat</span>, <span class="string">&#x27;Cat&#x27;</span>, <span class="string">&#x27;0.5&#x27;</span>)</span><br><span class="line"><span class="title class_">Cat</span>.<span class="property">name</span> <span class="comment">// Cat</span></span><br><span class="line"><span class="title class_">Cat</span>.<span class="property">age</span> <span class="comment">// 0.5</span></span><br></pre></td></tr></table></figure><p><font color="#f33">在局部范围内调用</font></p><p>构造函数调用 —— new 实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new 关键字实例化构造函数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Audrey</span> = <span class="keyword">new</span> <span class="title class_">Baby</span>(<span class="string">&#x27;Audrey&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="title class_">Audrey</span> <span class="keyword">instanceof</span> <span class="title class_">Baby</span> <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Audery</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// true</span></span><br><span class="line"><span class="comment">/* Baby &#123;name: &quot;Audrey&quot;, age: 2&#125;</span></span><br><span class="line"><span class="comment">  age: 2</span></span><br><span class="line"><span class="comment">  name: &quot;Audrey&quot;</span></span><br><span class="line"><span class="comment">    __proto__:</span></span><br><span class="line"><span class="comment">      constructor: ƒ Baby(name, age)</span></span><br><span class="line"><span class="comment">        __proto__: Object */</span></span><br></pre></td></tr></table></figure><blockquote><p>new 关键字 + 函数（函数名以大写字母开头），为封装对象建构的流程的函数称为 <strong>构造函数</strong><br>this 是 new 关键字的实例，构造函数执行结束后，作为结果 return</p></blockquote><p><img src="/images/1.gif" alt="test"></p><p>构造函数不需要写 return 语句，<strong>如果有写，就返回 return 的值</strong><br>像 JavaScript 标准 API 中，像 <code>Number</code> 即可以当普通函数 <code>Number(&#39;OxFF&#39;)</code> 调用。<br>又可以使用构造函数方式调用 <code>new Number(OXFF)</code>。<br>ES6 中，可以使用 <strong><code>new. target</code></strong> 检测构造函数中是否明确撰写 return <u>使用 new 构建的实例，new.target 代表了构造函数或类本身；否则就是 undefined</u></p><p><font color="#f33">构造函数的每一个方法都要在新的实例上创建一次</font></p><pre class="mermaid">graph TDobj[Object] --> |`工厂模式 + 入参解决利用问题`| FP[工厂模式 factoryPattern]FP --> |对象识别| CF[new + Constructor Function]CF --> |`需要解决方法或属性共享的问题`| Proto[prototype]</pre><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>每个函数都有一个 prototype，它是一个指针，指向一个对象（由特定类型的所有实例<strong>共享</strong>的属性和方法），即函数的原型对象<br>所有原型对象都会自动获取一个 constructor，constructor 包含一个指向 prototype 属性所在函数的指针<br><code>Audery.constructor === Baby</code> 对象 constructor 是用来标识对象类型</p><pre class="mermaid">graph TDfunction[function] --> prototype[function.proptotype]prototype --> object[objectPrototype.constructor]object --> functioninstance["(new function())[__proto__||[[prototype]]]"]--> objectstyle instance fill:#f99,stroke:#333,stroke-width:4px</pre><h3 id="原型相关方法"><a href="#原型相关方法" class="headerlink" title="原型相关方法"></a>原型相关方法</h3><table><thead><tr><th>API</th><th>description</th></tr></thead><tbody><tr><td>Fn.prototype.isPrototypeOf(fn1)</td><td>实例 fn1 的原型是不是 Fn.prototype</td></tr><tr><td>Object.getPrototypeOf(fn1)</td><td>返回 Fn.prototype 原型对象</td></tr><tr><td>fn1.hasOwnProperty(‘attribute’)</td><td>检测属性是否存在于实例中，返回 true 表示该属性存在于实例中</td></tr><tr><td>Object.getOwnPropertyDescriptor()</td><td>获取实例属性操作符</td></tr><tr><td>Object.keys()</td><td>返回对象所有可枚举的属性的字符串数组</td></tr><tr><td>Object.getOwnPropertyNames()</td><td>获取所有实例属性，无论是否可枚举</td></tr></tbody></table><blockquote><p>实例和原型中均定义相同属性，实例属性会覆盖原型属性。搜索某个值是先搜索实例属性再搜索原型属性。<u>确实需要访问原型属性，可以用 delete 删除实例属性</u></p></blockquote><h3 id="in-操作符"><a href="#in-操作符" class="headerlink" title="in 操作符"></a>in 操作符</h3><p>对象能够访问指定属性时返回 true。不管是实例属性还是原理对象属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name <span class="keyword">in</span> audery <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><font color="#f33">in + fn1.hasOwnProperty 判断属性存在于原型</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">hasOwnProperty</span>(<span class="params">property, newInstance</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> property <span class="keyword">in</span> newInstance &amp;&amp; !newInstance.<span class="title function_">hasOwnProperty</span>(property)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for-in-操作符"><a href="#for-in-操作符" class="headerlink" title="for-in 操作符"></a>for-in 操作符</h3><p>for-in 操作符，返回所有能够通过对象访问的、可枚举的实例属性和原型属性。<u>覆盖了原型中可枚举的原型属性的实例属性可枚举，可用 for-in 遍历<font color="#f33">IE 早期存在 bug</font></u></p><h3 id="构造函数原型的几种写法"><a href="#构造函数原型的几种写法" class="headerlink" title="构造函数原型的几种写法"></a>构造函数原型的几种写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;hel&#x27;</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="keyword">new</span> <span class="title class_">Person</span>()).<span class="property">__proto__</span>.<span class="property">constructor</span>) <span class="comment">// f Person()&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = <span class="string">&#x27;female&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> b = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;hel&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> gumi = <span class="keyword">new</span> <span class="title class_">Cat</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gumi.<span class="property">__proto__</span>.<span class="property">constructor</span>) <span class="comment">// ƒ Object() &#123; [native code] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gumi.<span class="property">gender</span>) <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><blockquote><p>Cat 实例的写法，导致 constructor 不指向 function Cat()</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = <span class="string">&#x27;female&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> b = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;hel&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span>,<span class="string">&#x27;constructor&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">emumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="title class_">Cat</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> gumi = <span class="keyword">new</span> <span class="title class_">Cat</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gumi.<span class="property">__proto__</span>.<span class="property">constructor</span>) </span><br><span class="line"><span class="comment">/* ƒ ƒ Cat()&#123;</span></span><br><span class="line"><span class="comment">this.gender = &#x27;female&#x27;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gumi.<span class="property">gender</span>) <span class="comment">// female</span></span><br></pre></td></tr></table></figure><h2 id="ES6-类模拟"><a href="#ES6-类模拟" class="headerlink" title="ES6 类模拟"></a>ES6 类模拟</h2><h3 id="模拟-static"><a href="#模拟-static" class="headerlink" title="模拟 static"></a>模拟 static</h3><p>常量需要仿 static，如 <code>Math.PI</code></p><h3 id="模拟-私有属性"><a href="#模拟-私有属性" class="headerlink" title="模拟 私有属性"></a>模拟 私有属性</h3><p>JavaScript 没有 private 之类的语法，<strong>可以通过 Closure 模拟</strong><br>私有属性只有访问权限，不修改<br><font color="#f99"><strong>1. 用 getter 将变量变为私有属性</strong></font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Account</span>(<span class="params">name, balance</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getName</span> = <span class="function">() =&gt;</span> name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getBalance</span> = <span class="function">() =&gt;</span> balance;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getInfo</span> = <span class="function">() =&gt;</span> <span class="string">`<span class="subst">$&#123;name&#125;</span> + &#x27; &#x27; +<span class="subst">$&#123;balance&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> account = <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="string">&#x27;helen&#x27;</span>, <span class="number">3000</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(account.<span class="property">name</span>)   <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(account.<span class="property">getName</span>) <span class="comment">// helen</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name <span class="keyword">in</span> account)    <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><a id="useDefineProperty" color="#f99"><strong>2. 用 <code>Object.defineProperty()</code> 定义属性</strong></a></p><blockquote><p><code>Object.defineProperty()</code> 参数一，接收一个对象；参数二，接收想设定的特性名称；参数三是属性描述，采用选项对象的方式来指定属性<br><strong>defineGetter</strong>() 和 <strong>defineSetter</strong>() 兼容 safari3, chrome 1</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Account</span>(<span class="params">name,balance</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="function">() =&gt;</span> name</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>, <span class="string">&#x27;balance&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="function">() =&gt;</span> balance</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">withdraw</span> = <span class="function">(<span class="params">money</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(money &gt; <span class="variable language_">this</span>.<span class="property">balance</span>) <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;sorry, your credit is running low&#x27;</span>)</span><br><span class="line">        balance -= money</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">toString</span> = <span class="function">() =&gt;</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, <span class="subst">$&#123;<span class="variable language_">this</span>.balance&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> account = <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="string">&#x27;helen&#x27;</span>, <span class="number">1000</span>)</span><br><span class="line">account.<span class="title function_">withdraw</span>(<span class="number">500</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(account.<span class="property">balance</span>)</span><br></pre></td></tr></table></figure><blockquote><p><code>Object.defineProperties()</code> 设置多个私有属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Account</span>(<span class="params">name, balance</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(<span class="variable language_">this</span>, &#123;</span><br><span class="line">        <span class="attr">name</span>: &#123;</span><br><span class="line">            <span class="attr">get</span>: <span class="function">() =&gt;</span> name</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">balance</span>: &#123;</span><br><span class="line">            <span class="attr">get</span>: <span class="function">() =&gt;</span> balance</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">withdraw</span> = <span class="function">(<span class="params">money</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(money &gt; <span class="variable language_">this</span>.<span class="property">balance</span>) <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;sorry, your credit is running low&#x27;</span>)</span><br><span class="line">        balance -= money</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">toString</span> = <span class="function">() =&gt;</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, <span class="subst">$&#123;<span class="variable language_">this</span>.balance&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> account = <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="string">&#x27;helen&#x27;</span>, <span class="number">1000</span>)</span><br><span class="line">account.<span class="title function_">withdraw</span>(<span class="number">500</span>)</span><br><span class="line">account.<span class="title function_">toString</span>()</span><br></pre></td></tr></table></figure><h4 id="特性描述器"><a href="#特性描述器" class="headerlink" title="特性描述器"></a>特性描述器</h4><p>从 ES5 开始，每个特性都由 <strong>value, writable, enumerable, configurable</strong> 4 个特性设定。</p><table><thead><tr><th>特性</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>特性值</td></tr><tr><td>writable</td><td>特性值是否可改</td></tr><tr><td>enumerable</td><td>特性是否可枚举</td></tr><tr><td>configurable</td><td>能否用 <code>delete</code> 删除，或用 Object.defineProperty/Object.defineProperties 修改属性</td></tr></tbody></table><p>查询或设定属性时，以上 4 个属性会聚合在对象上，称为特性描述器（Property descriptor）</p><h4 id="有关描述器特性的几个-API"><a href="#有关描述器特性的几个-API" class="headerlink" title="有关描述器特性的几个 API"></a>有关描述器特性的几个 API</h4><table><thead><tr><th>API</th><th>描述</th></tr></thead><tbody><tr><td>Object.getOwnPropertyDescriptor()</td><td>取特性描述器信息，具体如上表</td></tr><tr><td>Object.defineProperty()</td><td>定义属性，使用见上 demo-Account-1</td></tr><tr><td>Object.defineProperties()</td><td>一次性定义多个属性，使用见上 demo-Account-2</td></tr></tbody></table><br/><h4 id="详解对象定义与属性描述器"><a href="#详解对象定义与属性描述器" class="headerlink" title="详解对象定义与属性描述器"></a>详解对象定义与属性描述器</h4><p><font color="#f99">1.   直接对对象新增特性</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;helen&#x27;</span>&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(obj, <span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>{value: “helen”, writable: true, enumerable: true, configurable: true}</p></blockquote><p><font color="#f99">2.   Object.defineProperty 定义特性</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;helen&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(obj, <span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>{value: “helen”, writable: false, enumerable: false, configurable: false}</p></blockquote><font color="#f33">`use strict`+`writable:false` 时，修改变量，引发 TypeError。<br />`use strict`+`configurable:false`时，删除或使用 Object.defineProperty 等修改时，引发 TypeError。<br /></font> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Account demo</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> account) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i, account[i])</span><br><span class="line">&#125;</span><br><span class="line">&#123;<span class="comment">/*VM2619:2 withdraw (money) =&gt; &#123;</span></span><br><span class="line"><span class="comment">        if(money &gt; this.balance) console.warn(&#x27;sorry, your credit is running low&#x27;)</span></span><br><span class="line"><span class="comment">        balance -= money</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">VM2619:2 toString () =&gt; `$&#123;this.name&#125;, $&#123;this.balance&#125;` */</span>&#125;</span><br></pre></td></tr></table></figure><p><u><strong>Object.defineProperty 或 Object.defineProperties 定义的属性，默认 writable: false, enumerable: false, configurable: false 所以，只有方法可枚举</strong></u><br><a href="https://github.com/HelenZhangLP/demo/blob/draft/js/Object/index.html">利用 writable 属性写一个不可枚举数组，具体代码见 gitHub</a></p><h3 id="扩充、弥封、冻结"><a href="#扩充、弥封、冻结" class="headerlink" title="扩充、弥封、冻结"></a>扩充、弥封、冻结</h3><table><thead><tr><th>API</th><th>Description</th></tr></thead><tbody><tr><td>Object.preventExtensions()</td><td>限定对象扩充。指定对象，将对象标示为无法扩充，调用传回对象本身</td></tr><tr><td>Object.isExtensible()</td><td>测试对象是否可以扩充。</td></tr><tr><td>Object.seal()</td><td>对象密封，密封对象不能扩充或删除对象上的特性，也不能修改描述器，但可以修改特性值（writable: true）</td></tr><tr><td>Object.isSeal()</td><td>判断对象是否被密封</td></tr><tr><td>Object.freeze()</td><td>解冻对象</td></tr><tr><td>Object.isFreeze()</td><td>判断是否被解冻</td></tr></tbody></table><blockquote><p>Object.preventExtensions()，限定扩充的对象只是无法新增。如果对象属性 writable: true ，则可以修改。若 configurable: true，可以使用 delete 删除。<u>设置为无法扩充的对象，则无法重设为可扩充对象</u></p></blockquote><h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><h3 id="构造函数与-prototype"><a href="#构造函数与-prototype" class="headerlink" title="构造函数与 prototype"></a>构造函数与 prototype</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">a.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// &#123;constructor: ƒ a()&#125;</span></span><br><span class="line">a.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> <span class="comment">// ƒ a() &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>每个函数都有 prototype 特性<br><code>a.prototype instance a</code> 得到的是 false<br><code>a.prototype instance object</code> 得到的是 true<br><font color="#f33"><strong>那么基本上，函数的 prototype 是 object 的实例</strong></font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> A = <span class="keyword">new</span> <span class="title function_">a</span>(<span class="params"></span>)</span><br><span class="line">&#123;<span class="comment">/*A</span></span><br><span class="line"><span class="comment">a &#123;&#125;</span></span><br><span class="line"><span class="comment">    __proto__: Object</span></span><br><span class="line"><span class="comment">*/</span>&#125;</span><br><span class="line">A <span class="keyword">instanceof</span> a <span class="comment">// true</span></span><br><span class="line">&#123;<span class="comment">/*A.__proto__.constructor: ƒ a()*/</span>&#125;</span><br><span class="line">A.<span class="property">__proto__</span> === a.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>使用 new 关键字实例函数，将返回一个对象，该对象的 <strong>proto</strong> 特性 与 该函数的 prototype 共同指向 constructor<br><font color="#f33"><strong>实例的 <strong>proto</strong> 特性用来取函数的原型对象<u>ES5 建议使用 Object.getPrototyepOf() 取实例的原型对象</strong></u></font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(A) <span class="comment">// true</span></span><br><span class="line">A.<span class="property">__proto__</span> === a.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/HelenZhangLP/demo/blob/draft/js/Object/standObjectModule.js">参考实例，符合内建 API 惯例的实例</a></p><blockquote><p>hasOwnProperty() 判断实例本身是否具有某个属性</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 对象 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Object </tag>
            
            <tag> 构造函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Class</title>
      <link href="/2019/03/20/Javascript-Class/"/>
      <url>/2019/03/20/Javascript-Class/</url>
      
        <content type="html"><![CDATA[<h2 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h2><h3 id="类声明"><a href="#类声明" class="headerlink" title="类声明"></a>类声明</h3><p>用 class 关键字名声明一个类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mermaid</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-393'>constructor 不需要实参时，可以不定义。</span><br><font color="red">类声明不会像函数声明一样会提升，需要先声明之后才可以访问。否则，报错：Uncaught ReferenceError: Mermaid is not defined</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Mermaid</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mermaid</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Uncaught ReferenceError: Mermaid is not defined</span></span><br></pre></td></tr></table></figure><h3 id="类表达式"><a href="#类表达式" class="headerlink" title="类表达式"></a>类表达式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 匿名类 */</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Mermaid</span> = <span class="keyword">class</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 命名类 */</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Everything</span> = <span class="keyword">class</span> <span class="title class_">Everything</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Everything is posible&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的私有属性"><a href="#类的私有属性" class="headerlink" title="类的私有属性"></a>类的私有属性</h3><p><span class='custom-box custom-box-939'>私有属性可枚举</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mermaid</span> &#123;</span><br><span class="line">  type = <span class="string">&#x27;flowchart&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Mermaid</span>()) <span class="comment">// 打印 Mermaid 类的实例</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mermaid &#123;type: &#x27;flowchart&#x27;&#125;</span></span><br><span class="line"><span class="comment"> * type: &quot;flowchart&quot;</span></span><br><span class="line"><span class="comment"> *  [[Prototype]]: Object </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="类的私有方法"><a href="#类的私有方法" class="headerlink" title="类的私有方法"></a>类的私有方法</h3><p><span class='custom-box custom-box-939'>私有方法可枚举</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mermaid</span> &#123;</span><br><span class="line">  type = <span class="string">&#x27;flowchart&#x27;</span>,</span><br><span class="line">  getType = <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">type</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Mermaid</span>()) <span class="comment">// 打印 Mermaid 类的实例</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mermaid &#123;type: &#x27;flowchart&#x27;&#125;</span></span><br><span class="line"><span class="comment"> * getType: () =&gt; this.type</span></span><br><span class="line"><span class="comment"> * type: &quot;flowchart&quot;</span></span><br><span class="line"><span class="comment"> * [[Prototype]]: Object </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="原型方法（公有方法）"><a href="#原型方法（公有方法）" class="headerlink" title="原型方法（公有方法）"></a>原型方法（公有方法）</h3><p><span class='custom-box custom-box-939'>公有方法不可枚举</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mermaid</span> &#123;</span><br><span class="line">  type = <span class="string">&#x27;flowchart&#x27;</span>,</span><br><span class="line">  getType = <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">type</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Mermaid</span>()) <span class="comment">// 打印 Mermaid 类的实例</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mermaid &#123;type: &#x27;flowchart&#x27;&#125;</span></span><br><span class="line"><span class="comment"> * getType: () =&gt; this.type</span></span><br><span class="line"><span class="comment"> * type: &quot;flowchart&quot;</span></span><br><span class="line"><span class="comment"> * [[Prototype]]: Object </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="原型属性（公有属性）"><a href="#原型属性（公有属性）" class="headerlink" title="原型属性（公有属性）"></a>原型属性（公有属性）</h3><p><span class='custom-box custom-box-939'>公有属性可以枚举</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mermaid</span> &#123;</span><br><span class="line">  type = <span class="string">&#x27;flowchart&#x27;</span>,</span><br><span class="line">  getType = <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">type</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Mermaid</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">defaultType</span> = <span class="string">&#x27;flowchart&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Mermaid</span>()) <span class="comment">// 打印 Mermaid 类的实例</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mermaid &#123;type: &#x27;flowchart&#x27;&#125;</span></span><br><span class="line"><span class="comment"> * getType: () =&gt; this.type</span></span><br><span class="line"><span class="comment"> * type: &quot;flowchart&quot;</span></span><br><span class="line"><span class="comment"> * [[Prototype]]: Object </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="静态方法与静态属性"><a href="#静态方法与静态属性" class="headerlink" title="静态方法与静态属性"></a>静态方法与静态属性</h3><p><span class='custom-box custom-box-393'><code>static</code> 定义一个类的静态方法，静态方法通常用于为一个应用程序创建工具函数。调用静态方法不需要实例化，不能通过类实例调用静态方法。</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mermaid</span> &#123;</span><br><span class="line">  type = <span class="string">&#x27;flowchart&#x27;</span>,</span><br><span class="line">  getType = <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">type</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">static</span> id = <span class="number">1</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getId</span>(<span class="params"></span>) &#123;<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">id</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Mermaid</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">defaultType</span> = <span class="string">&#x27;flowchart&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Mermaid</span>()) <span class="comment">// 打印 Mermaid 类的实例</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Mermaid</span>.<span class="property">id</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Mermaid</span>.<span class="title function_">getId</span>()) <span class="comment">// 1</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mermaid &#123;type: &#x27;flowchart&#x27;&#125;</span></span><br><span class="line"><span class="comment"> * getType: () =&gt; this.type</span></span><br><span class="line"><span class="comment"> * type: &quot;flowchart&quot;</span></span><br><span class="line"><span class="comment"> * [[Prototype]]: Object </span></span><br><span class="line"><span class="comment"> *    constructor</span></span><br><span class="line"><span class="comment"> *      id: 1</span></span><br><span class="line"><span class="comment"> *      getId: ƒ getId()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-箭头函数</title>
      <link href="/2019/03/18/Javascript-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
      <url>/2019/03/18/Javascript-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="箭头函数兼容性"><a href="#箭头函数兼容性" class="headerlink" title="箭头函数兼容性"></a>箭头函数兼容性</h2><blockquote><p><a href="http://kangax.github.io/compat-table/es6/#test-arrow_functions">箭头函数兼容性</a></p></blockquote><h2 id="箭头函数定义"><a href="#箭头函数定义" class="headerlink" title="箭头函数定义"></a>箭头函数定义</h2><p>lambda 函数以尽量简洁的语法定义函数，是函数表达式的简化版。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">param =&gt; expression <span class="comment">// 只有一个参数，省略括号，操作符，胖箭头 =&gt; 箭头函数的核心。仅一行语句，即为返回值。省略 &#123; return expression &#125;</span></span><br><span class="line">() =&gt; expression <span class="comment">// 没有参数，必须使用 () 是必须的，其它同上</span></span><br><span class="line">(param1, param2) =&gt; expression <span class="comment">// 一个以上参数，参数由括号包裹，参数以逗号隔开，其它同上</span></span><br><span class="line">() =&gt; &#123;</span><br><span class="line">expression1;</span><br><span class="line">expression2;</span><br><span class="line">&#125; <span class="comment">// &#123;&#125; 包裹的函数体代码块，没有 return 语句，默认返回 undefined，否则返回 return 语句的值</span></span><br></pre></td></tr></table></figure><h2 id="箭头函数与函数执行上下文"><a href="#箭头函数与函数执行上下文" class="headerlink" title="箭头函数与函数执行上下文"></a>箭头函数与函数执行上下文</h2><blockquote><p>箭头函数没有单独的 <code>this</code>， <font color="#a33"><em><strong>箭头函数的 <code>this</code> 与 函数声明所在的上下文相同</strong></em>，</font>由以 demo 可知，因 箭头函数在 window 中定义，所以 <code>this</code> 指向 <code>window</code>，函数表达式 <code>this</code> 指向调用的环境，所以 <code>this</code> 指向 <code>lambda</code> 对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">thisLambda</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> lambda = &#123;</span><br><span class="line"><span class="comment">// 在 window 中声明</span></span><br><span class="line"><span class="attr">getThislambda</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// assets(&#x27;assets&#x27;, true, this)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;lambda&#x27;</span>, <span class="variable language_">this</span>)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">getThis</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;function expression&#x27;</span>,<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lambda.<span class="title function_">getThislambda</span>() <span class="comment">//Window &#123;window: Window, self: Window, document: document, name: &#x27;&#x27;, location: Location, …&#125;</span></span><br><span class="line">lambda.<span class="title function_">getThis</span>() <span class="comment">// &#123;getThislambda: ƒ, getThis: ƒ&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- ### 箭头函数[Arrow Functions](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions)> 没有自己的 this、arguments、super、new.target，它不能用作构造函数，更适用于那些本来需要匿名函数的地方，函数简短，并且不绑定 this##### 构造函数```JavaScriptfunction Construct() {  this.prop = 1  console.log(this.prop, this)  setTimeout(function() {    ++this.prop    console.log(this.prop, this)  },1)}var construct = new Construct()// 1 Construct {prop: 1}prop: 1__proto__: Object// NaN Window {postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …}``` -->]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>immutableJS</title>
      <link href="/2019/03/11/immutableJS/"/>
      <url>/2019/03/11/immutableJS/</url>
      
        <content type="html"><![CDATA[<p>Facebook 工程师 Lee Byron 花费 3 年时间打造，与 React 同期出现，但没有被默认放到 React 工具集里（React 提供了简化的 Helper）</p><h3 id="Record"><a href="#Record" class="headerlink" title="Record"></a>Record</h3><p>Record() 可以创建一个新的 Record 类，类似于JavaScript的Object，但是只接收特定字符串为key，具有默认值:</p><h3 id="setIn"><a href="#setIn" class="headerlink" title="setIn()"></a>setIn()</h3><p>setIn 设置深层结构中的某些属性</p><blockquote><p>setIn(keyPath: Iterable<any>, value: any): this</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> immutable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redux</title>
      <link href="/2019/03/11/redux/"/>
      <url>/2019/03/11/redux/</url>
      
        <content type="html"><![CDATA[<h2 id="Redux-理解"><a href="#Redux-理解" class="headerlink" title="Redux 理解"></a>Redux 理解</h2><p>Redux 设计之初是为了更好的维护 Web 状态，React 框架实现了 State。React + Redux<br>Redux 设计的核心是 store 的概念。store 将 State/Action/Reducer 联系在一起。<font color="#911" face="黑体" size="3"><code>redux 中有且只有一个 store，store 是唯一的</code></font><br>Action 是负责把数据从应用传到 Store 的载体，是 Store 数据的唯一来源，通过 store 的 dispatch() 方法实现<br>Reducer 将 State 的变化和相应的 Action 发送到 store，然后返回新的 state 给 store<br>Reducer 本质上一个纯函数，接收 state and action，执行相应操作后，返回新的 state。但切忌做以下操作：</p><ul><li>修改传入参数；</li><li>执行有副作用的操作，如请求 API 和 路由跳转等；</li><li>调用非纯函数，如 Date.now()、Math.random() 等不确定值操作</li></ul><blockquote><p>Redux 负责状态管理、React 负责视图渲染，Redux 中 store 是核心对象，在管理 Reducer 与 State 的同时，还要处理 Dispath 存入的 Action，最终订阅 React 视图更新。</p></blockquote><img  src=http://www.plantuml.com/plantuml/svg/bP71QW8n48RlUOh1FUjLQg5GsYTG-W1ZCgkXwMJ9pb9B4JpqCUfhUF5jfD3NQ99TM-lYmKiOXl-R_v-CzY-LPsA1m-PpIgW5llSVN_lTORC5h26t7dv5nPXkRfrb6XcibsHoFLa48bQ1j20l7C5WIgPP3HBl6w40HLcMfnYyAm2DmS2z5kiP2dHMqzmrr9-Ukq8hQQj8dZZDn0VAJfRvabFdbLBffBdAh8DdWa9NeciLdsx3uV3kBy3SeNvkjI5cd01cqKZUAeh8KPUOphT7198cC32zGfqaQgtERfNeu_Vsy4TRLoXwgThvRRh_f-unJvM9sXy0><span id="more"></span><blockquote><ol><li>Redux 其实是一个 <code>JavaScript 状态容器</code>，可预测状态管理</li><li>Redux 并不属于 React 框架，完全独立。可与大多数前端框架完美结合</li><li>/**<ul><li>reducer(state, action){}</li><li>state 状态，action 用户操作 action.type 用户操作类型</li><li>store 通过 Redux.createStore(reducer)</li><li>store.subscribe(render) 实现用户订阅功能，当状态发生变化时，自动渲染视图 render 通过 innerHTML 实现</li><li>操作不同，dispatch 触发不同的 action {type: ‘ACTIONTYPE’}</li></ul></li></ol></blockquote><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> root = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// <span class="doctag">TODO:</span> define reducer</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">reducerCounter</span>(<span class="params">state, action</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (<span class="keyword">typeof</span> state === <span class="string">&#x27;undefined&#x27;</span>) <span class="keyword">return</span> <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">case</span> <span class="string">&#x27;INCREMENT&#x27;</span>:</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> state + <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">case</span> <span class="string">&#x27;DECREMENT&#x27;</span>:</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> state &lt; <span class="number">1</span> ? <span class="number">0</span> : state - <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">default</span>:</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> state</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// <span class="doctag">TODO:</span> create store</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> store = <span class="title class_">Redux</span>.<span class="title function_">createStore</span>(reducerCounter)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> counterNumber = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;count-number&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// <span class="doctag">TODO:</span> render</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    counterNumber.<span class="property">innerHTML</span> = store.<span class="title function_">getState</span>().<span class="title function_">toString</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">render</span>()</span></span><br><span class="line"><span class="language-javascript">  store.<span class="title function_">subscribe</span>(render) <span class="comment">//监听一些变化</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// <span class="doctag">TODO:</span> dispatch</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;increment&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    store.<span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>: <span class="string">&#x27;INCREMENT&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;decrement&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    store.<span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>: <span class="string">&#x27;DECREMENT&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;incrementIfOdd&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (store.<span class="title function_">getState</span>() % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      store.<span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>: <span class="string">&#x27;INCREMENT&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;incrementAsync&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      store.<span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>: <span class="string">&#x27;INCREMENT&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;,<span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="React-Redux-中的-Provider-容器组件"><a href="#React-Redux-中的-Provider-容器组件" class="headerlink" title="React-Redux 中的 Provider 容器组件"></a>React-Redux 中的 Provider 容器组件</h2><p>传递参数多的时采用 React-Redux 库的 Provider 组件容器解决，传递太多参数造成的性能问题，同时还提供了一个 connect 方法来连接与 Store 对象</p><img  src=http://www.plantuml.com/plantuml/svg/bP71QiCm38RlUGgHdDlhM0U3iJt0QFS2ggEqPgviP8MsZDxsJBlqTGPxZSLEChgrE_HW4EB_zCd8-4tmJAnGpWcDmjVn_VFuKG96o8t7dq1rGxTtpZ9DQunhgdCzMmaH5q96aLUEqfYwtMNUjqe2LTCqfnYy5G06fORomQZrN4A5pXfQkfREv-UkqavprQ4dgeLweQoopF-fHbdQov1SQHlfXQBIbUoXU_qNOJAvXs41g9OEpMkVb6x96M0EJNKV4ZRc4fEr5mWXROM1QGinHOf3yUTQYHxav_W6mvED0TMiN_op-12BtjJl-Vlib-YS7j1l><p>Provider 组件将 Store 对象包装在顶层容器中，就可以被其子组件继承。</p><p>哈哈，请问你是要闹哪样？<br><code>import &#123; connect &#125; from &#39;@tarojs/redux&#39;;</code><br>redux 文档里查了没找着，原来是 tarojs 的方法，借机认识下这哥们。</p><h3 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h3><blockquote><p>tarojs/redux 提供的 connect 方法将 redux 与我们的页面进行连接<br>connect 方法接受两个参数<br><code>mapStateToProps</code> 与 <code>mapDispatchToProps</code></p></blockquote><ul><li>mapStateToProps，函数类型，接受最新的 state 作为参数，用于将 state 映射到组件的 props</li><li>mapDispatchToProps，函数类型，接收 dispatch() 方法并返回期望注入到展示组件的 props 中的回调方法</li></ul><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;@tarojs/redux&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mapStateToProps</span>(<span class="params">state</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">reducer</span>: state.<span class="property">bindphoneReducer</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_">connect</span>(mapStateToProps)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 面试题</title>
      <link href="/2019/03/07/Javascript-%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2019/03/07/Javascript-%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="变量声明-let-const-var"><a href="#变量声明-let-const-var" class="headerlink" title="变量声明 let const var"></a>变量声明 let const var</h2><table class="table table-striped"><thead><tr><th align="left">名称</th><th align="left">定义</th><th align="left">作用域</th><th align="left">赋初值</th></tr></thead><tbody><tr><td align="left">let</td><td align="left">声明变量</td><td align="left">块级作用域</td><td align="left">可以不赋初值<br/>编译时声明并初始化为初值为 undefined</td></tr><tr><td align="left">const</td><td align="left">声明常量</td><td align="left">块级作用域</td><td align="left">必须赋初值</td></tr><tr><td align="left">var</td><td align="left">声明变量</td><td align="left">局部变量是函数作用域；<br/>全局变量作用域为该程序</td><td align="left">不赋初值时，<br/>变量提升，代码执行前创建 js 环境，声明变量，变量赋初值为 undefined</td></tr></tbody></table><p><em><code>notice:</code></em></p><ol><li>   let 和 var 都是用来声明变量的，但作用域不同。</li><li>   let 和 const 都是 ES6 开始正式加入 JavaScript 规范的</li><li>   let 编译时执行声明初始化，未编译时处于 temporal dead zone，此时变量 is not defined;</li><li>   const 声明常量必须赋初值(Uncaught SyntaxError: Missing initializer in const declaration)；</li><li>   const 声明的常量值不能修改。</li></ol><h2 id="1-let"><a href="#1-let" class="headerlink" title="1.    let"></a>1.    let</h2><blockquote><p>   声明一个块级作用域的本地变量</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> C = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// Uncaught ReferenceError: b is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(C) <span class="comment">// Uncaught ReferenceError: C is not defined</span></span><br></pre></td></tr></table></figure><blockquote><p>let 声明变量可以不赋初值，默认值为 undefined</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a; <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">let</span> b; <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">const</span> c; <span class="comment">// Uncaught SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure><blockquote><p>let 声明的变量在定义编译执行时初始化。变量未声明之前不会初始化。这一时段称为暂存死区（Temporal Dead Zone, TDZ）。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a; <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">let</span> b; <span class="comment">// Uncaught ReferenceError: b1 is not defined</span></span><br></pre></td></tr></table></figure><h2 id="2-const"><a href="#2-const" class="headerlink" title="2.    const"></a>2.    const</h2><blockquote><p><code>Uncaught SyntaxError: Missing initializer in const declaration</code> const 声明的变量必须赋初值<br>    <code>Uncaught ReferenceError: C is not defined</code> const 声明块级作用域变量</p></blockquote><h3 id="const-声明的变量值不能修改"><a href="#const-声明的变量值不能修改" class="headerlink" title="const 声明的变量值不能修改"></a>const 声明的变量值不能修改</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> variableTemplate = <span class="number">30</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  variableTemplate = <span class="number">22</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error) <span class="comment">// TypeError: Assignment to constant variable.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(variableTemplate)</span><br></pre></td></tr></table></figure><h3 id="const-只读引用，只是变量的标识符不能重新分配"><a href="#const-只读引用，只是变量的标识符不能重新分配" class="headerlink" title="const 只读引用，只是变量的标识符不能重新分配"></a>const 只读引用，只是变量的标识符不能重新分配</h3><blockquote><p>只是变量标识符不能重新分配</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">VARIABLE</span> = <span class="string">&#x27;assignment value&#x27;</span></span><br><span class="line"><span class="variable constant_">VARIABLE</span> = <span class="string">&#x27;assignment value&#x27;</span> <span class="comment">// TypeError: Assignment to constant variable</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">VARIABLE</span> = <span class="string">&#x27;Assignment to constant variable&#x27;</span> <span class="comment">// Uncaught SyntaxError: Identifier &#x27;VARIABLE&#x27; has alreay been declared</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">EN_OBJECT</span> = &#123;&#125;</span><br><span class="line"><span class="variable constant_">EN_OBJECT</span>.<span class="property">ATTRIBUTE</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="3-var"><a href="#3-var" class="headerlink" title="3.    var"></a>3.    var</h2><p>JavaScript 根据赋值自动转换数据类型;<br>JavaScript 中 <code>+</code> 可用来链接字符串，如果运算中涉及字符串，结果为字符串链接。其它运算符（-、*、/）正确计算数字字符串;<br>JavaScript 中，null 乘任何数为 0;<br>JavaScript 代码程序执行前会先创建执行环境，变量、函数等被创建。代码运行时赋初值。这就是 JavaScript 的提升机制（hoisting）。</p><blockquote><p>var 声明变量可以不赋初值，默认值为 undefined；<br>    var 声明的变量没有块级作用域</p></blockquote><h3 id="与-var-不同-let-与-const-在全局声明定义的变量不会绑定到全局对象上（如-浏览器的全局对象-window"><a href="#与-var-不同-let-与-const-在全局声明定义的变量不会绑定到全局对象上（如-浏览器的全局对象-window" class="headerlink" title="与 var 不同 let 与 const 在全局声明定义的变量不会绑定到全局对象上（如 浏览器的全局对象 window)"></a>与 var 不同 let 与 const 在全局声明定义的变量不会绑定到全局对象上（如 浏览器的全局对象 <code>window</code>)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="number">3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>, <span class="variable language_">window</span>.<span class="property">b</span>, <span class="variable language_">window</span>.<span class="property">c</span>) <span class="comment">// 1 undefined undefined</span></span><br></pre></td></tr></table></figure><h3 id="let-和-var-定义的变量作用域不同"><a href="#let-和-var-定义的变量作用域不同" class="headerlink" title="let 和 var 定义的变量作用域不同"></a>let 和 var 定义的变量作用域不同</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">testVarScope</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, <span class="string">&#x27;var&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">testVarScope</span>(); <span class="comment">// 2 &quot;var&quot;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *var 声明的变量在同一函数作用域中为同一变量，所以值会修改</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testLetScope</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, <span class="string">&#x27;let&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">testLetScope</span>(); <span class="comment">// 1 &quot;let&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *&#123;&#125; 为一个作用域，&#123;&#125; 中的 a 变量与 函数中首先声明的 a 为两个变量，值不会相互修改</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="三、-作用域-promise-amp-amp-promise-then"><a href="#三、-作用域-promise-amp-amp-promise-then" class="headerlink" title="三、 作用域 + promise &amp;&amp; promise.then"></a>三、 作用域 + promise &amp;&amp; promise.then</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> msg = <span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> msg = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span><br><span class="line"><span class="keyword">var</span> p1 =  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">msg = <span class="number">3</span></span><br><span class="line"><span class="title function_">resolve</span>(msg)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = p1.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1 === p2)</span><br><span class="line"><span class="comment">// 1 4 5 false 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* p1 gng p2 不相等的原因 */</span></span><br><span class="line"><span class="comment">// [[PromiseStatus]]: &quot;resolved&quot;</span></span><br><span class="line"><span class="comment">// [[PromiseValue]]: 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span><br><span class="line"><span class="comment">// [[PromiseStatus]]: &quot;resolved&quot;</span></span><br><span class="line"><span class="comment">// [[PromiseValue]]: undefined</span></span><br></pre></td></tr></table></figure><h3 id="四、-箭头函数作用域"><a href="#四、-箭头函数作用域" class="headerlink" title="四、 箭头函数作用域"></a>四、 箭头函数作用域</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;fn&#x27;</span>,</span><br><span class="line"><span class="attr">show</span>: <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;fun&#x27;</span></span><br><span class="line"><span class="title function_">fun</span>().<span class="title function_">show</span>()</span><br></pre></td></tr></table></figure><h3 id="五、正则相关-题目如下"><a href="#五、正则相关-题目如下" class="headerlink" title="五、正则相关 - 题目如下"></a>五、正则相关 - 题目如下</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str=<span class="string">&#x27;version2.1 version2.2&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> regx = <span class="regexp">/(\w+)(\d)\.(\d)/g</span>;</span><br><span class="line"></span><br><span class="line">str.<span class="title function_">match</span>(regx)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> [ &#x27;version2.1&#x27;, &#x27;version2.2&#x27; ]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">regx.<span class="title function_">exec</span>(str)</span><br><span class="line"><span class="comment">/** [ &#x27;version2.1&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;version&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;2&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;1&#x27;,</span></span><br><span class="line"><span class="comment">  index: 0,</span></span><br><span class="line"><span class="comment">  input: &#x27;version2.1 version2.2&#x27;,</span></span><br><span class="line"><span class="comment">  groups: undefined ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol><li>   console.log(str.match(regx)) 结果如上，因为有正则中有 <code>g</code> 全局搜索标识符。 所以结果如上代码。</li><li>   console.log(regx.exec(str)) 结果如上。</li><li>   match 和 exec 的区别：</li></ol><ul><li>match 是 String(String.prototype.match()) 的原型方法；exec 是 RegExp（RegExp.prototype.exec()） 的原型方法。</li><li>在 regx 不加 <code>g</code> 标识符（global）时，他们的结果是相同的，返回一个数组。数组元素包括匹配字符串、匹配组、index 匹配的位置， input 原始字符串， groups;</li><li>在 regx 加 <code>g</code> 标识符（global)）时，结果如上。<code>str.match(regx)</code> 返回的是所有匹配的字符串数组；<code>regx.exec(str)</code> 返回的第一组匹配的数组，并记录 <code>lastIndex</code> 在 regx 中，再次执行 <code>regx.exec(str)</code> 会返回下一组匹配结果。以此类推，直到最后结果为 null。</li></ul><h3 id="六、-数组排序"><a href="#六、-数组排序" class="headerlink" title="六、 数组排序"></a>六、 数组排序</h3><blockquote><p>对数组 [10, 20, 1, 2] 进行排序</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">10</span>, <span class="number">20</span>, <span class="number">1</span>, <span class="number">2</span>].<span class="title function_">sort</span>(); <span class="comment">// [ 1, 10, 2, 20 ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="六、-在一个构造方法中可以使用super关键字来调用一个父类的构造方法。"><a href="#六、-在一个构造方法中可以使用super关键字来调用一个父类的构造方法。" class="headerlink" title="六、 在一个构造方法中可以使用super关键字来调用一个父类的构造方法。"></a>六、 在一个构造方法中可以使用super关键字来调用一个父类的构造方法。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReferenceError: Must call super constructor in derived class before accessing &#x27;this&#x27; or returning from derived constructor</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 单向绑定 与 双向绑定</title>
      <link href="/2019/03/03/Vue-%E5%8D%95%E5%90%91%E7%BB%91%E5%AE%9A-%E4%B8%8E-%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"/>
      <url>/2019/03/03/Vue-%E5%8D%95%E5%90%91%E7%BB%91%E5%AE%9A-%E4%B8%8E-%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>在数据绑定这里纠结了有断日子了，一直想把这块好好梳理一下。则日不如撞日，就今天了！<br><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001475449022563a6591e6373324d1abd93e0e3fa04397f000">参考文档不能丢</a></p><h3 id="认识下-MVVM"><a href="#认识下-MVVM" class="headerlink" title="认识下 MVVM"></a>认识下 MVVM</h3><p>很讨论的一个概念，在它之前我只认识 MVC，曾经有一经面试就在它这里卡壳。那个时候我只认识 MVC.<br><a href="https://docs.microsoft.com/zh-cn/windows/uwp/data-binding/data-binding-and-mvvm">哎呀，妈呀，不易啊，终于找到正主啦</a>文档中说的很清楚，mvvm 指的模型层（model）、视图层（View)及视图模型层（ViewModel)<br>正文还是有些枯燥的。其实廖老师的文档里其实已经很好的将jQuery 操作 Dom 与 MVVM 作了很好的对比，给出的实际案例，说明了<code>MVVM 是通过操作对象，从而自动更新 DOM 状态</code><br>以下是两个案例对比：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Homer&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">51</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回忆下原生 js</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;#name&#x27;</span>).<span class="title function_">innerText</span>(<span class="string">&#x27;HTML&#x27;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;#age&#x27;</span>).<span class="title function_">innerText</span>(<span class="string">&#x27;51&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//jQuery</span></span><br><span class="line">$(<span class="string">&#x27;#name&#x27;</span>).<span class="title function_">text</span>(name);</span><br><span class="line">$(<span class="string">&#x27;#age&#x27;</span>).<span class="title function_">text</span>(age);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MVVM 中通过对象自动更新 DOM</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Bart&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">12</span></span><br><span class="line">&#125;;</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;HTML&#x27;</span></span><br><span class="line">person.<span class="property">age</span> = <span class="number">51</span></span><br></pre></td></tr></table></figure><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><p>模模糊糊中认为小程序是属于单向数据绑定，别人的博客中有说是双向绑定，为些还特意百度找盟友，结果发现我并不孤独。接下来分析分析数据绑定。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 小程序 </tag>
            
            <tag> 数据绑定 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node 概述与安装</title>
      <link href="/2019/03/02/Node-%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
      <url>/2019/03/02/Node-%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.ibm.com/developerworks/cn/opensource/os-nodejs/">Node.js 究竟是什么？</a><br>Node 旨在提供一种简单构建可伸缩的网络程序方法<br>Node.js 是前端工程化的主要工具<br>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，它使 JavaScript 能够脱离浏览器直接运行。<br>Node.js 的开源命令行工具，可以让 JavaScript 运行在本地。</p><h3 id="认识-Node-交个朋友"><a href="#认识-Node-交个朋友" class="headerlink" title="认识 Node 交个朋友"></a>认识 Node 交个朋友</h3><p>Node 是服务器程序，特色就是处理多并发，处理方式则是每个连接会发射一个 Node 引擎进程中的运行事件，不使用锁，所以也不会有死锁的情况，也不生成 os 进程，它的服务器能支持上万并发。<br>Node 本身运行 V8 JavaScript。V8 JavaScript 引擎是 Google 用于其 Chrome 浏览器的底层 JavaScript 引擎。</p><h3 id="Node-事件驱动编程"><a href="#Node-事件驱动编程" class="headerlink" title="Node 事件驱动编程"></a>Node 事件驱动编程</h3><p>没有过度设计，没有面向对象、没有接口，JavaScript 是驱动编程语言。有闭包、可以使用匿名函数。它只需要监听事件，调用匿名函数回调，其它由系统处理。</p><h3 id="Node-的包管理工具-NPM"><a href="#Node-的包管理工具-NPM" class="headerlink" title="Node 的包管理工具 NPM"></a>Node 的包管理工具 NPM</h3><p>开发过程中通常需要依赖第三方框架，如 Jquery/element-ui 等一系列的第三方框架。这些第三方框架之间或许也是在相互依赖，直接下载、解压、处理相互间的引用似乎非常繁锁，顺应天意，包管理工具应用而生。而 Node 的包管理工具就是 NPM。</p><h3 id="简单说说-Node-安装"><a href="#简单说说-Node-安装" class="headerlink" title="简单说说 Node 安装"></a>简单说说 Node 安装</h3><p>两种方式：</p><ol><li> <a href="http://nodejs.cn/download/">Node 官网</a>下载自己系统相应的包，通过图型界面安装。</li><li> <code>brew install node</code> 通过命令安装，但前题是你安装过 <code>HomeBrew</code></li></ol><p>检查是否安装成功：<code>node -v</code> &amp;&amp; <code>npm -v</code></p><h3 id="NODE-版本切换-n"><a href="#NODE-版本切换-n" class="headerlink" title="NODE 版本切换 n"></a>NODE 版本切换 n</h3><ol><li>n 的安装 <code>npm install -g n</code><br> 查看 n 是否安装成功 <code>n -V</code></li><li>用 n 切换 node 版本时遇到的问题及解决办法<ul><li>问题描述<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pna.nextTick is not a function</span><br></pre></td></tr></table></figure></li><li>解决办法<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ n lts <span class="comment"># Install or activate the latest LTS node release</span></span><br><span class="line">$ npm install -g npm</span><br><span class="line">$ n stable <span class="comment"># Install or activate the latest stable  node release</span></span><br><span class="line">$ npm install -g @vue/cli</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="NODE-npm-install-报错"><a href="#NODE-npm-install-报错" class="headerlink" title="NODE npm install 报错"></a><font color='red'>NODE npm install 报错</font></h3><p><img src="/images/node/node_error_decies.png" alt="alt"></p><blockquote><p>关于这个报错，网络分析最多的原因是镜像引起的</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm config get registry # 获取当前系统设置的镜像</span><br><span class="line">https://registry.npmjs.com/</span><br></pre></td></tr></table></figure><blockquote><p>查看当前镜像 <a href="https://registry.npmjs.com/%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%8D%A2%E6%88%90">https://registry.npmjs.com/，可以换成</a> <a href="http://registry.npm.taobao.org/%EF%BC%9B%E5%8F%8D%E4%B9%8B%EF%BC%8C%E4%BA%A6%E7%84%B6">http://registry.npm.taobao.org/；反之，亦然</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm config set registry http://registry.npm.taobao.org/ # 设置当前系统的镜像为淘宝镜像</span><br></pre></td></tr></table></figure><blockquote><p>重置镜像 <a href="https://registry.npmjs.com/%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%8D%A2%E6%88%90">https://registry.npmjs.com/，可以换成</a> <a href="http://registry.npm.taobao.org/%EF%BC%9B%E5%8F%8D%E4%B9%8B%EF%BC%8C%E4%BA%A6%E7%84%B6">http://registry.npm.taobao.org/；反之，亦然</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm -rf package.lock.json（或 yarn.lock） # 删除 lock 文件</span><br><span class="line">npm cache clean --force # 清除缓存</span><br><span class="line">npm cache verify # 验证缓存数据的有效性和完整性，清理垃圾数据。</span><br><span class="line">npm i # 重新安装</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue.use 与 vue.component</title>
      <link href="/2019/02/25/vue-use-vue-component/"/>
      <url>/2019/02/25/vue-use-vue-component/</url>
      
        <content type="html"><![CDATA[<p>Error - 1 弹层对象取自列表，列表数据在弹层编辑修改，编辑部分数据后，取消或关闭弹层，列表数据修改。<br>产生原因：vue 双向绑定<br>解决办法：copy Object, 对象重新 copy 一份</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handlerUpdate</span>(<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="comment">// 更新 item</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dialogVisible</span> = !<span class="variable language_">this</span>.<span class="property">dialogVisible</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dialogStatus</span> = <span class="string">&#x27;edit&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">temp</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, item) <span class="comment">// copy obj</span></span><br><span class="line">  <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="string">&#x27;dataForm&#x27;</span>].<span class="title function_">clearValidate</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">vm</span>: <span class="title class_">Component</span> = <span class="variable language_">this</span></span><br></pre></td></tr></table></figure><p>以上写是不是有点奇怪，是的。我没见过，它是 <a href="https://flow.org/">flow.js</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 前端框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域</title>
      <link href="/2019/02/22/%E8%B7%A8%E5%9F%9F/"/>
      <url>/2019/02/22/%E8%B7%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>违背同源策略的就是 <strong>跨域</strong>，可以说<strong>跨域</strong> 是浏览器同源策略的产生。</p></blockquote><h2 id="浏览器的同源策略-Same-Origin-Policy"><a href="#浏览器的同源策略-Same-Origin-Policy" class="headerlink" title="浏览器的同源策略(Same-Origin Policy)"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy">浏览器的同源策略(Same-Origin Policy)</a></h2><blockquote><p>最早是由 Netscape（网景）公司提出，是浏览器的一种安全策略。</p></blockquote><p><u><span class='custom-box custom-box-933'>同源，相同的协议 + 相同的域名 + 相同的端口号</span><code>同源</code>策略是一种隔离恶意文件的安全机制。</u><br><span class='custom-box custom-box-939'>对不同源之间的文档或脚本交互进行了限制。</span><br><span class='custom-box custom-box-393'><strong>不同源</strong>是指两个页面的协议、端口、域名有一个不同</span></p><p>与<code>https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy</code>对比是否同源</p><table><thead><tr><th align="center">序号</th><th>link</th><th>协议</th><th>域名</th><th>端口</th><th>是否同源</th><th>原因</th></tr></thead><tbody><tr><td align="center">1</td><td><a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy">https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy</a></td><td>https</td><td>developer.mozilla.org</td><td>80</td><td>是</td><td>路径不是同源的限制条件</td></tr><tr><td align="center">2</td><td><a href="http://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy">http://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy</a></td><td>http</td><td>developer.mozilla.org</td><td>80</td><td>否</td><td>协议不同</td></tr><tr><td align="center">3</td><td><a href="https://develop.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy">https://develop.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy</a></td><td>https</td><td>develop.mozilla.org</td><td>80</td><td>否</td><td>域名不同</td></tr><tr><td align="center">4</td><td><a href="https://developer.mozilla.org:81/index.html">https://developer.mozilla.org:81/index.html</a></td><td>https</td><td>developer.mozilla.org</td><td>81</td><td>否\是</td><td>端口不同（IE 中端口号不在同源策略中，固在IE 浏览器中，属同源）</td></tr><tr><td align="center">5</td><td><a href="https://new.developer.mozilla.org:81/index.html">https://new.developer.mozilla.org:81/index.html</a></td><td>https</td><td>new.developer.mozilla.org</td><td>80</td><td>否</td><td>域名 new.developer.mozilla.org 不同</td></tr></tbody></table><h3 id="IE-是否同源略有差异"><a href="#IE-是否同源略有差异" class="headerlink" title="IE 是否同源略有差异"></a>IE 是否同源略有差异</h3><blockquote><ul><li><input checked="" disabled="" type="checkbox"> 在 IE 中，两个高度互信的域名不用遵守同源策略限制。<code>授信范围（Trust Zones）</code></li><li><input disabled="" type="checkbox"> <span class='custom-box custom-box-933'>在 IE 中，<code>端口</code>号不在同源策略中，即<strong>协议、域名相同则不受同源策略限制</strong></span></li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">domain</span> = <span class="string">&quot;company.com&quot;</span>; <span class="comment">// 修改当前域名</span></span><br></pre></td></tr></table></figure><h2 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h2><h3 id="document-domain-iframe"><a href="#document-domain-iframe" class="headerlink" title="document.domain + iframe"></a>document.domain + iframe</h3><p><code>共享数据的两个页面域名有共同的主域名或b域名是a域名的子域名</code></p><blockquote><p>上表 4、5 中，主域名相同，均为 ‘mozilla.org’<br>  <a href="https://developer.mozilla.org:81/index.html">https://developer.mozilla.org:81/index.html</a> 中<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://new.developer.mozilla.org:81/index.html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="property">domain</span> = <span class="string">&#x27;mozilla.org&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> user = <span class="string">&#x27;HelenZhanglp&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><a href="https://new.developer.mozilla.org:81/index.html">https://new.developer.mozilla.org:81/index.html</a><br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="property">domain</span> = <span class="string">&#x27;mozilla.org&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>*** 如此，new.developer.mozilla.org 所以访问到 developer.mozilla.org 中的数据 ***</p></blockquote><h3 id="跨域解决方案-jsonp"><a href="#跨域解决方案-jsonp" class="headerlink" title="跨域解决方案 - jsonp"></a>跨域解决方案 - jsonp</h3><p><span class='custom-box custom-box-339'>在页面中用 about:blank 或 JavaScript: URL 执行的脚本会继承打开该 URL 的文档的源，因为这些类型的 URLs 没有明确包含有关原始服务器的信息。</span><br>例如，about:blank 通常作为父脚本写入内容的新的空白弹出窗口的 URL（例如，通过  Window.open()  机制）。 如果此弹出窗口也包含代码，则该代码将继承与创建它的脚本相同的源。</p><blockquote><p>jsonp 是 json 的使用模式，使用 jsonp 跨域，没有兼容方面问题<br><code>img,iframe,script</code> 三个标签可以通过 src 属性获取不同源的服务器资源<br>当使用 jsonp 模式发送请求时 <em><strong>需要服务端支持</strong></em> 需要用 callback 函数包裹 json 串</p></blockquote><h5 id="以下案例是用-node-启后端服务"><a href="#以下案例是用-node-启后端服务" class="headerlink" title="以下案例是用 node 启后端服务"></a>以下案例是用 node 启后端服务</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// localhost:4000/index.html</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">name</span>, <span class="string">&#x27;jsonp&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;http://localhost:8888/?callback=fn&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node server.js</span></span><br><span class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> urllib = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">request, response</span>) &#123;</span><br><span class="line">  response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span>&#125;)</span><br><span class="line">  <span class="keyword">var</span> params = urllib.<span class="title function_">parse</span>(request.<span class="property">url</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (params.<span class="property">query</span> &amp;&amp; params.<span class="property">query</span>.<span class="property">callback</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> str =  params.<span class="property">query</span>.<span class="property">callback</span> + <span class="string">&#x27;(&#x27;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;HelenZhanglp&#x27;</span></span><br><span class="line">    &#125;) + <span class="string">&#x27;)&#x27;</span>; <span class="comment">//jsonp</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line"></span><br><span class="line">    response.<span class="title function_">end</span>(str);</span><br><span class="line">  &#125;</span><br><span class="line">  response.<span class="title function_">end</span>(<span class="string">&#x27;localhost:8888&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8888</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://127.0.0.1:8888/index.js&#x27;</span>);</span><br></pre></td></tr></table></figure><p>以上 Demo 二个注意点：</p><ol><li><a href="http://localhost:8888/?callback=fn">http://localhost:8888/?callback=fn</a> 注意这个链接，参数之前加 <code>?</code>。如此，node 服务端可以通过 urllib.parse(request.url, true) 进入参数解析</li><li>函数 fn 是以变量赋值方式声明的，这里有个 <strong><a href="">变量提升</a></strong> 的概念，一定要先声明赋值后再引用，如 demo (localhost:4000/index.html)。顺序不能错。</li><li>注意：<span class='custom-box custom-box-933'>JSONP只支持GET请求，服务端可能在JSONP响应中夹带恶意代码，判断是否请求成功是困难的。</span></li></ol><h3 id="跨域资源共享（CORS）当前主流解决方案"><a href="#跨域资源共享（CORS）当前主流解决方案" class="headerlink" title="跨域资源共享（CORS）当前主流解决方案"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">跨域资源共享（CORS）</a><span class='custom-box custom-box-939'>当前主流解决方案</span></h3><ol><li> <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/CORS">CORS</a> Cross-Origin Resource Sharing，跨域资源共享）是一个系统，<span class='custom-box custom-box-933'>它由一系列传输的HTTP头组成</span>，这些 <span class='custom-box custom-box-393'><code>HTTP头决定浏览器是否阻止前端 JavaScript 代码获取服务器资源</code></span>。浏览器同源安全策略 <span class='custom-box custom-box-339'>默认阻止“跨域”获取资源</span>。但是 CORS 给了web服务器这样的权限，<span class='custom-box custom-box-993'>即服务器可以选择，允许跨域请求访问到它们的资源。</span> 那么浏览器的跨域访问限制就被解除了。</li><li>跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器，让运行在一个 origin (domain) 上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。比如，站点 <a href="http://domain-a.com/">http://domain-a.com</a> 的某 HTML 页面通过 <img> 的 src 请求 <a href="http://domain-b.com/image.jpg%E3%80%82%E7%BD%91%E7%BB%9C%E4%B8%8A%E7%9A%84%E8%AE%B8%E5%A4%9A%E9%A1%B5%E9%9D%A2%E9%83%BD%E4%BC%9A%E5%8A%A0%E8%BD%BD%E6%9D%A5%E8%87%AA%E4%B8%8D%E5%90%8C%E5%9F%9F%E7%9A%84CSS%E6%A0%B7%E5%BC%8F%E8%A1%A8%EF%BC%8C%E5%9B%BE%E5%83%8F%E5%92%8C%E8%84%9A%E6%9C%AC%E7%AD%89%E8%B5%84%E6%BA%90%E3%80%82">http://domain-b.com/image.jpg。网络上的许多页面都会加载来自不同域的CSS样式表，图像和脚本等资源。</a><br>出于安全原因，浏览器限制从脚本内发起的跨源HTTP请求。例如，XMLHttpRequest 和 Fetch API 遵循同源策略。这意味着使用这些 API的 Web 应用程序只能从加载应用程序的同一个域请求HTTP资源，除非响应报文包含了正确CORS响应头。</li></ol><pre class="mermaid"> flowchart TB subgraph " "  browser[浏览器] -->|跨域请求| server[接口服务器]  server -.->|响应的结果被浏览器拦截<br/>网页无法获取跨域响应数据| browser end subgraph " "  browser1[浏览器] -->|跨域请求| server1["接口服务器<br/> Access-Control-Allow: *"]  server1 -->|服务端配置 cors 响应头<br/>解除浏览器跨域访问限制| browser1 end</pre><h4 id="CORS-跨域资源共享"><a href="#CORS-跨域资源共享" class="headerlink" title="CORS 跨域资源共享"></a>CORS 跨域资源共享</h4><p>浏览器的<code>同源安全策略</code>默认阻止网页跨域获取资源。<u>但如果接口服务器配置了 CORS 相关的 HTTP 响应头，就可以解除浏览器的跨域访问限制。</u></p><ul><li>响应头 Access-Control-Allow-Origin, origin 参数值指定了<strong>允许访问该资源外域的 URL</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;http://abc.com&#x27;</span>) <span class="comment">// 或者为 * 允许所有资源访问</span></span><br></pre></td></tr></table></figure></li><li>响应头 Access-Control-Allow-Headers<br>默认情况下，CORS 仅支持客户端向服务器发送如下9个请求头：<br>Accept,Accept-Language,Content-Language,DPR,Downlink,Save-Data,Viewport-Width,Width,Content-Type(text/plain, multipart/form-data,application/x-www-form-urlencoded 三者之一)<br><span class='custom-box custom-box-933'>如果客户端向服务器发送了额外的请求头信息，服务器端需要通过 Access-Control-Allow-Headers 对额外的请求头进行声明，否则请求失败。</span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;custom-header&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>响应头 Access-Control-Allow-Methods<br>默认情况下，CORS 只支持客户端发起 GET/POST/HEAD 请求。<br>如果客户端希望通过 PUT、DELETE 等方式请求服务器资源，需要在服务器端，通过 Access-Control-Allow-Methods 指明实际请求所允许使用的 HTTP 方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h3><ul><li>请求方式为 GET/POST/HEAD 之外的请求 Method 类型；</li><li>请求头中包含自定义头部字段；</li><li>向服务器发送 application/json 格式的数据</li></ul><p>在浏览器与服务器正式通信之前，浏览器会先发送 OPTION 请求进行预检，以获知服务器是否允许该实际请求，这一次的 OPTION 请求称为“预检请求”。服务器成功响应预检请求后，才会发送真正的请求，并且携带真实数据。</p><h3 id="简单请求与预检请求"><a href="#简单请求与预检请求" class="headerlink" title="简单请求与预检请求"></a>简单请求与预检请求</h3><p><span class='custom-box custom-box-933'>简单请求：客户端与服务器端只会发生一次请求。</span><br><span class='custom-box custom-box-933'>预检请求：客户端与服务器之间会发生两次请求，OPTION 预检请求成功后，会发起真正的请求。</span></p><h3 id="JSONP-的概念与特点"><a href="#JSONP-的概念与特点" class="headerlink" title="JSONP 的概念与特点"></a>JSONP 的概念与特点</h3><blockquote><p>浏览器端通过 <code>&lt;script&gt;</code> 标签的 src 属性，请求服务器上的数据，同时，服务器返回一个函数的调用。这种请求方式叫做 JSONP<br><span class='custom-box custom-box-339'>特点：</span> JSONP 不是真正的 Ajax 请求，它没有用 XMLHttpRequest<br><span class='custom-box custom-box-339'>特点：</span> JSONP 仅支持 GET 请求，不支持 POST,PUT,DELETE 请求</p></blockquote><pre class="mermaid"> flowchart TB callback[获取客户端发送过来的回调函数的名字] --> data[拿到通过 JSONP 形式发送给客户的数据] data --> sliptJoint[拼接函数调用字符串] sliptJoint --> e["将函数响给客户端script标签进行解析"]</pre><p><a href="https://github.com/HelenZhangLP/demo/blob/master/node/src/demo13/index.js">demo for jsonp</a></p><h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><h4 id="ERROR-——-Access-to-XMLHttpRequest-at-‘file-Users-…-jsx-jsx-basic-js’-from-origin-‘null’-has-been-blocked-by-CORS-policy-Cross-origin-requests-are-only-supported-for-protocol-schemes-http-data-chrome-chrome-extension-chrome-untrusted-https"><a href="#ERROR-——-Access-to-XMLHttpRequest-at-‘file-Users-…-jsx-jsx-basic-js’-from-origin-‘null’-has-been-blocked-by-CORS-policy-Cross-origin-requests-are-only-supported-for-protocol-schemes-http-data-chrome-chrome-extension-chrome-untrusted-https" class="headerlink" title="ERROR —— Access to XMLHttpRequest at ‘file://Users/…/jsx/jsx-basic.js’ from origin ‘null’ has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http,data,chrome,chrome-extension,chrome-untrusted,https"></a><font color='red'>ERROR —— Access to XMLHttpRequest at ‘file://Users/…/jsx/jsx-basic.js’ from origin ‘null’ has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http,data,chrome,chrome-extension,chrome-untrusted,https</font></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">dir</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- react core code when deploying, replace &quot;development.js&quot; with &quot;production.min.js&quot; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@16/umd/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- react about dom&#x27;s function --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Don&#x27;t use this in production  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./import.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>解决办法：<br>http-server 打开一个本地服务，通过本地服务请求</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Starting up http-server, serving ./</span><br><span class="line">Available on:</span><br><span class="line">  http://127.0.0.1:8080</span><br><span class="line">  http://192.168.5.10:8080</span><br><span class="line">Hit CTRL-C to stop the server</span><br><span class="line">[2021-03-03T04:44:16.576Z]  &quot;GET /jsx/jsx.html&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Geck</span><br><span class="line">o) Chrome/88.0.4324.192 Safari/537.36&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> browser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS BFC</title>
      <link href="/2019/02/20/CSS-BFC/"/>
      <url>/2019/02/20/CSS-BFC/</url>
      
        <content type="html"><![CDATA[<p>元素设置 position: absolute 或 float: left 会脱离文档流<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">个人的官方是 MDN 文档，信得过，值得依赖</a><br>[同时借鉴 前端精选文摘：BFC 神奇背后的原理]（<a href="https://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html%EF%BC%89%E5%8F%91%E7%8E%B0%E7%9C%9F%E6%AD%A3%E8%A6%81%E7%90%86%E8%A7%A3">https://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html）发现真正要理解</a> BFC 不仅仅要清楚创建块级格式化上下文的方式，还要清楚一些它布局的规则。</p><p><strong>BFC - Block Formatting Context Web</strong> 页面可视化css渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其它元素交互的区域。</p><h3 id="创建块级格式化上下文的方式（Block-Formatting-Context）"><a href="#创建块级格式化上下文的方式（Block-Formatting-Context）" class="headerlink" title="创建块级格式化上下文的方式（Block Formatting Context）"></a>创建块级格式化上下文的方式（Block Formatting Context）</h3><ul><li><code>绝对定位元素</code><strong>position: absolute/position: fixed</strong> 会创建块级上下文<blockquote><p>图标居定位右上角 <a href="https://github.com/HelenZhangLP/demo/blob/master/postionAbsoluteFixedBlock/index.html">以下 demo 代码</a></p></blockquote></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>navigator1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>navigator2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>navigator3<span class="tag">&lt;<span class="name">i</span>&gt;</span>vip icon<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">i</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">2px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f90</span>;</span><br><span class="line">  <span class="attribute">text-indent</span>: -<span class="number">9999px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">28px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">11px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">http://img.mukewang.com/545304730001307300280011.gif</span>) no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/demo/positionAbsoluteFixedBlock/position-absolute-block-1.jpg" alt="position-absolute-block-1"><br>上图是一个注释掉<code>position: absolute</code>后的错误示例，如 <code>&lt;i&gt;</code> 非块级元素，<code>text-indent: -9999px</code> 不生效，<code>margin: -2px 0 0 1px</code>在垂直方向同样不生效。注释文本撑开，显示vip图片，若无<code>vip icon</code>，背影图同样不显示，因为 <code>width/height</code> 对非块级元素不生效。<code>放开position: absolute 注释后，BFC 化后，实现效果如下图</code></p><p><img src="/images/demo/positionAbsoluteFixedBlock/position-absolute-block-2.jpg" alt="position-absolute-block-2"></p><hr><ul><li>overflow 值不为 visible（default/visible）</li><li>浮动元素（float 不为 none）<blockquote><p>浮动实现两列表布局<br>盒子 .bfc1 与 盒子 .bfc2，左右布局，左侧盒子宽 100，左侧盒子根据父元素高自适应</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;content&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;bfc1&#x27;</span>&gt;</span>bfc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;bfc2&#x27;</span>&gt;</span>bfc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">border</span>: solid <span class="number">3px</span> <span class="number">#dd9</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bfc1</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#f99</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bfc2</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#fcc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>由图可以看出，块状元素布局是由上自下，每个元素与父元素左边框接触<br>左浮动实现两列表布局</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">border</span>: solid <span class="number">3px</span> <span class="number">#dd9</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bfc1</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;  // 左浮动实现两列表布局</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#f99</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bfc2</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#fcc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 盒模型</title>
      <link href="/2019/02/20/CSS-%E7%9B%92%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/02/20/CSS-%E7%9B%92%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>该文档整理基于<a href="https://www.ibm.com/developerworks/cn/web/1310_shatao_quirks/#N101C3">怪异模式（Quirks Mode）对 HTML 页面的影响</a></p><p>切入正题，说说盒模型。通过上面那篇文章，我意识到了盒模型的差异源于浏览器的渲染解析差异。最突出的代表要数IE浏览器，在 IE 中，有四种标准模式（Standards Mode）- IE7/8/9/10 Standards Mode；两种怪异模式（Quirks Mode）IE5 Quirks 和 IE10 Quirks。这两类文档模式在盒模型的渲染上有所差异。</p><h3 id="话不多说，先上图"><a href="#话不多说，先上图" class="headerlink" title="话不多说，先上图"></a>话不多说，先上图</h3><p><img src="https://bkimg.cdn.bcebos.com/pic/a9d3fd1f4134970a37cf81a69fcad1c8a6865dfe?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2U4MA==,g_7,xp_5,yp_5" alt="W3C标准盒模型">;<br><strong><center>【W3C标准盒模型】</center></strong><br><img src="https://www.ibm.com/developerworks/cn/web/1310_shatao_quirks/image005.jpg" alt="IE盒模型"><br><strong><center>【IE盒模型】</center></strong></p><p>由上图可以看出：</p><blockquote><p>IE Quirks 怪异模式 盒模型  width = border + padding + content<br>  W3C 盒模型 width = content width</p></blockquote><span id="more"></span><h3 id="box-sizing（兼容-IE8-浏览器）"><a href="#box-sizing（兼容-IE8-浏览器）" class="headerlink" title="box-sizing（兼容 IE8+浏览器）"></a>box-sizing（兼容 <code>IE8+</code>浏览器）</h3><p>定义用户代理（user agent）计算元素总宽高计算方式的 css3 属性，文档定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box-sizing ： content-box || border-box || inherit</span><br></pre></td></tr></table></figure><p>content-box: 默认值，W3C 盒模型，元素所占区域宽 = border+padding+（content=width）。<br>border-box: 元素渲染模式为 IE Quirks 渲染方式，即元素所占区域宽高 = width = border + padding + content</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Document Object Model</title>
      <link href="/2019/02/11/JavaScript-Docment-Object-Model/"/>
      <url>/2019/02/11/JavaScript-Docment-Object-Model/</url>
      
        <content type="html"><![CDATA[<h2 id="Browser-Object-Model"><a href="#Browser-Object-Model" class="headerlink" title="Browser Object Model"></a>Browser Object Model</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">window</span><br><span class="line">├── navigator</span><br><span class="line">├── location</span><br><span class="line">├── frames</span><br><span class="line">├── screen</span><br><span class="line">├── document</span><br><span class="line">│   ├── forms</span><br><span class="line">│   ├── links</span><br><span class="line">│   ├── anchors</span><br><span class="line">│   ├── images</span><br><span class="line">│   ├── all</span><br><span class="line">│   ├── cookie</span><br><span class="line">└── history</span><br></pre></td></tr></table></figure><h2 id="document"><a href="#document" class="headerlink" title="document"></a>document</h2><blockquote><p>window.document 是 Document 的实例。代表整个 HTML 文件。<u>该对象上提供一组 HTMLCollection 实例</u></p></blockquote><table><thead><tr><th>name</th><th>description</th></tr></thead><tbody><tr><td>document.forms</td><td>获取所有窗体</td></tr><tr><td>document.images</td><td>获取所有的图片元素</td></tr><tr><td>document.links</td><td>a 标签定义，超链接用 href 属性</td></tr><tr><td>document.anchors</td><td>a 标签定义，锚点使用 name 属性</td></tr><tr><td>document.cookie</td><td>设定或读取 cookie，使用不便，容量只有 4kb</td></tr></tbody></table><h3 id="具体如下-DEMO"><a href="#具体如下-DEMO" class="headerlink" title="具体如下 DEMO"></a>具体如下 DEMO</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!Doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line">      姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span> /&gt;</span></span><br><span class="line">      密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="获取-forms"><a href="#获取-forms" class="headerlink" title="获取 forms"></a>获取 forms</h4><ol><li> 用[]加索引获取 <code>document.forms[0]</code></li><li> 用[]加 id 或 name 取 <code>document.forms[&#39;login]</code></li><li> 点运算符加名称取 <code>document.forms.login</code><blockquote><p>以上三种方式适用于 document.forms/document.links/document.anchors/document.images</p></blockquote></li></ol><p><strong>继续用<code>elements</code>获取子元素</strong></p><ol><li> 用[]加索引获取 <code>document.forms[0].elements[0]</code></li><li> 用[]加 id 或 name 取 <code>document.forms[&#39;login].elements[&#39;user&#39;]</code></li><li> 点运算符加名称取 <code>document.forms.login.elements.user</code><blockquote><p>在父子元素中都有 name 属性时，可以直接采用 <code>document.login.user.value</code></p></blockquote></li></ol><h2 id="文件对象模型（Document-Object-Model-DOM"><a href="#文件对象模型（Document-Object-Model-DOM" class="headerlink" title="文件对象模型（Document Object Model, DOM)"></a>文件对象模型（Document Object Model, DOM)</h2><p>浏览器厂商实现的DOM——目的是解决浏览器间的对象模型不一致的问题</p><p>卷标以及文字都有相应的对象，这些就形成了树状结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">document                                    (Document)</span><br><span class="line">├── html                                    (HTMLHtmlElement)</span><br><span class="line">│     ├── head                              (HTMLHeadElement)</span><br><span class="line">│     │     ├── meta</span><br><span class="line">│     ├── body</span><br><span class="line">│     │     ├── form</span><br><span class="line">│     │     │     ├── input[name=user]</span><br><span class="line">│     │     │     ├── input[name=password]</span><br><span class="line">│     │     │     ├── button                 </span><br><span class="line">│     │     │     │     ├── 登录              (Text)</span><br></pre></td></tr></table></figure><blockquote><p>document 是 Document 的实例，代表整份文件，使用 document.childNodes[0] 或者 document.documentElement 取 html 卷标的 DOM 元素。</p></blockquote><p>DOM API 分两部分<br>核心 API 可以用任何语言实现操作接口，可操作的对象基于 XML 文件<br>HTML DOM API 是核心 DOM API 的延伸，专门用于操作 HTML</p><h2 id="使用-JavaScript-取-HTML-中的信息"><a href="#使用-JavaScript-取-HTML-中的信息" class="headerlink" title="使用 JavaScript 取 HTML 中的信息"></a>使用 JavaScript 取 HTML 中的信息</h2><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><h4 id="核心-DOM-API-取出-HTML-中某个节点，再取其以下节点"><a href="#核心-DOM-API-取出-HTML-中某个节点，再取其以下节点" class="headerlink" title="核心 DOM API 取出 HTML 中某个节点，再取其以下节点"></a>核心 DOM API 取出 HTML 中某个节点，再取其以下节点</h4><table><thead><tr><th>API</th><th>描述</th></tr></thead><tbody><tr><td>parentNode</td><td>获取当前节点的父节点</td></tr><tr><td>previousSibling</td><td>获取当前节点的前临节点</td></tr><tr><td>nextSibling</td><td>获取当前节点的后邻节点</td></tr><tr><td>firstChild</td><td>获取当前节点的首个子节点</td></tr><tr><td>lastChild</td><td>获取当前节点的最后一个子节点</td></tr><tr><td>childNodes</td><td>获取当前节点的所有子节点</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">lastChild</span></span><br><span class="line"><span class="comment">/*#text</span></span><br><span class="line"><span class="comment">    assignedSlot: null</span></span><br><span class="line"><span class="comment">    baseURI: &quot;http://localhost:4000/2019/02/11/JavaScript-Docment-Object-Model/&quot;</span></span><br><span class="line"><span class="comment">    childNodes: NodeList []</span></span><br><span class="line"><span class="comment">    data: &quot;\n\n\n&quot;</span></span><br><span class="line"><span class="comment">    firstChild: null</span></span><br><span class="line"><span class="comment">    isConnected: true</span></span><br><span class="line"><span class="comment">    lastChild: null</span></span><br><span class="line"><span class="comment">    ...*/</span></span><br></pre></td></tr></table></figure><blockquote><p><code>doucment.body.parentNode</code> 得到 text，header 的最后一个子节点是文本节点</p></blockquote><h3 id="通过以下特性获取元素"><a href="#通过以下特性获取元素" class="headerlink" title="通过以下特性获取元素"></a>通过以下特性获取元素</h3><table><thead><tr><th>API</th><th>描述</th></tr></thead><tbody><tr><td>parentElement</td><td>获取当前元素的父元素</td></tr><tr><td>previousElementSibling</td><td>获取当前元素的前邻接元素</td></tr><tr><td>nextElementSibling</td><td>获取当前元素的后邻接元素</td></tr><tr><td>firstElementChild</td><td>获取当前元素的第一个子元素</td></tr><tr><td>lastElementChild</td><td>获取当前元素的最后一个子元素</td></tr><tr><td>children</td><td>获取当前元素的所有子元素</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">lastElementChild</span></span><br><span class="line"><span class="comment">// &lt;div class=&quot;banner&quot;&gt;...&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><h4 id="id-属性、卷标名称、class-属性-取-Element-类型的节点"><a href="#id-属性、卷标名称、class-属性-取-Element-类型的节点" class="headerlink" title="id 属性、卷标名称、class 属性(取 Element 类型的节点)"></a>id 属性、卷标名称、class 属性(取 Element 类型的节点)</h4><table><thead><tr><th>name</th><th>description</th><th>return</th></tr></thead><tbody><tr><td>getElementsByTagName</td><td>顺序是子树中的顺序，使用索引取对应节点</td><td>HTMLCollection</td></tr><tr><td>getElementsById</td><td>卷标对应 id 属性，独一无二，重复时取子树中第一个符合的元素</td><td>/</td></tr><tr><td>getElementsByName</td><td>HTML 卷标定义 name 属性，name 属性值可以重复</td><td>HTMLCollection</td></tr><tr><td>getElementsByClassName</td><td>HTML 卷标上定义有 class 属性</td><td>HTMLCollection</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;nav&#x27;</span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;span id=&quot;nav&quot; style=&quot;display: none;&quot;&gt;</span></span><br><span class="line"><span class="comment">    ...</span></span><br><span class="line"><span class="comment">&lt;/span&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>innerHTML 取卷标内的 HTML，<strong>HTML5 正式将 innerHTML 纳入标准</strong></p></blockquote><h4 id="选择器语法"><a href="#选择器语法" class="headerlink" title="选择器语法"></a>选择器语法</h4><p>通过 <code>querySelector()</code>、<code>querySelectorAll()</code> + CSS 选择器取元素</p><table><thead><tr><th>id</th><th>选择器</th></tr></thead><tbody><tr><td>document.getElementById(‘test’)</td><td>document.querySelector(‘#test’)</td></tr><tr><td>document.getElementsByTagName(‘div’)</td><td>document.querySelectorAll(‘div’)</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#nav&#x27;</span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;span id=&quot;nav&quot; style=&quot;display: none;&quot;&gt;</span></span><br><span class="line"><span class="comment">    ...</span></span><br><span class="line"><span class="comment">&lt;/span&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="卷标属性与DOM特性"><a href="#卷标属性与DOM特性" class="headerlink" title="卷标属性与DOM特性"></a>卷标属性与DOM特性</h2><p><strong>这里稍做个理解上的区分，方便理解</strong></p><blockquote><p>通过 JavaScript 获取 DOM，继续取 DOM 具有的特性（Property）<br>HTML 卷标上设置的为属性（attribute）<br><font color="#f33">通常情况下，JavaScript 特性与 HTML 卷标上的属性是对应的，<u>也有因保留字或关键字原因造成的不一致</u>如下表</font></p></blockquote><table><thead><tr><th>html 属性</th><th>DOM特性</th></tr></thead><tbody><tr><td>&lt;input name=”user” value=”admin”&gt;</td><td>let input=document.querySelector(‘input’)[0];<br /> let {name, value} = input</td></tr><tr><td>&lt;label class=”label” for=”radio”&gt;demo&lt;/&gt;<br/> <strong>class 为保留字</strong><br/><strong>for 为关键字</strong></td><td>let label = document.getElementsByTagName(‘label’)[0]; <br/> let className=label.className;<br/> let labelFor = label.htmlFor</td></tr></tbody></table><p><font color="#f33">特别说明：文本也是一个 DOM 节点</font><br>取 body 中最后一个子节点的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">lastChild</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * text</span></span><br><span class="line"><span class="comment">     assignedSlot: null</span></span><br><span class="line"><span class="comment">     baseURI: &quot;http://localhost:4000/2019/02/11/JavaScript-Docment-Object-Model/&quot;</span></span><br><span class="line"><span class="comment">     childNodes: NodeList []</span></span><br><span class="line"><span class="comment">     data: &quot;\n\n\n&quot;</span></span><br><span class="line"><span class="comment">     ...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">lastChild</span>.<span class="property">data</span></span><br><span class="line"><span class="comment">// &quot;\n\n\n&quot;</span></span><br></pre></td></tr></table></figure><p><font color="#f33">innerHTML 设定 HTML 片段给 innerHTML，标签会被解析、建立对应的 DOM 对象，<strong>script 卷标被忽略，避免 XSS（Cross Site Script）的问题</strong></font></p><blockquote><p>如果卷标间只有文字，想要获取文件，使用 <code>textContent</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = <span class="string">&quot;&lt;div id = &#x27;a&#x27;&gt;12&lt;/div&gt;&quot;</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#a&#x27;</span>).<span class="property">textContent</span></span><br><span class="line"><span class="comment">// &quot;12&quot;</span></span><br></pre></td></tr></table></figure><h3 id="attributes-特性"><a href="#attributes-特性" class="headerlink" title="attributes 特性"></a>attributes 特性</h3><p>卷标设置的属性，在 DOM 对象的 attributes 特性中记录。attributes 类型为 NamedNodeMap，为类数组。</p><table><thead><tr><th>API</th><th>描述</th></tr></thead><tbody><tr><td>getAttribute()</td><td>取 attribute 记录的属性值，取 attribute 中不存在指定属性时，返回 null。指的是 DOM 上没有对应的特性，该值为默认值。</td></tr><tr><td>setAttribute()</td><td>设定属性</td></tr><tr><td>removeAttribute()</td><td>来移除 attributes 属性。操作后<strong>只是回到默认值</strong>，不是直接将特性移除。<u>没有任何操作可以将 DOM 对应于属性的特性移除</u></td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dom = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">dom.<span class="title function_">getAttribute</span>(<span class="string">&#x27;readonly&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> imgDom = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">img.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;src&#x27;</span>) <span class="comment">// src = &#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">dom.<span class="title function_">setAttribute</span>(<span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;helenZhang&#x27;</span>) <span class="comment">// 修改 input 的 defaultValue</span></span><br></pre></td></tr></table></figure><p><font color="#f33">基于安全考虑，input type 为 file 时，defaultValue、value 属性的设置会被忽略，无法通过程序代码取得 DOM 的 defaultValue、value 特性，使用程序代码设置 DOM 的 defaultValue、value 或通过 setAttribute() 设值会影响 DOM 相对应的特性，但对浏览器窗体或文件上传行为没有影响，只能由使用者亲自选取文件。</font></p><h2 id="修改-DOM-树"><a href="#修改-DOM-树" class="headerlink" title="修改 DOM 树"></a>修改 DOM 树</h2><p>浏览器解析 HTML，生成 DOM 树。根据 DOM 树绘制浏览器中的画面，改变 DOM 树，浏览器重绘画面。如此构成修改文件的基本原理。</p><h3 id="修改-DOM-的几个-API"><a href="#修改-DOM-的几个-API" class="headerlink" title="修改 DOM 的几个 API"></a>修改 DOM 的几个 API</h3><table><thead><tr><th>API name</th><th>API description</th></tr></thead><tbody><tr><td>createElement</td><td>建立卷标对应的元素</td></tr><tr><td>createTextNode</td><td>建立文本节点</td></tr><tr><td>appendChild</td><td>添加子节点</td></tr><tr><td>removeChild</td><td>删除子节点</td></tr><tr><td>cloneNode(true)</td><td>节点复制，默认不进行深层复制，即不复制子节点。加参数 true，则是指复制子节点</td></tr></tbody></table><p><a href="">有关节点处理的 demo</a></p><h3 id="操作多DOM的几种方式"><a href="#操作多DOM的几种方式" class="headerlink" title="操作多DOM的几种方式"></a><font color="#f99"><strong>操作多DOM的几种方式</strong></font></h3><ul><li><input disabled="" type="checkbox"> <strong>createDocumentFragment，建立 DocumentFragment 实例，利用它作为容器在背景建立 DOM 结构，最后将 DocumentFragment 实例通过 appendChild() 附加至<br> DOM 树</strong><br><a href="https://github.com/HelenZhangLP/demo/blob/draft/js/DOM/DomOption/demo-2.html">有关节点处理的 demo</a></li><li><input disabled="" type="checkbox"> html 片段字符串，最后再设定给 innerHTML <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> frag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">    frag += <span class="string">&#x27;&lt;img src=&#123;imgs[i]&#125; /&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = frag</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node package manage</title>
      <link href="/2019/02/08/NPM-%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
      <url>/2019/02/08/NPM-%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>NodeJs 中包管理及分发工具。</p><h4 id="NPM-Node-Package-Manager"><a href="#NPM-Node-Package-Manager" class="headerlink" title="NPM - Node Package Manager"></a>NPM - Node Package Manager</h4><p>node 包管理工具，是全球最大的开源库生态系统。<br>网络环境，node 包安装或下载速度慢时，可使用淘宝 npm 镜像 cnpm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm install -g cnpm --registry=https://registry.npm.taobao.org</span></span><br><span class="line"><span class="comment"># cnpm install &lt;package_name&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Usage: npm &lt;command&gt;</span><br><span class="line"></span><br><span class="line">where &lt;command&gt; is one of:</span><br><span class="line">    access, adduser, audit, bin, bugs, c, cache, ci, cit,</span><br><span class="line">    clean-install, clean-install-test, completion, config,</span><br><span class="line">    create, ddp, dedupe, deprecate, dist-tag, docs, doctor,</span><br><span class="line">    edit, explore, get, help, help-search, hook, i, init,</span><br><span class="line">    install, install-ci-test, install-test, it, link, list, ln,</span><br><span class="line">    login, logout, ls, org, outdated, owner, pack, ping, prefix,</span><br><span class="line">    profile, prune, publish, rb, rebuild, repo, restart, root,</span><br><span class="line">    run, run-script, s, se, search, set, shrinkwrap, star,</span><br><span class="line">    stars, start, stop, t, team, test, token, tst, un,</span><br><span class="line">    uninstall, unpublish, unstar, up, update, v, version, view,</span><br><span class="line"></span><br><span class="line">    whoami</span><br><span class="line">    npm &lt;command&gt; -h  quick help on &lt;command&gt;</span><br><span class="line">    npm -l            display full usage info</span><br><span class="line">    npm help &lt;term&gt;   search for help on &lt;term&gt;</span><br><span class="line">    npm help npm      involved overview</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Specify configs in the ini-formatted file:</span><br><span class="line">    /Users/lipingzhang/.npmrc</span><br><span class="line">or on the command line via: npm &lt;command&gt; --key value</span><br><span class="line">Config info can be viewed via: npm help config</span><br><span class="line"></span><br><span class="line">npm@6.8.0 /usr/local/lib/node_modules/npm</span><br></pre></td></tr></table></figure><blockquote><p>退出 node 环境</p></blockquote><ol><li>两次ctrl+C</li><li>一次ctrl+D</li><li><code>process.exit()</code></li><li>.exit</li></ol><h2 id="npm-库"><a href="#npm-库" class="headerlink" title="npm 库"></a>npm 库</h2><h3 id="命令行界面解决方式"><a href="#命令行界面解决方式" class="headerlink" title="命令行界面解决方式"></a>命令行界面解决方式</h3><p><a href="https://www.npmjs.com/package/commander">The complete solution for node.js command-line interfaces</a></p><h3 id="postcss-pxtorem"><a href="#postcss-pxtorem" class="headerlink" title="postcss-pxtorem"></a>postcss-pxtorem</h3><h3 id="react-app-polyfill"><a href="#react-app-polyfill" class="headerlink" title="react-app-polyfill"></a>react-app-polyfill</h3><blockquote><p>babel-polyfill 重写，适用于 react 框架，用于ES6 内置 API 兼容处理，使用方法</p></blockquote><ul><li>安装 <code>npm i react-app-polyfill</code></li><li>入口引用，具体如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;react-app-polyfill/IE11&quot;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h3 id="dotenv"><a href="#dotenv" class="headerlink" title="dotenv"></a>dotenv</h3><p>NodeJs 运行时加载不同的配置，<code>process.env.DB_HOST</code> 获取环境变量，程序启动时，从文件加载环境变量时就需要用到 dotenv 库。</p><h4 id="用法-创建-env"><a href="#用法-创建-env" class="headerlink" title="用法 创建 .env"></a>用法 创建 .env</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.<span class="built_in">env</span></span></span><br><span class="line">DB_HOST = localhost</span><br><span class="line">DB_USER = root</span><br><span class="line">DB_PASS = 123456</span><br></pre></td></tr></table></figure><p>NODE 中运行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dotenv = <span class="built_in">require</span>(<span class="string">&#x27;dotenv&#x27;</span>)</span><br><span class="line">dotenv.<span class="title function_">config</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 程序中使用环境变量</span></span><br><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">&#x27;db&#x27;</span>)</span><br><span class="line">db.<span class="title function_">connect</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: process.<span class="property">env</span>.<span class="property">DB_HOST</span>,</span><br><span class="line">  <span class="attr">username</span>: process.<span class="property">env</span>.<span class="property">DB_USER</span>,</span><br><span class="line">  <span class="attr">password</span>: process.<span class="property">env</span>.<span class="property">DB_PASS</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="debug-专门控制日志输出的库"><a href="#debug-专门控制日志输出的库" class="headerlink" title="debug 专门控制日志输出的库"></a>debug 专门控制日志输出的库</h3><p>判断 DEBUG 环境变量，调整运行环境控制日志是否输出。DEBUG 对环境变量进行解析，允许我们选择性的控制输出哪些日志模块，解决控制台日志堆积的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 安装图片插件 ~ hexo + 七牛云</title>
      <link href="/2019/02/03/hexo-%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87%E6%8F%92%E4%BB%B6/"/>
      <url>/2019/02/03/hexo-%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>想要一块地盘，想要保存宝宝的照片，点点滴<br>想要宝宝成长开辟地盘<br>于是。。。<br>七牛云<br>hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 语法</span></span><br><span class="line">&#123;% qnimg longmao.jpeg title:龙猫 at 七牛云 logo alt:七牛云 <span class="string">&#x27;class:&#x27;</span> extend:?imageView2/2/w/550 %&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="hexo-中安装七年云插件"><a href="#hexo-中安装七年云插件" class="headerlink" title="hexo 中安装七年云插件"></a>hexo 中安装七年云插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-qiniu-sync --save</span><br></pre></td></tr></table></figure><blockquote><p>hexo 七牛同步插件 hexo-qiniu-sync<br>git 地址（<a href="https://github.com/gyk001/hexo-qiniu-sync.git%EF%BC%89">https://github.com/gyk001/hexo-qiniu-sync.git）</a><br>赞挖井人</p></blockquote><h2 id="hexo-中配置七牛云"><a href="#hexo-中配置七牛云" class="headerlink" title="hexo 中配置七牛云"></a>hexo 中配置七牛云</h2><p>在 <code>_config.yml</code> 中配置 qiniu 插件，具体每个参数怎么配置、代表什么在（<a href="https://github.com/gyk001/hexo-qiniu-sync.git%EF%BC%89%E4%B8%AD%E6%9C%89%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E%EF%BC%8C%E4%BB%A5%E4%B8%8B%E6%98%AF%E4%B8%AA%E4%BA%BA%E9%85%8D%E7%BD%AE%E7%9A%84">https://github.com/gyk001/hexo-qiniu-sync.git）中有详细说明，以下是个人配置的</a> demo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">qiniu:</span><br><span class="line">  offline: <span class="literal">false</span></span><br><span class="line">  <span class="built_in">sync</span>: <span class="literal">true</span></span><br><span class="line">  bucket: audreyzhang</span><br><span class="line">  secret_file: a/qn.json <span class="comment"># 该配置与 access_key &amp;&amp; secret_key 取其一即可</span></span><br><span class="line">  <span class="comment"># access_key: 3***i</span></span><br><span class="line">  <span class="comment"># secret_key: s**d</span></span><br><span class="line">  dirPrefix: static</span><br><span class="line">  <span class="comment"># 外链前缀</span></span><br><span class="line">  urlPrefix: http://***.bkt.clouddn.com/static</span><br><span class="line">  <span class="comment"># 使用默认配置即可</span></span><br><span class="line">  up_host: http://upload.qiniu.com</span><br><span class="line">  <span class="comment"># 本地目录</span></span><br><span class="line">  local_dir: static</span><br><span class="line">  <span class="comment"># 是否更新已经上传过的文件(仅文件大小不同或在上次上传后进行更新的才会重新上传)</span></span><br><span class="line">  update_exist: <span class="literal">true</span></span><br><span class="line">  image:</span><br><span class="line">    folder: images</span><br><span class="line">    extend:</span><br><span class="line">  js:</span><br><span class="line">    folder: js</span><br><span class="line">  css:</span><br><span class="line">    folder: css</span><br></pre></td></tr></table></figure><h3 id="hexo-中配置七牛插件-ERROR"><a href="#hexo-中配置七牛插件-ERROR" class="headerlink" title="hexo 中配置七牛插件 - ERROR"></a>hexo 中配置七牛插件 - ERROR</h3><h4 id="ERROR-1-port-has-been-used"><a href="#ERROR-1-port-has-been-used" class="headerlink" title="ERROR - 1 - port has been used"></a>ERROR - 1 - port has been used</h4><blockquote><p>每次新增图片，不会自动上传到七牛云服务器，需要重新执行 <code>hexo s</code>，于是遇见以下错误<br><code>&#123;% qnimg portHasBeenUsed.png title: error extend: ?imageView2/2/w/500 %&#125;</code><br><strong>这个很明显，就是端口被占用了。找出启服务的 terminal <code>ctrl + c</code> 停止当前服务，<code>hexo s</code> 重新启动</strong></p></blockquote><h4 id="ERROR-2-get-file-stat-err"><a href="#ERROR-2-get-file-stat-err" class="headerlink" title="ERROR - 2 - get file stat err"></a>ERROR - 2 - get file stat err</h4><blockquote><p>添加图片，执行 <code>hexo g</code> 报错： <em>get file stat err</em> 如下图<br><code>&#123;% qnimg getFileStatErr.png title: error extend: ?imageView2/2/w/500 %&#125;</code><br>逐一排查，发现是 secret_key &amp;&amp; access_key 未设置导致的，排查结果如下图<br><code>&#123;% qnimg getFileStatErr-badToken401.png title: error extend: ?imageView2/2/w/500 %&#125;</code><br>**<code>_config.yml</code> 中添加 access_key &amp;&amp; secret_key，有两种方式： **</p></blockquote><ol><li>直接添加<br>access_key: 3*<strong>i<br>secret_key: s</strong>d</li><li>新增加 <code>sec.json</code>，将 <code>access_key: 3***i &amp;&amp; secret_key: s**d</code> 写入 json 文件，然后 <code>_config.yml，qiniu</code> 插件中，添加 <code>secret_file: a/qn.json</code></li></ol><p><strong>(具体如上 demo，选其一即可。AccessKey/SecretKey 可至 七牛云 个人中心 -&gt; 密钥管理 中查看)</strong></p><h4 id="ERROR-3-token-not-specified-图片不展示"><a href="#ERROR-3-token-not-specified-图片不展示" class="headerlink" title="ERROR - 3 - token not specified 图片不展示"></a>ERROR - 3 - token not specified 图片不展示</h4><blockquote><p>可能是因为当前空间是私有空间造成的，具体原因可看文档<br>  <a href="https://developer.qiniu.com/fusion/kb/3885/through-the-http-status-code-download-failure-reason">https://developer.qiniu.com/fusion/kb/3885/through-the-http-status-code-download-failure-reason</a><br>  <a href="https://developer.qiniu.com/kodo/kb/4054/matters-needing-attention-of-private-space">https://developer.qiniu.com/kodo/kb/4054/matters-needing-attention-of-private-space</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片 </tag>
            
            <tag> 七牛云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EN Dash</title>
      <link href="/2019/02/01/EN-Dash/"/>
      <url>/2019/02/01/EN-Dash/</url>
      
        <content type="html"><![CDATA[<p>opt-in 选择进入<br>opt-out 自愿退出，不参与</p><h2 id="EN-Dash-破折号、连字符"><a href="#EN-Dash-破折号、连字符" class="headerlink" title="EN Dash - 破折号、连字符"></a>EN Dash - 破折号、连字符</h2><blockquote><p>英语中连字符的两大功能</p></blockquote><ol><li>用于移行，把不在同一行的某个单词连接起来；</li><li>把两个或两个以上的单词连接起来，构成新的形容词</li></ol><h3 id="由连字符-构成的形容词性的合成词"><a href="#由连字符-构成的形容词性的合成词" class="headerlink" title="由连字符 -  构成的形容词性的合成词"></a>由连字符 -  构成的形容词性的合成词</h3><ol><li><p>由形容词 + （名词 + ed) 构成的合成形容词</p><blockquote><p>a kind-hearted woman 一个心地善良的人<br>a simple-minded young man 一个头脑简单的年轻人<br>a left-handed person 一个左撇子<br>有时,数词或名词+（名词+ed）,也能构成合成形容词,如：<br>a two-faced fellow 一个两面派的家伙<br>a three-cornered hat 一顶三角帽</p></blockquote></li><li><p>由形容词或副词 + 分词构成的合成形容词</p><blockquote><p>a new-born baby 一个新生婴儿<br>a badly-lighted room 一间光线昏暗的房间<br>a well-meaning proposal 一条善意的建议<br>有时,名词+分词也能构成合成形容词,如：<br>peace-loving people 热爱和平的人民<br>a man-eating society 一个吃人的社会</p></blockquote></li><li><p>由名词、形容词或副词 + 形容词合成的形容词</p><blockquote><p>a snow-white wall 一堵雪白的墙<br>dark-blue ink 深蓝色墨水<br>ever-green bushes 常青灌木林</p></blockquote></li><li><p>由形容词、数词 + 名词合成的形容词</p><blockquote><p>a first－rate teacher 一位一流的教师<br>an eight－cylinder engine 一台八汽缸发动机</p></blockquote></li><li><p>由不同短语构成的合成形容词</p><blockquote><p>out-of-the-way 偏僻<br>face-to-face talk 面对面谈话<br>an out-and-out lie 彻头彻尾的谎言</p></blockquote></li><li><p>作者在表达一个意思时不拘形式,比较随便.他可以把句子中的一个短语,甚至是一个句子,其间用连字符一一连接起来,构成多词性合成形容词.</p><blockquote><p>With your nothing－can－be-done attitude,you can’t hope to accomplish<br>anything．你抱这种无所作为的态度,你就一事无成<br>never-to-be-forgotten 令人难忘<br>difficult-to-operate 难以操作</p></blockquote></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">### mobile-enabled</span><br><span class="line">名词 + 分词合成的形容词</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
            <tag> 词法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>atom 插件</title>
      <link href="/2019/01/31/%E5%B7%A5%E5%85%B7-atom-%E6%8F%92%E4%BB%B6/"/>
      <url>/2019/01/31/%E5%B7%A5%E5%85%B7-atom-%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a><a href="https://blog.csdn.net/qq_40963664/article/details/79250424">快捷键</a></h3><table><thead><tr><th>keyName</th><th>description</th></tr></thead><tbody><tr><td>ctrl+G</td><td>快速跳转到某一行</td></tr></tbody></table><h4 id="markdown-preview-plus"><a href="#markdown-preview-plus" class="headerlink" title="markdown-preview-plus"></a>markdown-preview-plus</h4><ol><li>command + shift + p</li><li>markdown preview toggle</li></ol><h4 id="platformio-ide-terminal"><a href="#platformio-ide-terminal" class="headerlink" title="platformio-ide-terminal"></a>platformio-ide-terminal</h4><ol><li>command + shift + p</li><li>terminal new / terminal close<blockquote><p>安装 Installation Failure platformio-atom-ide-terminal #925<br>install “terminus” it is a fork of platformio-ide-terminal</p></blockquote></li></ol><h4 id="docblockr"><a href="#docblockr" class="headerlink" title="docblockr"></a><a href="https://atom.io/packages/docblockr">docblockr</a></h4><p>用于自动生成注释（annotation）</p><h4 id="authcompletePaths"><a href="#authcompletePaths" class="headerlink" title="authcompletePaths"></a>authcompletePaths</h4><p>自动补全 path</p><h4 id="emmet"><a href="#emmet" class="headerlink" title="emmet"></a>emmet</h4><p>高效编写 html/css，按约定编写代码，自动扩展补全，<a href="https://emmet.io/">具体见文档</a></p><h3 id="Codeigniter-Atom"><a href="#Codeigniter-Atom" class="headerlink" title="Codeigniter Atom"></a>Codeigniter Atom</h3><p>代码补全、高亮</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> develop-tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 坑</title>
      <link href="/2019/01/31/%E5%9D%91-hexo/"/>
      <url>/2019/01/31/%E5%9D%91-hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器样式缓存问题"><a href="#浏览器样式缓存问题" class="headerlink" title="浏览器样式缓存问题"></a>浏览器样式缓存问题</h2><p>这个其实也不只是 hexo 页面会遇到的问题，所有页面修改样式后都会有样式缓存的问题，解决办法如下：</p><blockquote><p>浏览器端 ctrl(command) + shift + r<br>手机浏览器同样要清除缓存，如 safari history -&gt; clear all </p></blockquote><h2 id="master-分支中修改样式，然后发布，不是必须提交远程"><a href="#master-分支中修改样式，然后发布，不是必须提交远程" class="headerlink" title="master 分支中修改样式，然后发布，不是必须提交远程"></a>master 分支中修改样式，然后发布，不是必须提交远程</h2><h2 id="hexo-db-json"><a href="#hexo-db-json" class="headerlink" title="hexo db.json"></a>hexo db.json</h2><blockquote><p>db.json 为缓存文件，如果 theme 有修改，请删除 db.json。然后再执行 <code>hexo g</code></p></blockquote><h2 id="hexo-启动草稿服务"><a href="#hexo-启动草稿服务" class="headerlink" title="hexo 启动草稿服务"></a>hexo 启动草稿服务</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g &amp;&amp; hexo s --drafts</span><br></pre></td></tr></table></figure><h2 id="hexo-deploy-没有反应"><a href="#hexo-deploy-没有反应" class="headerlink" title="hexo deploy 没有反应"></a>hexo deploy 没有反应</h2><p><code>检查</code> _config.yml 中 deploy 配置</p><h2 id="访问页面空白"><a href="#访问页面空白" class="headerlink" title="访问页面空白"></a>访问页面空白</h2><p><code>检查</code> themes</p><h2 id="断行，在首页展示缩略信息，该方法能被-hexo-更好识别"><a href="#断行，在首页展示缩略信息，该方法能被-hexo-更好识别" class="headerlink" title="断行，在首页展示缩略信息，该方法能被 hexo 更好识别"></a>断行，在首页展示缩略信息，该方法能被 hexo 更好识别</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--more--&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">  enable: true</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure><h2 id="ERROR-No-layout-index-html"><a href="#ERROR-No-layout-index-html" class="headerlink" title="ERROR - No layout: index.html"></a>ERROR - No layout: index.html</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br><span class="line">WARN  No layout: index.html</span><br></pre></td></tr></table></figure><span id="more"></span><p><code>解决办法：</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/zhwangart/hexo-theme-ocean.git themes/ocean</span><br></pre></td></tr></table></figure><blockquote><p>Modify theme setting in _config.yml to ocean<br><code>theme: ocean</code></p></blockquote><h2 id="ERROR-发布到-git-服务器访问出现空白页或无主题样式"><a href="#ERROR-发布到-git-服务器访问出现空白页或无主题样式" class="headerlink" title="ERROR - 发布到 git 服务器访问出现空白页或无主题样式"></a>ERROR - 发布到 git 服务器访问出现空白页或无主题样式</h2><blockquote><p>原因是发布到 github 上的项目名称要与个人github的用户名一致，且加后缀 .github.io，如 ‘helenzhanglp.github.io’</p></blockquote><h2 id="ERROR-博客中添加-gitalk"><a href="#ERROR-博客中添加-gitalk" class="headerlink" title="ERROR - 博客中添加 gitalk"></a>ERROR - 博客中添加 gitalk</h2><blockquote><p><em>## Error Error: Not Found. ##</em><br><code>解决办法：</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  clientID: 8e7e6dda81936172806e # GitHub Application Client ID</span><br><span class="line">  clientSecret: 97f71b6bbdf731bc650ec39212061882b8f36e71 # Client Secret</span><br><span class="line">  repo: &#x27;blog&#x27; # Repository name 仓库不能为私有仓库 Private Repository</span><br><span class="line">  owner: HelenZhangLP  # GitHub ID</span><br><span class="line">  admin: HelenZhangLP # GitHub ID</span><br></pre></td></tr></table></figure><h2 id="ERROR-theme-样式修改，先需要先提交至-github，再-deploy"><a href="#ERROR-theme-样式修改，先需要先提交至-github，再-deploy" class="headerlink" title="ERROR - theme 样式修改，先需要先提交至 github，再 deploy"></a>ERROR - theme 样式修改，先需要先提交至 github，再 deploy</h2><h2 id="Error-Spawn-failed"><a href="#Error-Spawn-failed" class="headerlink" title="Error: Spawn failed"></a>Error: Spawn failed</h2><blockquote><p>fatal: unable to access ‘<a href="https://github.com/HelenZhangLP/helenzhanglp.github.io.git/&#39;">https://github.com/HelenZhangLP/helenzhanglp.github.io.git/&#39;</a>: Received HTTP code 502 from<br> proxy after CONNECT<br>FATAL Something’s wrong. Maybe you can find the solution here: <a href="https://hexo.io/docs/troubleshooting.html">https://hexo.io/docs/troubleshooting.html</a></p></blockquote><p><code>解决办法：</code><br>_config.yml 中 修改 deploy，https 链接换成 ssh<br>deploy:<br>  type: git<br>  repo: <a href="mailto:&#x67;&#x69;&#x74;&#64;&#103;&#105;&#116;&#x68;&#117;&#98;&#x2e;&#99;&#x6f;&#109;">&#x67;&#x69;&#x74;&#64;&#103;&#105;&#116;&#x68;&#117;&#98;&#x2e;&#99;&#x6f;&#109;</a>:<em>/</em>.github.io.git</p><h2 id="hexo-中加入-sequence-diagram，安装-hexo-filter-sequence-后不显示"><a href="#hexo-中加入-sequence-diagram，安装-hexo-filter-sequence-后不显示" class="headerlink" title="hexo 中加入 sequence diagram，安装 hexo-filter-sequence 后不显示"></a>hexo 中加入 sequence diagram，安装 hexo-filter-sequence 后不显示</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sequence-diagram.js:792 Uncaught ReferenceError: Raphael is not defined</span><br><span class="line">    at sequence-diagram.js:792</span><br><span class="line">    at sequence-diagram.js:1468</span><br><span class="line">(anonymous) @ sequence-diagram.js:792</span><br><span class="line">(anonymous) @ sequence-diagram.js:1468</span><br><span class="line">(index):93 Uncaught ReferenceError: Diagram is not defined</span><br><span class="line">    at (index):93</span><br><span class="line">(anonymous) @ (index):93</span><br></pre></td></tr></table></figure><p><code>解决办法：</code><br>临时在头部加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if(config.sequence) &#123;%&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/lodash.js/4.17.20/lodash.core.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/raphael/2.3.0/raphael.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>taro 坑系列</title>
      <link href="/2019/01/25/taro/"/>
      <url>/2019/01/25/taro/</url>
      
        <content type="html"><![CDATA[<h3 id="taro-坑"><a href="#taro-坑" class="headerlink" title="taro 坑"></a>taro 坑</h3><h4 id="坑-1"><a href="#坑-1" class="headerlink" title="坑 - 1"></a>坑 - 1</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/<span class="title class_">Users</span>/lipingzhang/<span class="title class_">Project</span><span class="comment">/**/</span>**<span class="regexp">/src/</span>pages/order/detail/index编译失败！</span><br><span class="line"><span class="title class_">TypeError</span> [<span class="variable constant_">ERR_INVALID_ARG_TYPE</span>]: <span class="title class_">The</span> <span class="string">&quot;path&quot;</span> argument must be <span class="keyword">of</span> type string</span><br><span class="line">    at assertPath (path.<span class="property">js</span>:<span class="number">28</span>:<span class="number">11</span>)</span><br><span class="line">    at <span class="title class_">Object</span>.<span class="property">relative</span> (path.<span class="property">js</span>:<span class="number">1265</span>:<span class="number">5</span>)</span><br><span class="line">    at pageDepComponents.<span class="property">forEach</span>.<span class="property">depComponent</span> (<span class="regexp">/Users/</span>lipingzhang/.<span class="property">nvm</span>/versions/node/v9<span class="number">.2</span><span class="number">.0</span>/lib/node_modules/@tarojs/cli/src/weapp.<span class="property">js</span>:<span class="number">1326</span>:<span class="number">64</span>)</span><br><span class="line">    at <span class="title class_">Array</span>.<span class="property">forEach</span> (&lt;anonymous&gt;)</span><br><span class="line">    at componentMap.<span class="property">forEach</span>.<span class="property">component</span> (<span class="regexp">/Users/</span>lipingzhang/.<span class="property">nvm</span>/versions/node/v9<span class="number">.2</span><span class="number">.0</span>/lib/node_modules/@tarojs/cli/src/weapp.<span class="property">js</span>:<span class="number">1320</span>:<span class="number">31</span>)</span><br><span class="line">    at <span class="title class_">Array</span>.<span class="property">forEach</span> (&lt;anonymous&gt;)</span><br><span class="line">    at realComponentsPathList.<span class="property">forEach</span>.<span class="property">component</span> (<span class="regexp">/Users/</span>lipingzhang/.<span class="property">nvm</span>/versions/node/v9<span class="number">.2</span><span class="number">.0</span>/lib/node_modules/@tarojs/cli/src/weapp.<span class="property">js</span>:<span class="number">1319</span>:<span class="number">24</span>)</span><br><span class="line">    at <span class="title class_">Array</span>.<span class="property">forEach</span> (&lt;anonymous&gt;)</span><br><span class="line">    at buildSinglePage (<span class="regexp">/Users/</span>jo32/.<span class="property">nvm</span>/versions/lipingzhang/v9<span class="number">.2</span><span class="number">.0</span>/lib/node_modules/@tarojs/cli/src/weapp.<span class="property">js</span>:<span class="number">1316</span>:<span class="number">30</span>)</span><br><span class="line">    at &lt;anonymous&gt;</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="for-坑-1-原因"><a href="#for-坑-1-原因" class="headerlink" title="for 坑 - 1 - 原因"></a>for 坑 - 1 - 原因</h4><blockquote><p>组件 render 方法返回 null 时会引起编译错误<br><code>/order/detail/index</code> 该页面使用了组件 atCountDown，该组件编译错误</p></blockquote><h3 id="for-坑-1-解决方法"><a href="#for-坑-1-解决方法" class="headerlink" title="for 坑 - 1 - 解决方法"></a>for 坑 - 1 - 解决方法</h3><p>** 升级 tarojs tarojs-cli 为 1.8 **</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* npm install @tarojs@1.8 *</span><br><span class="line">* npm install @tarojs-cli@1.8 *</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 框架 </tag>
            
            <tag> taro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim command</title>
      <link href="/2019/01/25/vim/"/>
      <url>/2019/01/25/vim/</url>
      
        <content type="html"><![CDATA[<p>/</p><h2 id="vim-中上移或下移整行"><a href="#vim-中上移或下移整行" class="headerlink" title="vim 中上移或下移整行"></a>vim 中上移或下移整行</h2><blockquote><p><code>esc</code> 模式下按 <code>shift+:</code> 输入 m+1 或 m-1</p></blockquote><h2 id="press-d-vim-下删除行"><a href="#press-d-vim-下删除行" class="headerlink" title="press d vim 下删除行"></a>press <code>d</code> vim 下删除行</h2><h2 id="命令模式下-set-number-显示行号"><a href="#命令模式下-set-number-显示行号" class="headerlink" title="命令模式下 set number 显示行号"></a>命令模式下 <code>set number</code> 显示行号</h2><h2 id="复制当前行-yy"><a href="#复制当前行-yy" class="headerlink" title="复制当前行 yy"></a>复制当前行 <code>yy</code></h2>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript this</title>
      <link href="/2018/07/11/JavaScript-this/"/>
      <url>/2018/07/11/JavaScript-this/</url>
      
        <content type="html"><![CDATA[<h2 id="函数与-this"><a href="#函数与-this" class="headerlink" title="函数与 this"></a>函数与 <code>this</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">public</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>&#x27;s age is <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>`</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;helen&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">12</span>,</span><br><span class="line">  <span class="attr">public</span>: public</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;audery&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">public</span>: public</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">public</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="title function_">public</span>())</span><br></pre></td></tr></table></figure><p>从代码的角度看，<code>this</code> 代表的是一个对象，具体代表的是执行调用 <code>public</code> 的当前对象，this 英文中的意思是<code>这个</code>，这个就是调用<code>public</code>方法的对象</p><p><strong><a href="https://helenzhanglp.github.io/2019/03/18/Javascript-%E5%87%BD%E6%95%B0-bind-call-apply/">可以使用’.’运算符、 <code>call,apply,bind</code> 来决定 <code>this</code> 的参考对象</a></strong></p><h2 id="全局对象-与-this"><a href="#全局对象-与-this" class="headerlink" title="全局对象 与 this"></a>全局对象 与 <code>this</code></h2><p>ES6 之前 JavaScript 并没有名称管理机制，如 Number/Math 等都是作为全局对象的特性存在。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// window 下的 Math</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">Math</span></span><br><span class="line"><span class="comment">// node 下取 Math</span></span><br><span class="line"><span class="variable language_">global</span>.<span class="property">Math</span></span><br></pre></td></tr></table></figure><blockquote><p>调用函数时，无法通过 ‘.’ 运算符，call/apply 等方式，指定 this，严格模式下，this 为 undefined。非严格模式下，全局作用域下调用 this 代表 window </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>; </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testThis</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)&#125; </span><br><span class="line"><span class="title function_">testThis</span>() <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>函数是 Function 构造函数的实例，如下 demo 可以创建 Function 实例取全局对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>(<span class="string">&#x27;return this&#x27;</span>)()</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * node 环境的返回值</span></span><br><span class="line"><span class="comment"> Object [global] &#123;</span></span><br><span class="line"><span class="comment">  global: [Circular *1],</span></span><br><span class="line"><span class="comment">  clearInterval: [Function: clearInterval],</span></span><br><span class="line"><span class="comment">  ...</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 浏览器 下的返回值</span></span><br><span class="line"><span class="comment">Window&#123;window: Window, self: Window, document: document, name: &quot;&quot;, location: Location,…&#125;*/</span></span><br></pre></td></tr></table></figure><h2 id="箭头函数与-this"><a href="#箭头函数与-this" class="headerlink" title="箭头函数与 this"></a>箭头函数与 <code>this</code></h2><p>箭头函数可以看成是函数字面量的语法糖。<font color="#f33">箭头函数在 this 方面的解析与函数字面量不同</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">x</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">fnArrow</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">fn</span>: fn,</span><br><span class="line">  <span class="attr">fnArrow</span>: fnArrow</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">fn</span>()) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">fnArrow</span>()) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><blockquote><p>字面量函数的 this，由调用者决定。<font color="#f33">箭头函数的 this 由词法环境决定，即箭头函数在哪个环境中定义的，则 this 代表哪个环境。this 具有继承性。使用 <code>obj.fnArrow.call(obj)</code>也无法改变 this。箭头函数中 this 一旦绑定，就无法改变。</font></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">x</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> _this = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 之前，使用变量继承 this</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(_this.<span class="property">x</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 之后使用箭头函数继承 this</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">fnArrow</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">fn</span>: fn,</span><br><span class="line">  <span class="attr">fnArrow</span>: fnArrow</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">fn</span>()) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">fnArrow</span>()) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>坑-html</title>
      <link href="/2018/06/26/%E5%9D%91-html/"/>
      <url>/2018/06/26/%E5%9D%91-html/</url>
      
        <content type="html"><![CDATA[<h2 id="web-页面生命周期"><a href="#web-页面生命周期" class="headerlink" title="web 页面生命周期"></a>web 页面生命周期</h2><h3 id="DOMContentLoaded"><a href="#DOMContentLoaded" class="headerlink" title="DOMContentLoaded"></a>DOMContentLoaded</h3><p>纯 html 被完全加载解析时，DOM 加载完毕，样式表、图片等其它资源可以未加载时，触发 DOMContentLoaded</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, ready)</span><br></pre></td></tr></table></figure><h3 id="load"><a href="#load" class="headerlink" title="load"></a>load</h3><p>浏览器加载了所有的资源，包括图像、样式表等</p><h3 id="beforeunload-unload"><a href="#beforeunload-unload" class="headerlink" title="beforeunload/unload"></a>beforeunload/unload</h3><p>离开当前页面时触发</p><h2 id="当前页不需要点击跳转，其它页面链接至指定位置"><a href="#当前页不需要点击跳转，其它页面链接至指定位置" class="headerlink" title="当前页不需要点击跳转，其它页面链接至指定位置"></a>当前页不需要点击跳转，其它页面链接至指定位置</h2><p><code>&lt;a id=&quot;factoryPattern&quot; href=&quot;#factoryPattern&quot;&gt;工厂模式——&lt;font color=&quot;#f99&quot;&gt;解决复用&lt;/font&gt;&lt;/a&gt;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Html </tag>
            
            <tag> 坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 变量</title>
      <link href="/2018/05/29/JavaScript-%E5%8F%98%E9%87%8F/"/>
      <url>/2018/05/29/JavaScript-%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript-变量"><a href="#JavaScript-变量" class="headerlink" title="JavaScript 变量"></a>JavaScript 变量</h2><blockquote><p>JavaScript 通过 var,let,const 关键字定义变量</p></blockquote><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>在不需要重新赋值的特殊变量，指向一个固定的值时使用 const 声明变量，如此可避免代码不必要的变更，且为 JavaScript 引擎的性能优化提供便利。</p><blockquote><p>通过 const 定义的变量必须赋初值，且不可变，只能赋值一次。可以修改 const 声明的引用类型变量，但不能重写。</p></blockquote><h4 id="Uncaught-SyntaxError-Missing-initializer-in-const-declaration"><a href="#Uncaught-SyntaxError-Missing-initializer-in-const-declaration" class="headerlink" title="Uncaught SyntaxError: Missing initializer in const declaration"></a><font color="#a33">Uncaught SyntaxError: Missing initializer in const declaration</font></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">MAX_TIMES</span></span><br></pre></td></tr></table></figure><blockquote><p><code>const</code> 声明中缺失初值。<strong>也就是说使用 <code>const</code> 声明变量时必须赋初值。</strong></p></blockquote><h4 id="Uncaught-TypeError-Assignment-to-constant-variable"><a href="#Uncaught-TypeError-Assignment-to-constant-variable" class="headerlink" title="Uncaught TypeError: Assignment to constant variable."></a><font color="#a33">Uncaught TypeError: Assignment to constant variable.</font></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">MAX_TIMES</span> = <span class="number">3</span></span><br><span class="line"><span class="variable constant_">MAX_TIMES</span> = <span class="number">5</span></span><br></pre></td></tr></table></figure><blockquote><p>分配给了常量值，即通过 <code>const</code> 声明的变量值不可以修改</p></blockquote><h4 id="常量为引用类型"><a href="#常量为引用类型" class="headerlink" title="常量为引用类型"></a>常量为引用类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">obj.<span class="property">att</span> = <span class="string">&#x27;attribute&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = []</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj, arr) <span class="comment">// &#123;att: &#x27;attribute&#x27;&#125;att: &quot;attribute&quot;[[Prototype]]: Object [1]</span></span><br></pre></td></tr></table></figure><h4 id="Uncaught-ReferenceError-A-is-not-defined访问块级作用域"><a href="#Uncaught-ReferenceError-A-is-not-defined访问块级作用域" class="headerlink" title="Uncaught ReferenceError: A is not defined访问块级作用域"></a><font color="#a33">Uncaught ReferenceError: A is not defined</b>访问块级作用域</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">const</span> A = <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">var</span> B = <span class="string">&#x27;B&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(A,B)</span><br></pre></td></tr></table></figure><h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><blockquote><p>通过 var 定义的变量，可变，且可多次修改赋值。仅在距离最近的函数内或全局作用域内注册。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable language_">global</span> = <span class="string">&#x27;global&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">globalFn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> fn = <span class="string">&#x27;fn&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> block = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn, block) <span class="comment">// fn block</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">globalFn</span>()</span><br><span class="line"><span class="comment">// console.log(global, fn, block)</span></span><br></pre></td></tr></table></figure><blockquote><p><font color="#a33">Uncaught ReferenceError: fn is not defined</font> 全局不能访问函数作用域内部变量。<br>函数可以访问块级作用域内部变量 </p></blockquote><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><blockquote><p>通过 let 定义的变量，可变，同样可多次修改赋值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable language_">global</span> = <span class="string">&#x27;global&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">globalFn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="string">&#x27;fn&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> block = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">global</span>, fn, block) <span class="comment">// Uncaught ReferenceError: block is not defined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">globalFn</span>()</span><br><span class="line"><span class="comment">// console.log(global, fn, block) // Uncaught ReferenceError: fn is not defined</span></span><br></pre></td></tr></table></figure><blockquote><p><font color="#a33">Uncaught ReferenceError: block is not defined</font> 函数<strong>不可以</strong>访问块级作用域内部变量 </p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><img  src=http://www.plantuml.com/plantuml/svg/SoWkIImgoStCIybDBE3IKdZQF-DbU__JnHkUpUZZqj9IA4iiubBGqW99h0VAFMjOpgK0ucj5ArUcvkJabwSNfQRcnIhO9Db1LDZe9zb1TSoT_dpNyYTxvpoVikBf_FbmVIc9HTb1gIbWFKzsz3vTE-Ffd1LWRK1DEQabrBOFGn-AXSdvUSKuhKHtAkKsEgG2GneIsW00>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP 协议</title>
      <link href="/2018/05/23/HTTP/"/>
      <url>/2018/05/23/HTTP/</url>
      
        <content type="html"><![CDATA[<pre class="mermaid"> mindmap 请求  请求行   请求方法    GET    POST    DELETE    PUT    TRACE    OPTIONS   请求路径   协议  请求头  请求主体信息  请求与主体信息间的空行</pre><h2 id="Idempotent-Method"><a href="#Idempotent-Method" class="headerlink" title="Idempotent Method"></a>Idempotent Method</h2><p>A request method is considered “idempotent”<br>一个请求方法被认为<strong>幂等</strong><br>as the effect for a single such request<br>作为单个此类请求的效果<br>幂等（idempotent）：同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。幂等方法不应该有副作用。<br>GET, HEAD, PUT, DELETE 等方法都是幂等的，所有 safe 方法都是幂等的。</p><h2 id="HTTP-HyperText-Transfer-Protocol"><a href="#HTTP-HyperText-Transfer-Protocol" class="headerlink" title="HTTP(HyperText Transfer Protocol)"></a>HTTP(HyperText Transfer Protocol)</h2><blockquote><p>HTTP(HyperText Transfer Protocol) 超文本传输<strong>协议</strong>，协议规定了浏览器与服务器之间通信的规则。<br>  H - Hypertext 超文本，T - Transfer 传输，P - Protocol 协议<br>  用在计算机世界里的协议，用于<font color="orange">两点(请求方和响应方)</font>之间<font color="skyblue"><strong>传输</strong>文字、图片、音频、视频等超文本数据</font>的<strong>约定和规范(protocol)</strong><br>  HTTP 是一个应用层协议，基于 TCP/IP，在网络的任意两点（请求方和应答方）间传输超文本（图片、文字、视频、音频等）<br>  HTTP 协议中的两个端点<strong>请求方</strong>和<strong>应答方</strong><br>  请求方 —— web 浏览器 user agent<br>  应答方 —— web 服务器 存储着网络的静态与动态资源<br>  HTTP 需要 TCP/IP 实现寻址、路由和可靠的数据传输<br>  HTTP 需要 DNS 协议实现对互联网上主机的定位、查找<br>  HTTP over TCP/IP<br>  HTTP over SSL/TLS<br>  HTTP 有多个版本，目前应用最广的是 HTTP/1.1，但 HTTP/1.1 性能难以满足高流量网站，于是推出了 HTTP/2 HTTP/3</p></blockquote><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">请求行 POST /S?ie=utf-8 HTTP/1.2</span><br><span class="line">请求头 HOST: babycoding.asia</span><br><span class="line">      Cookie: name=mouses</span><br><span class="line">      Content-type: application/x-www-form-urlencoded</span><br><span class="line">      user-Agent: chrome 83</span><br><span class="line">空行</span><br><span class="line">请求体 username=admin&amp;password=123456</span><br></pre></td></tr></table></figure><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">响应行 HTTP/1.1 200 OK</span><br><span class="line">响应头 Content-type: text/html;charset=utf-8</span><br><span class="line">      Content-length: 2048</span><br><span class="line">      Content-encoding: gzip</span><br><span class="line">空行</span><br><span class="line">体  &lt;html&gt; </span><br><span class="line">      &lt;body&gt;</span><br><span class="line">        ...</span><br><span class="line">      &lt;/body&gt;</span><br><span class="line">    &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>HTTP 响应状态码用来表明特定 HTTP 请求是否成功完成。分五类：</p><ul><li>信息响应（100-199）</li><li>成功响应（200-299）</li><li>重定向消息</li><li>客户端错误响应</li><li>服务端错误响应</li></ul><h2 id="http-请求状态码"><a href="#http-请求状态码" class="headerlink" title="http 请求状态码"></a>http 请求状态码</h2><table><thead><tr><th>状态码</th><th>描述</th><th>更多</th></tr></thead><tbody><tr><td>200 OK</td><td>请求成功</td><td>默认情况下响应可以缓存</td></tr><tr><td>201 Created</td><td>成功的应答状态码，请求已被成功处理且创建了新资源</td><td>常规使用场景是 <code>POST</code> 请求返回值</td></tr><tr><td>202 Accepted</td><td>服务端收到了请求信息，但尚未处理</td><td>将请求交给另外一个服务器或进行处理，<strong>对请求进行批处理</strong></td></tr><tr><td>203 Non-Authoritative Infomation</td><td>服务器成功处理了请求，但实体头部元信息不是在原始服务器上有效的确定集合，是来自本地或第三方拷贝。当前信息是原始版本的子集或超集。</td><td>此状态码不是必须的，而且只有在响应不使用此状态码便会返回 200 ok 的情况下才合适</td></tr></tbody></table><h3 id="http-请求状态码-200"><a href="#http-请求状态码-200" class="headerlink" title="http 请求状态码 200"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/200">http 请求状态码 200</a></h3><blockquote><p>请求成功，默认状态下 200 响应可以被缓存</p></blockquote><h4 id="不同请求方式，请求成功的意义不同"><a href="#不同请求方式，请求成功的意义不同" class="headerlink" title="不同请求方式，请求成功的意义不同"></a>不同请求方式，请求成功的意义不同</h4><table><thead><tr><th>请求方式</th><th>意义</th></tr></thead><tbody><tr><td>GET</td><td>已经取得资源，并将资源添加到响应的消息体中</td></tr><tr><td>POST</td><td>响应的消息体中包含此次请求的结果</td></tr></tbody></table><blockquote><ul><li>HEAD: 响应的消息体为头部信息。</li><li>TRACE: 响应的消息体中包含服务器接收到的请求信息。</li><li>PUT 和 DELETE 的请求成功通常并不是响应 200 OK 的状态码，而是 204 No Content 表示无内容(或者 201 Created表示一个资源首次被创建成功)。</li></ul></blockquote><h1 id="http-请求状态码-206"><a href="#http-请求状态码-206" class="headerlink" title="http 请求状态码 206"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/206">http 请求状态码 206</a></h1><blockquote><p>HTTP 206 Partial Content 成功状态响应代码表示请求已成功，并且主体包含所请求的数据区间，该数据区间是在请求的 Range 首部指定的。</p></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Response Headers</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Encoding: identity;q=1, *;q=0</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Host: cktvideo-1252817906.cos.ap-guangzhou.myqcloud.com</span><br><span class="line">If-Range: &quot;640f0886f386c9c253a95c5d1c01ca16-163&quot;</span><br><span class="line">**`Range: bytes=9895936-170855393`**</span><br><span class="line">Referer: https://cktvideo-1252817906.cos.ap-guangzhou.myqcloud.com/gaokeyan1.mp4</span><br><span class="line">User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>如果只包含一个数据区间，那么整个响应的 Content-Type 首部的值为所请求的文件的类型，同时包含 Content-Range 首部。</p></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Response Headers(10)</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 170855394</span><br><span class="line">** Content-Range: bytes 0-170855393/170855394</span><br><span class="line">** Content-Type: video/mp4</span><br><span class="line">Date: Wed, 12 Jun 2019 02:34:48 GMT</span><br><span class="line">ETag: &quot;640f0886f386c9c253a95c5d1c01ca16-163&quot;</span><br><span class="line">Last-Modified: Sun, 30 Dec 2018 17:44:16 GMT</span><br><span class="line">Server: tencent-cos</span><br><span class="line">x-cos-request-id: NWQwMDY0YzhfMWNiMjk0MGFfNThlZl83YTg5NWY=</span><br></pre></td></tr></table></figure></blockquote><h1 id="http-请求状态响应码-304"><a href="#http-请求状态响应码-304" class="headerlink" title="http 请求状态响应码 304"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/304">http 请求状态响应码 304</a></h1><blockquote><p>无需再次传输请求的内容，也就是说可以使用缓存的内容。这通常是在一些安全的方法（safe），例如 GET 或 HEAD 或 在请求中附带了头部信息： If-None-Match 或 If-Modified-Since。</p></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Host: cktvideo-1252817906.cos.ap-guangzhou.myqcloud.com</span><br><span class="line">** If-Modified-Since: Sun, 30 Dec 2018 17:44:16 GMT</span><br><span class="line">** If-None-Match: &quot;640f0886f386c9c253a95c5d1c01ca16-163&quot;</span><br><span class="line">Range: bytes=0-1048575</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1</span><br></pre></td></tr></table></figure></blockquote><h1 id="http-请求响应码-401"><a href="#http-请求响应码-401" class="headerlink" title="http 请求响应码 401"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/401">http 请求响应码 401</a></h1><blockquote><p>状态码 401 Unauthorized(未授权)代表客户端错误，指的是由于缺乏目标资源要求的身份验证凭证，发送的请求未得到满足。 这个状态码会与 WWW-Authenticate 首部一起发送，其中包含有如何进行验证的信息。 这个状态类似于 403， 但是在该情况下，依然可以进行身份验证。</p></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Request URL: https://api.github.com/user</span><br><span class="line">Request Method: GET</span><br><span class="line">Status Code: 401 Unauthorized</span><br><span class="line">Remote Address: 54.169.195.247:443</span><br><span class="line">Referrer Policy: no-referrer-when-downgrade</span><br></pre></td></tr></table></figure></blockquote><h1 id="http-请求响应码-404"><a href="#http-请求响应码-404" class="headerlink" title="http 请求响应码 404"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/404">http 请求响应码 404</a></h1><blockquote><p>状态码 404 Not Found 代表客户端错误，指的是服务器端无法找到所请求的资源。返回该响应的链接通常称为坏链（broken link）或死链（dead link），它们会导向链接出错处理(link rot)页面。 404 状态码并不能说明请求的资源是临时还是永久丢失。如果服务器知道该资源是永久丢失，那么应该返回 410 (Gone) 而不是 404 。</p></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Request URL: https://api.github.com/repos/helenzhanglp/blog/issues?client_id=8e7e6dda81936172806e&amp;client_secret=97f71b6bbdf731bc650ec39212061882b8f36e71&amp;labels=Gitalk,1863e4a8c0596ce3dfb3ee2f0c838431&amp;t=1560407734937</span><br><span class="line">Request Method: GET</span><br><span class="line">Status Code: 404 Not Found</span><br><span class="line">Remote Address: 54.169.195.247:443</span><br><span class="line">Referrer Policy: no-referrer-when-downgrade</span><br></pre></td></tr></table></figure></blockquote><h1 id="http-请求响应码-500"><a href="#http-请求响应码-500" class="headerlink" title="http 请求响应码 500"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/500">http 请求响应码 500</a></h1><blockquote><p>服务器内部错误，是一个通用的全方位响应，有可能是权限或数据库链接错误。设置代理了，也会返回 500 错误</p></blockquote><h2 id="DNS-Domain-Name-System"><a href="#DNS-Domain-Name-System" class="headerlink" title="DNS(Domain Name System)"></a>DNS(Domain Name System)</h2><blockquote><p>DNS(Domain Name System) 域名系统<br>  用有意义的名字来作为 IP 地址的等价替代</p></blockquote><h3 id="URI-Uniform-Resource-Identifier"><a href="#URI-Uniform-Resource-Identifier" class="headerlink" title="URI(Uniform Resource Identifier)"></a>URI(Uniform Resource Identifier)</h3><p>URI(Uniform Resource Identifier) 统一资源标识符，可以唯一地标记互联网上的资源<br>URI 三个基本构成：</p><ol><li> 协议名 访问该资源应当使用的协议 http</li><li> 主机名 即互联网上主机的标记，可以是域名(Domain Name)或IP地址</li><li> 路径 资源在主机上的位置 “/” 分隔多目录</li></ol><h3 id="HTML（HyperText-Markup-Language）"><a href="#HTML（HyperText-Markup-Language）" class="headerlink" title="HTML（HyperText Markup Language）"></a>HTML（HyperText Markup Language）</h3><p>HTML 运行在浏览器，由浏览器解析<br>HTML 超文本标语言，描述超文本文档<br>HTML 两个主要的标准 HTML4 和 HTML5<br>HTML 广义上是指 HTML/JavaScript/CSS等前端技术的组合，能够实现比传统静态更丰富的动态页面</p><h2 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h2><h3 id="HTTP-PUT"><a href="#HTTP-PUT" class="headerlink" title="HTTP PUT"></a>HTTP PUT</h3><p>PUT 创建一个新的资源或用请求的有效载荷替换目标资源的表示。<br>调用一次与连续调用多次效果是相同的。<br><code>响应</code> 如果目标资源没有当前的表示，并且 PUT 方法成功创建了资源，那么源服务器必须返回 201 Created 通知用户代理，资源已创建<br>如果目标资源已存在，并且依照请求中封装的表现形式成功进行了更新，那么，源服务器必须返回 200 OK 或 204 No Content 表示请求成功完成</p><h3 id="HTTP-DELETE"><a href="#HTTP-DELETE" class="headerlink" title="HTTP DELETE"></a>HTTP DELETE</h3><p>HTTP DELETE 方法用于删除指定资源<br>删除成功的状态码：</p><ul><li>状态码 202 Accept 请求操作可能会成功执行，但尚未开始执行；</li><li>状态码 204 No Content 操作已执行，但没有进一步相关信息；</li><li>状态码 200 OK 操作已执行，并且响应中提供了相关状态的描述信息；</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 通信 </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Directory</title>
      <link href="/2018/05/23/JavaScript-0-Directory/"/>
      <url>/2018/05/23/JavaScript-0-Directory/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p><img src="/images/jsDataTypes.jpg" alt="alt"><br>与《JavaScript高级程序设计》不同，这张图中没有 null。我这边先就图中的信息作一个解析，图中，将数据类型分为值类型与引用类型。</p><h3 id="JavaScript-数字类型"><a href="#JavaScript-数字类型" class="headerlink" title="JavaScript-数字类型"></a><a href="/2012/01/08/JavaScript-1-%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B/">JavaScript-数字类型</a></h3><h3 id="JavaScript-字符串类型"><a href="#JavaScript-字符串类型" class="headerlink" title="JavaScript-字符串类型"></a><a href="/2012/01/08/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%88N%EF%BC%89%E4%BD%BF%E7%94%A8Promise%EF%BC%8C%E5%91%8A%E5%88%AB%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/#%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%9A%E5%9B%9E%E8%B0%83%E5%9C%B0%E5%9F%9F">JavaScript-字符串类型</a></h3><h3 id="JavaScript-HTTP"><a href="#JavaScript-HTTP" class="headerlink" title="JavaScript-HTTP"></a><a href="/2018/05/23/http/">JavaScript-HTTP</a></h3><h3 id="JavaScript-关于异步编程"><a href="#JavaScript-关于异步编程" class="headerlink" title="JavaScript-关于异步编程"></a><a href="/2018/05/23/JavaScript-%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/">JavaScript-关于异步编程</a></h3><h3 id="JavaScript-Ajax"><a href="#JavaScript-Ajax" class="headerlink" title="JavaScript-Ajax"></a><a href="/2016/07/24/JavaScript-Ajax/">JavaScript-Ajax</a></h3><h3 id="JavaScript-Promise"><a href="#JavaScript-Promise" class="headerlink" title="JavaScript-Promise"></a><a href="/2017/02/14/JavaScript-Promise/">JavaScript-Promise</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/2018/05/21/Webpack/"/>
      <url>/2018/05/21/Webpack/</url>
      
        <content type="html"><![CDATA[<pre class="mermaid"> timeline title History of webpack 2016 : v1.14.0 2024 : v5.90.3</pre><p>webpack 建议本地安装，可以在引入重大更新（breaking change）版本时，更容易分别升级项目。通常会通过运行一个或多个 <code>npm scripts</code> 以在本地 <code>node_modules</code> 目录中查找安装的 webpack。</p><p><font color="#f33">npm v5.2.0 或更高版本，要运行 npx webapck 执行</font></p><h2 id="安装-wepack"><a href="#安装-wepack" class="headerlink" title="安装 wepack"></a>安装 wepack</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack webpack-cli webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure><ul><li>webpack <code>webpack</code> 的核心文件</li><li>webpack-cli <code>webpack-cli</code> webpack 脚本架，命令行工具，用于通过命令行使用 webpack 进行构建和打包前端项目</li><li>webpack-dev-server dev 开发环境进行项目实时预览的服务器</li></ul><h3 id="创建测试文件"><a href="#创建测试文件" class="headerlink" title="创建测试文件"></a>创建测试文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── src</span><br><span class="line">|——├── main.js</span><br><span class="line">|—— index.html</span><br><span class="line">└── package.json // 包名：不能用 `webapck`</span><br></pre></td></tr></table></figure><h3 id="打包测试"><a href="#打包测试" class="headerlink" title="打包测试"></a>打包测试</h3><blockquote><p>Node 8.2/npm 5.2.0 及以上版本提供的 npx 命令，可以运行在最初安装的 webpack 包中的 webpack 二进制文件（即 ./node_modules/.bin/webpack）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx webapck main.js --mode=development</span><br></pre></td></tr></table></figure><p>生产环境，打包且压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx webapck main.js --mode=production</span><br></pre></td></tr></table></figure><h2 id="配置-webpack"><a href="#配置-webpack" class="headerlink" title="配置 webpack"></a>配置 webpack</h2><h3 id="mode-模式"><a href="#mode-模式" class="headerlink" title="mode(模式)"></a>mode(模式)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span> <span class="comment">// &#x27;production&#x27; 开发模式/生产模式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="entry-入口"><a href="#entry-入口" class="headerlink" title="entry(入口)"></a>entry(入口)</h3><blockquote><p>webpack 中有多种方式定义 entry 方式</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node 环境运行，module.exports 属于 commonjs 规范</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>, <span class="comment">// 打包入口文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="output-输出"><a href="#output-输出" class="headerlink" title="output(输出)"></a>output(输出)</h3><blockquote><p>告知 webpack 向硬盘写入编译文件的具体信息，<span class='custom-box custom-box-933'>只能有一个 output 配置</span></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  ...,</span><br><span class="line">  <span class="attr">output</span>: &#123; <span class="comment">// 打包输出配置</span></span><br><span class="line">      <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>), <span class="comment">// 打包输出路径</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;/assets/js/bundle.js&#x27;</span>, <span class="comment">// 指定打包的 js 文件输出的路径及文件名</span></span><br><span class="line">      <span class="attr">environment</span>: &#123; <span class="comment">// arrowFunction?, asyncFunction?, bigIntLiteral?, const?, destructuring?, dynamicImport?, dynamicImportInWorker?, forOf?, globalThis?, module?, optionalChaining?, templateLiteral? </span></span><br><span class="line">          <span class="attr">arrowFunction</span>: <span class="literal">false</span> <span class="comment">// 打包不允许使用箭头函数，兼容低版本浏览器</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 删除 dist 目录重新打包，</span></span><br><span class="line"><span class="comment">       * webpack 5.20.0+ 以上版本新增</span></span><br><span class="line"><span class="comment">       * 5.20.0 以下版本，可采用 CleanWebpackPlugin 插件实现</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * [name] 设置后为此 chunk 的名称，否则使用 chunk 的 ID</span></span><br><span class="line"><span class="comment">       * ...(https://www.webpackjs.com/configuration/output/#template-strings)</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="attr">chunkFilename</span>: <span class="string">&#x27;static/js/[name].chunk.js&#x27;</span>,</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * [hash] 模块的 hash 值，hash 值长度 8 位</span></span><br><span class="line"><span class="comment">       * [query] 带前缀 ? 的 query</span></span><br><span class="line"><span class="comment">       * [ext] 带前缀 . 的扩展名</span></span><br><span class="line"><span class="comment">       * ...(https://www.webpackjs.com/configuration/output/#template-strings)</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="attr">assetModuleFilename</span>: <span class="string">&#x27;/static/media/[hash:8][ext][query]&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h3><p>  配置本地运行环境</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开发模式下，提供虚拟服务器，用于项目开发和测试</span></span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">  <span class="attr">contentBase</span>: <span class="string">&quot;./dist&quot;</span> <span class="comment">// boolean/string/array 服务器资源根目录</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HRM-——-webpack-设置热更新"><a href="#HRM-——-webpack-设置热更新" class="headerlink" title="HRM —— webpack 设置热更新"></a>HRM —— webpack 设置热更新</h4><p>模块热替换（HRM - hot module replacement），在程序运行过程中，替换、添加或删除模块，无需加载整个页面。<br>启动模块热替换功能，在构建失败时不刷新页面作为回退。</p><blockquote><p>热更新 HRM 配置方法一</p></blockquote><ol><li>package.json 配置<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server --mode development --hot&quot;</span></span><br></pre></td></tr></table></figure></li><li>入口文件增加<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">module</span>.<span class="property">hot</span>) &#123;</span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(file)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>热更新 HRM —— 第二种方式</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">      <span class="attr">hot</span>: <span class="literal">true</span> <span class="comment">// 启动热更新</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="keyword">new</span> webpack.<span class="title class_">HotModuleReplacementPlugin</span>()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>热更新——第三种方式<br><font color="red"><code>Cannot find module &#39;webpack-cli/bin/config-yargs&#39;</code></font><br><span class='custom-box custom-box-393'>降低 webpack-cli@3 使用 webpack-dev-server</span></p></blockquote><p>以上三种方式都没有办法解决，多次修改，浏览器自动刷新修改。<span class='custom-box custom-box-933'>都是需要重新启动 webpack</span></p><p><font color='red'>TS2339: Property ‘hot’ does not exist on type ‘NodeModule’. eslint 语法检测问题导致</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> ((<span class="variable language_">module</span> <span class="keyword">as</span> any).<span class="property">hot</span>) &#123;</span><br><span class="line">    (<span class="variable language_">module</span> <span class="keyword">as</span> any).<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="string">&#x27;./es6&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    (<span class="variable language_">module</span> <span class="keyword">as</span> any).<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="string">&#x27;./hrm&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">hot</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>ERROR in [eslint] 13:13  error  Parsing error: Unexpected token as. eslint 语法检测问题导致</font></p><blockquote><p>安装依赖包</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i @typescript-eslint/parser @typescript-eslint/eslint-plugin -D</span><br></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// .eslintrc.js</span></span><br><span class="line">  <span class="comment">// 使用 typesciprt 解析器</span></span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">parser</span>: <span class="string">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><p>webpack 需要处理的模块间的依赖关系包括：</p><ul><li>ES2015 import 语句</li><li>CommonJS require() 语句</li><li>AMD define 和 require 语句</li><li>css/sass/less 文件中的 @import 语句。</li><li>stylesheet url(…) 或者 HTML &lt;img src=…&gt; 文件中的图片链接。</li></ul><h4 id="module-rules"><a href="#module-rules" class="headerlink" title="module.rules"></a>module.rules</h4><p>创建模块时，匹配请求的规则数组。这些规则能够修改模块的创建方式。<span class='custom-box custom-box-393'>这些规则能够对模块应用 loader</span><br><font color='red'>注意： rule.test 值是正则，不是字符串正则</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  ...,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123; <span class="comment">// 处理 js</span></span><br><span class="line">        <span class="string">&quot;test&quot;</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">        <span class="string">&quot;use&quot;</span>: [...] <span class="comment">// 使用哪些 loader 进行编译</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="comment">// 处理 css</span></span><br><span class="line">        <span class="string">&quot;test&quot;</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="string">&quot;use&quot;</span>:[...]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="comment">// 处理图片</span></span><br><span class="line">        <span class="attr">test</span>: [<span class="regexp">/\.bmp$/</span>, <span class="regexp">/\.gif$/</span>, <span class="regexp">/\.jpe?g$/</span>, <span class="regexp">/\.png$/</span>],</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;asset&#x27;</span>, <span class="comment">// 用于匹配模块</span></span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123; <span class="comment">// 当加哉的图片资源大于最大限制数时，图片转换为 base64</span></span><br><span class="line">            <span class="attr">maxSize</span>: imageInlineSizeLimit,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&#x27;assets/images/[hash:10][ext][query]&#x27;</span> <span class="comment">// 图片资源输出目录</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="loader-转换器"><a href="#loader-转换器" class="headerlink" title="loader(转换器)"></a>loader(转换器)</h4><p>通过 loader 可以使 webpack 支持多种语言和预处理器语法编写的模块<br>loader 向 webapck 描述了如何处理非原生<strong>模块</strong>，并将相关依赖引入到 bundles 文件中。</p><blockquote><p>样式转换器</p></blockquote><ul><li>tyle-loader 将 css 通过创建 style 标签插入 DOM</li><li>css-loader 对 @import 和 url() 进行处理，将 css 资源编译成 commonjs 的模块到 js 中</li><li>stylus-loader / less-loader / sass-loader 都是 css 预处理器，任选其一，scss 稍有不同，以 sass 为例<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * style-loader 将 css 插入 DOM</span></span><br><span class="line"><span class="comment">         * css-loader 对 <span class="doctag">@import</span> 和 url() 进行处理</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/</span>,</span><br><span class="line">      <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;sass-loader&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><font color="red">Module not found: Error: Can’t resolve ‘style-loader!css-loader’</font><br><span class='custom-box custom-box-393'>加载器解析顺序从右到左，从下到上</span></li></ul><blockquote><p>关于 —— bable 通过 loader 实现 import 导入任何类型模块，如 .jsx/.css/.less 等</p></blockquote><p>  <code> npm i @babel/core @babel/preset-env @babel/preset-react babel-loader -D</code><br>    * @babel/core 是调用 babel 的 API 进行转码的包<br>    * babel-loader 执行转义的核心包<br>    * babel-preset-env 一个新的 preset，根据配置目标运行环境启用需要的 babel 插件<br>    * babel-preset-react 用于转义 react 的 JSX 语法</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="comment">// 配置模块规则 —— 配置 loader</span></span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">      <span class="attr">use</span>: [</span><br><span class="line">        <span class="string">&#x27;style-loader&#x27;</span>, <span class="comment">//把 css 插入 Dom</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// webpack 打包时识别后缀为 .js|.jsx 的文件，并用 babel-loader 去转换</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.(js|jsx)$/</span>, <span class="comment">//告诉 webpack 需要处理的对象</span></span><br><span class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      <span class="attr">use</span>: [ <span class="comment">// 告诉 webpack 用什么来处理，loader 解析方式是从右到左（从后到前）应用</span></span><br><span class="line">        &#123; <span class="comment">// babel 配置 </span></span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>, <span class="comment">// 加截器——ES2015+ 代码并将其转换为 ES5</span></span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="comment">// 设定预置环境</span></span><br><span class="line">              <span class="attr">presets</span>: [</span><br><span class="line">                  <span class="comment">// 编译环境插件</span></span><br><span class="line">                  [<span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">                      <span class="comment">// 配置</span></span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="comment">// 指定浏览器运行版本</span></span><br><span class="line">                          <span class="string">&quot;targets&quot;</span>: &#123;</span><br><span class="line">                              <span class="string">&quot;chrome&quot;</span>: <span class="string">&#x27;86&#x27;</span>,</span><br><span class="line">                              <span class="string">&quot;ie&quot;</span>: <span class="string">&quot;11&quot;</span></span><br><span class="line">                          &#125;,</span><br><span class="line">                          <span class="string">&quot;corejs&quot;</span>: <span class="string">&quot;3&quot;</span>, <span class="comment">// useBuiltIns 为 false 时，corejs 不生效</span></span><br><span class="line">                          <span class="comment">// corejs 使用 “usage&quot; 按需加载</span></span><br><span class="line">                          <span class="string">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;usage&quot;</span></span><br><span class="line">                      &#125;</span><br><span class="line">                  ]</span><br><span class="line">              ]</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  配置相应内容，告诉 babel-loader 使用 ES6 和 JSX 插件<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [<span class="string">&#x27;env&#x27;</span>, <span class="string">&#x27;react&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="plugins-插件"><a href="#plugins-插件" class="headerlink" title="plugins(插件)"></a>plugins(插件)</h3><h4 id="clean-webpack-plugin"><a href="#clean-webpack-plugin" class="headerlink" title="clean-webpack-plugin"></a>clean-webpack-plugin</h4><p><span class='custom-box custom-box-933'>webapck4</span> clean-webpack-plugin 删除 build 或 dist 下的文件，生新的文件<br><a href="https://www.npmjs.com/package/clean-webpack-plugin"><font color="red">使用方式不同版本各有不同，建议参考文档</font></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>();</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><span class='custom-box custom-box-933'>注意：webpack5 不需要使用 clean-wepack-plugin 插件，只需要做如下配置即可</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;asset/js/bundle.js&#x27;</span>, <span class="comment">// 生成的 js 文件的存储位置</span></span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>  <span class="comment">// 删除 dist 重新打包</span></span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="fork-ts-checker-webpack-plugin"><a href="#fork-ts-checker-webpack-plugin" class="headerlink" title="fork-ts-checker-webpack-plugin"></a>fork-ts-checker-webpack-plugin</h4><p>Webapck plugin that runs TypeScript type checker on a separate process.<br>独立进程上运行 TypeScript type checker 的 webpack 插件。</p><h3 id="Optimization-优化"><a href="#Optimization-优化" class="headerlink" title="Optimization 优化"></a>Optimization 优化</h3><p>根据选择的 <code>mode</code> 执行不同的优化，所有优化必须手动配置和重写。</p><h4 id="optimization-minimizer"><a href="#optimization-minimizer" class="headerlink" title="optimization.minimizer"></a>optimization.minimizer</h4><p>通过提供一个或多个定制过的 TerserPlugin，覆盖默认压缩工具（minimizer）</p><h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><h3 id="Cannot-find-module-‘webpack-cli-bin-config-yargs’"><a href="#Cannot-find-module-‘webpack-cli-bin-config-yargs’" class="headerlink" title="Cannot find module ‘webpack-cli/bin/config-yargs’"></a>Cannot find module ‘webpack-cli/bin/config-yargs’</h3><p>code: ‘MODULE_NOT_FOUND’</p><blockquote><p>webpack-dev-server –open –mode development<br>“webpack-cli”: “^4.6.0”</p></blockquote><p><font color="red"><strong>降版本，将 webpack-cli 版本降至 3</strong></font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i webpack-cli@3 -D --force</span><br></pre></td></tr></table></figure><h3 id="解析-resolve"><a href="#解析-resolve" class="headerlink" title="解析-resolve"></a>解析-resolve</h3><p>配置模块如何解析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">resolve</span>: &#123; </span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>] <span class="comment">// 尝试按顺序解析这些后缀名。如果有多个文件有相同的名字，但后缀名不同，webpack 会解析列在数组首位的后缀的文件 并跳过其余的后缀。</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>Module not found: Error: Can’t resolve ‘os’ in ‘/Users/zhangliping/Documents/Project/webpack/src’ ts 文件中获取 os 模块失败</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">resolve</span>: &#123; </span><br><span class="line">    <span class="attr">fallback</span>: &#123; <span class="comment">// 当正常解析失败时，重定向模块请求。</span></span><br><span class="line">        <span class="attr">os</span>: <span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&quot;os-browserify/browser&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 打包构建工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>package.json</title>
      <link href="/2018/04/17/package-json/"/>
      <url>/2018/04/17/package-json/</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.npmjs.com/cli/v7/configuring-npm/package-json/#private">参考 npmjs 官方文档</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zhangliping@zhangliingdembp ~/Documents/vite  $ npm install <span class="comment"># 安装 package.json &gt; dependencies 节点下的所有包</span></span><br><span class="line">zhangliping@zhangliingdembp ~/Documents/vite  $ npm install moment <span class="comment"># 安装指定包 moment</span></span><br><span class="line">zhangliping@zhangliingdembp ~/Documents/vite  $ npm uninstall moment <span class="comment"># 卸载 moment 包，卸载后，package.json &gt; dependencies 节点中移除 moment 记录信息</span></span><br><span class="line">zhangliping@zhangliingdembp ~/Documents/vite  $ npm install package -g <span class="comment"># -g 代表安装全局包</span></span><br><span class="line">zhangliping@zhangliingdembp ~/Documents/vite  $ npm uninstall package -g <span class="comment"># -g 删除全局包</span></span><br></pre></td></tr></table></figure><blockquote><p>工具性质的包，提供了好用的终端命令，安装在全局；参考官方说明，决定是否将包安装到全局</p></blockquote><h2 id="包结构"><a href="#包结构" class="headerlink" title="包结构"></a>包结构</h2><p>一个规范的包结构必须符合以下 3 点要求：</p><ul><li>包必须以<b><u>单独的目录</u></b>存在；</li><li>包的顶级目录下必须包含 <b><u>package.json</u></b> 这个包管理配置文件；</li><li>package.json 中必须包含 <b><u>name（包的名称）, version（包的版本）, main（包的入口）</u></b> 这三个属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;demo&quot;</span>, <span class="comment">// 包的名称</span></span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="comment">/* &quot;main&quot;: &quot;index.js&quot;, 移除，防止意外发布代码 */</span></span><br><span class="line">  <span class="comment">// If you set `private: true` in your package.json, then npm will refuse to publish it.</span></span><br><span class="line">  <span class="comment">// this is a way to prevent accidental publication of private repositories</span></span><br><span class="line">  <span class="string">&quot;private&quot;</span>: <span class="literal">true</span>, <span class="comment">// 确保安装包是私有的，防止不小心执行了 `npm publish` 发布到 npm 服务器</span></span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123; <span class="comment">// 依赖包</span></span><br><span class="line">    <span class="string">&quot;webpack&quot;</span>: <span class="string">&quot;^5.43.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^4.7.2&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;server&quot;</span>: <span class="number">9000</span>, <span class="comment">// api 服务器端口号 [0-65525]</span></span><br><span class="line">    <span class="string">&quot;cros&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;open&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;safeList&quot;</span>: [] <span class="comment">// 基于 CROS 跨域请求，React/Vue 中，一般基于 Proxy 实现跨域</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;browserlist&quot;</span>: &#123; <span class="comment">// 浏览器兼容配置</span></span><br><span class="line">    <span class="string">&quot;production&quot;</span>: [ <span class="comment">// 生产环境，浏览器兼容配置</span></span><br><span class="line">      <span class="string">&quot;&gt;0.2%&quot;</span>, <span class="comment">// 使用率大于 0.2% 的浏览器</span></span><br><span class="line">      <span class="string">&quot;not dead&quot;</span>, <span class="comment">// 不考虑已 dead 的浏览器</span></span><br><span class="line">      <span class="string">&quot;not op_mini all&quot;</span> <span class="comment">// 不考虑 欧朋浏览器</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;development&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;last 1 chrome version&quot;</span>, <span class="comment">// chrome 最新版本浏览器</span></span><br><span class="line">      <span class="string">&quot;last 1 firefox version&quot;</span>,</span><br><span class="line">      <span class="string">&quot;last 1 safari version&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>场景描述：在日常开发中，我们通常需要多人协作开发。举个例子，通常我们整个项目体积为 30M，其中，第三方包的体积是 28M，项目源码也就只有 2M。<div class="custom-box custom-box-933">第三方体积过大，不方便团队成员间共享源码</div><div class="custom-box custom-box-393">解决方法：共享时删除 node_modules</div>，安装到 node_modules 下的包都称为<b>项目包</b></p><h3 id="dependencies-节点"><a href="#dependencies-节点" class="headerlink" title="dependencies 节点"></a>dependencies 节点</h3><p>专门用来记录用户使用 <code>npm install</code> 命令安装了哪些包，<span class="custom-box custom-box-933">未安装任意包前，没有该节点</span>，安装到当前节点中的包称为<span class="custom-box custom-box-393">核心依赖包</span></p><h3 id="devDependencies-节点"><a href="#devDependencies-节点" class="headerlink" title="devDependencies 节点"></a>devDependencies 节点</h3><p>仅在项目开发阶段会用到的包，建议使用 <code>npm i packageName --save-dev</code> 简写为 <code>npm i packageName -D</code> 安装到 devDependencies 节点下<br>如果某些包在开发环境与生产环境都用得到，则安装到 dependencies 节点下。 安装到当前节点下的包称为<span class="custom-box custom-box-393">开发依赖包</span></p><h3 id="gitignore-忽略文件"><a href="#gitignore-忽略文件" class="headerlink" title=".gitignore 忽略文件"></a>.gitignore 忽略文件</h3><div class="custom-box custom-box-933">开发过程中，要将 node_modules 添加到 .gitignore 忽略文件中</div><h3 id="browserslist-参考文档"><a href="#browserslist-参考文档" class="headerlink" title="browserslist 参考文档"></a>browserslist <a href="https://cli.vuejs.org/zh/guide/browser-compatibility.html#browserslist">参考文档</a></h3><p>browserlist 具体描述 <a href="https://github.com/browserslist/browserslist">参考文档</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;browserlist&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 浏览器兼容配置</span></span><br><span class="line">  <span class="attr">&quot;production&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">// 生产环境，浏览器兼容配置</span></span><br><span class="line">    <span class="string">&quot;&gt;0.2%&quot;</span><span class="punctuation">,</span> <span class="comment">// 使用率大于 0.2% 的浏览器</span></span><br><span class="line">    <span class="string">&quot;not dead&quot;</span><span class="punctuation">,</span> <span class="comment">// 不考虑已 dead 的浏览器</span></span><br><span class="line">    <span class="string">&quot;not op_mini all&quot;</span> <span class="comment">// 不考虑 欧朋浏览器</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;development&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;last 1 chrome version&quot;</span><span class="punctuation">,</span> <span class="comment">// chrome 最新版本浏览器</span></span><br><span class="line">    <span class="string">&quot;last 1 firefox version&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;last 1 safari version&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>浏览器兼容修改包括三个方面：一是样式兼容，二是 ES6 转换 ES5 的处理，以上配置仅对这两点有效；无法处理 ES6 内置 API 的兼容，<a href="/2019/02/08/NPM-%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/">关于 ES6 内置API 处理可查看</a>。</p></blockquote><h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhangliping@zhangliingdembp ~/Desktop/node/src/demo5/中文  $ npm init -y</span><br><span class="line">npm ERR! Invalid name: <span class="string">&quot;中文&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">zhangliping@zhangliingdembp ~/Desktop/node/src/demo5/中文/leave a blank space  $ npm init -y</span><br><span class="line">Wrote to /Users/zhangliping/Desktop/node/src/demo5/中文/leave a blank space/package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;leave-a-blank-space&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>npm init -y 只能在英文目录下运行，Invalid name ‘中文’，中文名称不可以，同时，也不建议使用带有空格的英文名称的目录下运行</p></blockquote><h3 id="Error-下载包速度慢"><a href="#Error-下载包速度慢" class="headerlink" title="Error 下载包速度慢"></a>Error 下载包速度慢</h3><pre class="mermaid">flowchart LRuser((国内)) -->|从国外服务器下载| server[/国外 npm 官方服务器/]</pre><h4 id="npm-镜像"><a href="#npm-镜像" class="headerlink" title="npm 镜像"></a>npm 镜像</h4><blockquote><p>镜像（Mirroring）一种文件存储形式，一个磁盘上的数据在另一个磁盘上存在相同的副本，即为镜像</p></blockquote><p>淘宝把 npm 官方国外服务器上的包同步到国内的服务器，同时在国内提供下包服务，提高了下包速度</p><pre class="mermaid">flowchart LR  subgraph " "  mirroring[淘宝npm镜像服务器] -->|国内服务器| user((国内用户))  end  server[/国外 npm 官方服务器/]  server -->|同步包数据| mirroring</pre><ul><li>每隔一段时间，淘宝服务器自动同步 npm 官方服务器的包数据到国内；</li><li>淘宝镜像服务器对国内的用户提供下载包</li></ul><h4 id="切换-npm-下包源（下包的服务器地址）"><a href="#切换-npm-下包源（下包的服务器地址）" class="headerlink" title="切换 npm 下包源（下包的服务器地址）"></a>切换 npm 下包源（下包的服务器地址）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhangliping@zhangliingdembp ~/Documents/vite  $ npm config get reigstry <span class="comment"># 查看当前下包的镜像源</span></span><br><span class="line">zhangliping@zhangliingdembp ~/Documents/vite  $ npm <span class="built_in">set</span> registry=https://registry.npm.taobao.org/ <span class="comment"># 将下包的镜像源切换为淘宝的镜像源</span></span><br><span class="line">zhangliping@zhangliingdembp ~/Documents/vite  $ npm config get registry <span class="comment"># 查看镜像源是否下载成功</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-ES6新特性</title>
      <link href="/2017/11/25/JavaScript-ES6-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2017/11/25/JavaScript-ES6-%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="let-const-声明变量"><a href="#let-const-声明变量" class="headerlink" title="let/const 声明变量"></a>let/const 声明变量</h2><ol><li>解决 ES5 var 初始化变量时出现的变量提升问题</li><li>在 ES5 全局作用域和函数作用域的基础上新增块级作用域</li><li>解决因变量没有及时回收造成的内存泄漏问题</li></ol><p><u>解决使用闭包时出错的问题</u></p><blockquote><p>暂时性死区（Temporal Dead Zone, TDZ) 是只要进入当前作用域，所要使用的变量就已经存在了，但不可获取。只有等到变量的那一行代码出现，才可以获取和使用该变量。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// temporal dead zone start</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// a is not defined, a is not declare</span></span><br><span class="line"><span class="keyword">let</span> a; <span class="comment">// Declare variable a</span></span><br><span class="line"><span class="comment">// temporal dead zone end，because the variable has emerged</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="对象字面量增强"><a href="#对象字面量增强" class="headerlink" title="对象字面量增强"></a>对象字面量增强</h2><blockquote><p>使用对象字面量建立对象时，变量指定到同名特性时，如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x, y;</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  x,</span><br><span class="line">  y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ES6 之前</span></span><br><span class="line"><span class="comment"> * x: x</span></span><br><span class="line"><span class="comment"> * y: y</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><blockquote><p>对象特性参考临时建立的匿名函数时，如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  <span class="string">&#x27;0&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">&#x27;1&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&#x27;2&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="title function_">forEach</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="title function_">callback</span>(<span class="variable language_">this</span>[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ES6 之前</span></span><br><span class="line"><span class="comment"> * forEach: function(callback) &#123;</span></span><br><span class="line"><span class="comment"> *   ....</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><blockquote><p>ES6 中可以使用 [] 中指定表达式为对象字面量指定特性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prefix = <span class="string">&#x27;dosome&#x27;</span>, n = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  [prefix + n]() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">o.<span class="title function_">dosome1</span>()</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ES6 之前</span></span><br><span class="line"><span class="comment"> * o[prefix + n] = function() &#123;</span></span><br><span class="line"><span class="comment"> *   // ...</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><blockquote><p>ES6 字面量在设值方法 setter/ 取值方法 getter 时：<br><font color="#f33">setter/getter 方法的作用之一，是进行存取的前置或后置处理。也可以实现一定程度的私有特性隐藏</font></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">object</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> obj_privates = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      obj_privates.<span class="property">name</span> = value.<span class="title function_">trim</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> obj_privates.<span class="property">name</span>.<span class="title function_">toUpperCase</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ES5 通过 Object.defineProperty() 或 Object.defineProperties() 函数设值、取值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="title function_">object</span>()</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27; helen  &#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>) <span class="comment">// helen</span></span><br></pre></td></tr></table></figure><h2 id="解构赋值（Destructuring）"><a href="#解构赋值（Destructuring）" class="headerlink" title="解构赋值（Destructuring）"></a>解构赋值（Destructuring）</h2><blockquote><p>按照一定模式从数组或对象（可枚举）中提取值，对变量进行赋值。<strong>解构赋值的对象是数组或对象，作用是赋值</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> scores = [&#123;<span class="title class_">English</span>: <span class="number">120</span>&#125;, &#123;<span class="title class_">Math</span>: <span class="number">100</span>&#125;, &#123;<span class="attr">chemistry</span>: <span class="number">111</span>&#125;]</span><br><span class="line"><span class="keyword">let</span> [x,y,z] = scores</span><br><span class="line">x <span class="comment">// &#123;English: 120&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ES6 之前</span></span><br><span class="line"><span class="comment"> * let x = scores[0]</span></span><br><span class="line"><span class="comment"> * let y = scores[1]</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>可枚举值，都可使用 Destructuring</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c] = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">b <span class="comment">// &quot;b&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;a,b,c=<span class="number">100</span>,d&#125; = obj</span><br><span class="line">a <span class="comment">//1</span></span><br><span class="line">b <span class="comment">//2</span></span><br><span class="line">z <span class="comment">//100</span></span><br><span class="line">d <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p><font color="#f33">在数组中解构赋值，是从数组中提取值，对应位置赋值给对应变量，解构失败赋值 undefined。等号右边为不可遍历结构会报错。</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c] = <span class="string">&#x27;ab&#x27;</span></span><br><span class="line">c <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p><font color="#f33">解构过程变量也可以赋初值，解构元素少于变量时会取初值</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b=<span class="number">2</span>,c=<span class="number">3</span>] = <span class="string">&#x27;ab&#x27;</span></span><br><span class="line">b <span class="comment">// b</span></span><br><span class="line">c <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><font color="#f33">可以只解构某几个元素，或解构尾部元素</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [,...tail] = <span class="string">&#x27;tail&#x27;</span></span><br><span class="line">tail</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [s,,i,,] = <span class="string">&#x27;tail&#x27;</span></span><br><span class="line">s <span class="comment">//t</span></span><br><span class="line">i <span class="comment">//i</span></span><br></pre></td></tr></table></figure><p><font color="#f33">变量转换</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>, b = <span class="number">10</span>;</span><br><span class="line">[a,b] = [b,a]</span><br><span class="line">a <span class="comment">// 10</span></span><br><span class="line">b <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="余集（Rest）"><a href="#余集（Rest）" class="headerlink" title="余集（Rest）"></a>余集（Rest）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b] = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">b <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><font color="#f99">变量个数少于迭代元素时，多余元素会被忽略</font></p><blockquote><p>使用余集（Rest）将多余元素收集为数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,...b] = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">b <span class="comment">// [&quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="打散（Spread）"><a href="#打散（Spread）" class="headerlink" title="打散（Spread）"></a>打散（Spread）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    arr2 = [...arr, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr2 <span class="comment">// (5)[1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p><font color="#f33">ES9 中，可以对对象进行打散</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,...c] = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">3</span>,<span class="attr">d</span>:<span class="number">4</span>,<span class="attr">e</span>:<span class="number">5</span>&#125;</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure><h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><ol><li>合并数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">var</span> b = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> c = [...a,...b]</span><br></pre></td></tr></table></figure><font color="red">push 方法的参数不能为数组</font><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">var</span> b = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">b.<span class="title function_">push</span>(...a)</span><br></pre></td></tr></table></figure></li><li>数组复制<br>复制底层数据结构的指针，并不是复制全新数组</li><li>与解构赋值结合</li><li>函数调用</li></ol><ul><li>箭头函数内置不可改变的 this</li><li>箭头函数不能使用 new 关键字实例对象</li><li>箭头函数没有 arguments 对象，无法通过 arguments 对象获取传入的参数</li></ul><h2 id="虚拟-Dom"><a href="#虚拟-Dom" class="headerlink" title="虚拟 Dom"></a>虚拟 Dom</h2><p>是利用 JS 去构建真实 DOM 树，用于在浏览器中展示。每当有数据更新时，重新计算整个 DOM 树，新旧对比，进行最小程度的更新，避免大范围页面重排导致的性能问题。虚拟 DOM 树是内存中的数据，本身操作性能高很多。</p><h2 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h2><p>从组件流向子组件，让组件间的关系变得简单可预测<br>props 和 state 是 React 中两个非常重要的概念。<br>props 是外来数据<br>state 是内部数据<br>父组件通过 props 传给子组件，props 改变，react 会递归地向下遍历整个组件树，使用到这个属性的组件中重要渲染<br>组件内部数据只能在组件内部修改<br>状态变化可以被记录和跟踪，可以溯源。</p><p><code>hello $&#123;name&#125;</code> 模板字符串</p>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 笔记</title>
      <link href="/2017/10/21/Vue/"/>
      <url>/2017/10/21/Vue/</url>
      
        <content type="html"><![CDATA[<p>数据驱动视图变化，即可以绑定文本到数据，也可以绑定 DOM 结构到数据</p><h2 id="Vue2-vs-Vue3"><a href="#Vue2-vs-Vue3" class="headerlink" title="Vue2 vs Vue3"></a>Vue2 vs Vue3</h2><h3 id="Vue3-允许用户使用多个根节点"><a href="#Vue3-允许用户使用多个根节点" class="headerlink" title="Vue3 允许用户使用多个根节点"></a>Vue3 允许用户使用多个根节点</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Vue2 只允许有一个根节点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span>根节点<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Vue3 可以有多个根节点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>节点1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>节点2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>vue 提供的特性，会对绑定的目标元素添加响应式的特殊行为。</p><ul><li>v-if </li><li>v-for </li><li>v-model</li><li>v-on</li><li>v-bind 绑定 html 特性</li></ul><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>需要使用多个表达式时，使用计算属性</p><h2 id="Vue1"><a href="#Vue1" class="headerlink" title="Vue1"></a>Vue1</h2><p><img src="/images/vue/vue1Lifecycle.png" alt="Vue1 lifeCycle image"></p><h2 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h2><p><img src="/images/vue/vue2Lifecycle.png" alt="Vue2 lifeCycle image"></p><h2 id="Vue1-vs-Vue2"><a href="#Vue1-vs-Vue2" class="headerlink" title="Vue1 vs Vue2"></a>Vue1 vs Vue2</h2><ul><li>模板中不能包含多个根元素，根元素只能有一个。</li><li>生命周期函数 beforeCompile 编译前调用，<span class='custom-box custom-box-933'>使用 created 钩子函数代替。</span></li><li>生命周期函数 compiled 在编译结束后调用。此时指令生效，数据变化触发 DOM 更新。<span class='custom-box custom-box-933'>使用 mounted 钩子函数代替</span></li><li>生命周期函数 attached </li></ul><h2 id="从头实现-Vue-高级性能（Vue-Workshop-Advanced-Features-from-the-Groupd-up）"><a href="#从头实现-Vue-高级性能（Vue-Workshop-Advanced-Features-from-the-Groupd-up）" class="headerlink" title="从头实现 Vue 高级性能（Vue Workshop:Advanced Features from the Groupd up）"></a>从头实现 Vue 高级性能（Vue Workshop:Advanced Features from the Groupd up）</h2><h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><h3 id="Fundamentals-Reactivity"><a href="#Fundamentals-Reactivity" class="headerlink" title="Fundamentals: Reactivity"></a>Fundamentals: Reactivity</h3><h3 id="Fundamentals-Writing-Plugins"><a href="#Fundamentals-Writing-Plugins" class="headerlink" title="Fundamentals: Writing Plugins"></a>Fundamentals: Writing Plugins</h3><h3 id="Fundamentals-Render-Function"><a href="#Fundamentals-Render-Function" class="headerlink" title="Fundamentals: Render Function"></a>Fundamentals: Render Function</h3><h3 id="State-Management"><a href="#State-Management" class="headerlink" title="State Management"></a>State Management</h3><h3 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h3><h3 id="Form-Validation"><a href="#Form-Validation" class="headerlink" title="Form Validation"></a>Form Validation</h3><h3 id="i18n"><a href="#i18n" class="headerlink" title="i18n"></a>i18n</h3><h3 id="vue-的特点"><a href="#vue-的特点" class="headerlink" title="vue 的特点"></a>vue 的特点</h3><ul><li><p>轻量级框架</p><blockquote><p>自动追踪依赖模板表达式和计算属性，提供 MVVM (Mode-View-ViewMode) 双向绑定和可组合的组件系统，API 简单、灵活、易上手</p></blockquote></li><li><p>双向数据绑定</p><blockquote><p>双向数据绑定是 vue.js 的核心，其专注于 View 层。ViewMode 负责连接 View 和 Mode，保证视图和数据一致。 ViewMode 要做的是：MODE Listen and Data Bindings</p></blockquote></li><li><p>指令</p><blockquote><p>vue.js 与 页面交互主要通过指令完成，指令的作用是当表达式值改变时，相应将其形为应用到 DOM 上</p></blockquote></li><li><p>组件化</p></li><li><p>客户端路由</p></li><li><p>状态管理</p></li></ul><span id="more"></span><hr><h3 id="使用-npm-方式搭建-vue-单页面应用"><a href="#使用-npm-方式搭建-vue-单页面应用" class="headerlink" title="使用 npm 方式搭建 vue 单页面应用"></a>使用 npm 方式搭建 vue 单页面应用</h3><ol><li> 验证 npm 是否正确安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$   npm -v  <span class="comment">#查看 npm 版本</span></span><br></pre></td></tr></table></figure></li><li> 安装 vue<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$   npm install vue</span><br></pre></td></tr></table></figure></li><li> 安装 vue-cli 脚手架<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$   npm install --global vue-cli</span><br></pre></td></tr></table></figure></li><li> 初始化一个基于 webpack 的新模板<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$   vue init webpack my-project</span><br></pre></td></tr></table></figure></li><li> 启动项目，验证搭建结果<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$   <span class="built_in">cd</span> my-project</span><br><span class="line">$   npm install  <span class="comment">#安装依赖包</span></span><br><span class="line">$   npm run dev</span><br></pre></td></tr></table></figure></li></ol><p>  <strong><code>看到下图，恭喜你，环境搭建成功</code></strong></p><p><img src="https://www.runoob.com/wp-content/uploads/2017/01/56219E04-D156-43EC-AC59-BFE7E38A62C3.jpg" alt="vue init page"></p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Promise</title>
      <link href="/2017/02/14/JavaScript-Promise/"/>
      <url>/2017/02/14/JavaScript-Promise/</url>
      
        <content type="html"><![CDATA[<pre class="mermaid"> mindmap  root[Promise]    base(Promise 基础)      advantagesAndDisadvantages))Promise 优缺点((      promiseState))Promise 状态((      PromiseResult))Promise 结果((    API(Promise API)      m1)静态方法(        then["Promise.prototype.then()"]        catch["Promise.prototype.catch()"]        finally["Promise.prototype.finally()"]      m2)实例方法(        resolve["Promise.resolve()"]        reject["Promise.reject()"]        all["Promise.all()"]        race["Promise.race()"]        any["Promise.any()"]        allSettled["Promise.allSettled()"]    problem))Promise 自定义封装((    async&await )async and await(</pre><blockquote><p>Promise 是 ES6 规范新增技术，是<u>用来封装一个异步操作，并获取其成功/失败结果值。</u><span class='custom-box custom-box-933'>是 JS 中进行异步编程的最新解决方案（Promise 之前采用回调函数）</span></p></blockquote><h2 id="Promise-基础"><a href="#Promise-基础" class="headerlink" title="Promise 基础"></a>Promise 基础</h2><h3 id="Promise-的优点"><a href="#Promise-的优点" class="headerlink" title="Promise 的优点"></a>Promise 的优点</h3><ul><li>Promise 支持链式调用，解决回调地狱问题<blockquote><p><a href="/2021/01/13/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%88N%EF%BC%89%E4%BD%BF%E7%94%A8Promise%EF%BC%8C%E5%91%8A%E5%88%AB%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/#%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%9A%E5%9B%9E%E8%B0%83%E5%9C%B0%E5%9F%9F">回调地狱</a> —— 回调函数嵌套调用，外部回调函数异步执行的结果是嵌套的回调执行的条件。<br>回调函数不便于阅读；不便于异常处理</p></blockquote></li><li>指定回调函数的方式更加灵活</li></ul><div style="display:none"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123; [<span class="title class_">Function</span>: <span class="title class_">Promise</span>]</span><br><span class="line">  [length]: <span class="number">1</span>,</span><br><span class="line">  [name]: <span class="string">&#x27;Promise&#x27;</span>,</span><br><span class="line">  [prototype]:</span><br><span class="line">   <span class="title class_">Promise</span> &#123;</span><br><span class="line">     [constructor]: [<span class="title class_">Circular</span>],</span><br><span class="line">     [then]: &#123; [<span class="title class_">Function</span>: then] [length]: <span class="number">2</span>, [name]: <span class="string">&#x27;then&#x27;</span> &#125;,</span><br><span class="line">     [<span class="keyword">catch</span>]: &#123; [<span class="title class_">Function</span>: <span class="keyword">catch</span>] [length]: <span class="number">1</span>, [name]: <span class="string">&#x27;catch&#x27;</span> &#125;,</span><br><span class="line">     [chain]: &#123; [<span class="title class_">Function</span>: chain] [length]: <span class="number">2</span>, [name]: <span class="string">&#x27;chain&#x27;</span> &#125;,</span><br><span class="line"></span><br><span class="line">     [<span class="title class_">Symbol</span>(<span class="title class_">Symbol</span>.<span class="property">toStringTag</span>)]: <span class="string">&#x27;Promise&#x27;</span> &#125;,</span><br><span class="line">  [reject]: &#123; [<span class="title class_">Function</span>: reject] [length]: <span class="number">1</span>, [name]: <span class="string">&#x27;reject&#x27;</span> &#125;,</span><br><span class="line">  [all]: &#123; [<span class="title class_">Function</span>: all] [length]: <span class="number">1</span>, [name]: <span class="string">&#x27;all&#x27;</span> &#125;,</span><br><span class="line">  [race]: &#123; [<span class="title class_">Function</span>: race] [length]: <span class="number">1</span>, [name]: <span class="string">&#x27;race&#x27;</span> &#125;,</span><br><span class="line">  [resolve]: &#123; [<span class="title class_">Function</span>: resolve] [length]: <span class="number">1</span>, [name]: <span class="string">&#x27;resolve&#x27;</span> &#125;,</span><br><span class="line">  [defer]: &#123; [<span class="title class_">Function</span>: defer] [length]: <span class="number">0</span>, [name]: <span class="string">&#x27;defer&#x27;</span> &#125;,</span><br><span class="line">  [accept]: &#123; [<span class="title class_">Function</span>: accept] [length]: <span class="number">1</span>, [name]: <span class="string">&#x27;accept&#x27;</span> &#125;,</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="title class_">Symbol</span>.<span class="property">species</span>)]: [<span class="title class_">Getter</span>] &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">### Demo</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">JavaScript</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">asyncRandom</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resovle, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> random = <span class="title function_">rand</span>(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">            <span class="keyword">if</span> (random &gt;= <span class="number">30</span>) &#123;</span><br><span class="line">                <span class="title function_">resovle</span>(random) <span class="comment">// [[PromiseState]] ==&gt; rejected，[[PromiseResult]]: 51</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(random) <span class="comment">// [[PromiseState]] ==&gt; fulfilled，[[PromiseResult]]: 17</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>是一个<code>构造函数</code>；</li><li>用来<span class='custom-box custom-box-933'>封装一个异步操作</span></li><li><span class='custom-box custom-box-393'>可以获取成功/失败状态和结果值</span><code>PromiseState,PromiseResult</code>。</li></ul><blockquote><p><code>new Promise(excutor)</code></p></blockquote><ul><li>excutor 函数，是一个执行器 <code>(resolve, reject) =&gt;&#123;&#125;</code>。该执行器中封装异步代码。</li><li>resolve 函数，内部定义成功时调用</li><li>reject 函数，内部定义失败时调用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印 Promise 实例对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;&#125;))</span><br><span class="line">  <span class="comment">/* Promise &#123;&lt;pending&gt;&#125;</span></span><br><span class="line"><span class="comment">     [[Prototype]]: Promise</span></span><br><span class="line"><span class="comment">     [[PromiseState]]: &quot;pending&quot;</span></span><br><span class="line"><span class="comment">     [[PromiseResult]]: undefined</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><h3 id="Promise-的状态-PromiseState"><a href="#Promise-的状态-PromiseState" class="headerlink" title="Promise 的状态 [[PromiseState]]"></a>Promise 的状态 [[PromiseState]]</h3><ul><li><p>Promise 的状态有三种：</p><ul><li>Pending 等待状态</li><li>已完成状态<ul><li>Fulfilled</li><li>rejected</li></ul></li></ul><pre class="mermaid">  flowchart LRsubgraph 等待状态  Pendingendsubgraph 已完成状态  fulfilled  rejected  end   Pending --> fulfilled  Pending --> rejected</pre></li><li><p>修改 Promise 状态的几种方式:</p><ul><li>调用 resolve <code>[[PromiseState]]: fulfilled</code>;</li><li>调用 reject <code>[[PromiseState]]: rejected</code>;</li><li>抛出 Error <code>throw Error</code></li></ul><p><span class='custom-box custom-box-933'>Promise 状态只能更改一次。</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1 resolve(&#x27;fulfilled&#x27;)</span></span><br><span class="line">  <span class="comment">// 2 reject(&#x27;rejected&#x27;)</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&#x27;error&#x27;</span> <span class="comment">// Promise &#123;&lt;rejected&gt;: &#x27;error&#x27;&#125;[[Prototype]]: Promise[[PromiseState]]: &quot;rejected&quot;[[PromiseResult]]: &quot;error&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="Promise-的值-PromiseResult"><a href="#Promise-的值-PromiseResult" class="headerlink" title="Promise 的值 [[PromiseResult]]"></a>Promise 的值 [[PromiseResult]]</h3><blockquote><p>保存着异步任务的结果，由 resolve, reject 修改或返回。</p></blockquote><h3 id="Promise-工作流"><a href="#Promise-工作流" class="headerlink" title="Promise 工作流"></a>Promise 工作流</h3><pre class="mermaid">flowchart TBsubgraph 等待状态Pending    Pending("new Promise(excutor)")endsubgraph 已完成状态    Fulfilled(Fulfilled<br/>)    Reject(Reject)endPending --> async{异步处理}async --> |resolved 成功| Fulfilled["状态 Fulfilled, 返回 Promise 对象"]async -->|rejected 失败| Reject["状态 Reject, 返回 Promise 对象"]Fulfilled -->|".then(onResolved, onReject)"| onResolved['执行 onResolved 回调']Reject --> |".then(..., onReject)<br/>.catch(onRejction)"| onReject['执行 onReject 回调']onResolved --> Promise["新的 Promise 对象"]onReject --> Promise</pre><h2 id="Promise-API"><a href="#Promise-API" class="headerlink" title="Promise API"></a>Promise API</h2><h3 id="Promise-构造函数"><a href="#Promise-构造函数" class="headerlink" title="Promise 构造函数"></a>Promise 构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * excutor 执行器函数 (resovle, reject) =&gt; &#123;&#125; 同步调用</span></span><br><span class="line"><span class="comment"> * resolve 异步操作成功回调</span></span><br><span class="line"><span class="comment"> * reject 异步操作失败回调</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">excutor</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="Promise-实例方法"><a href="#Promise-实例方法" class="headerlink" title="Promise 实例方法"></a>Promise 实例方法</h3><h4 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 PromiseState 调用不同状态的回调函数。</span></span><br><span class="line"><span class="comment">// fulfilled 状态对应 onFulfilled，状态为 rejected 调用 onRejected </span></span><br><span class="line"><span class="comment">// 返回新的 Promise 对象</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">then</span>(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure><h4 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h4><blockquote><p><code>Promise.prototype.then</code> 对于失败回调的单独封装</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="string">&#x27;catch&#x27;</span>] = <span class="keyword">function</span> (<span class="params">onRejected</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">null</span>, onRejected);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally()"></a>Promise.prototype.finally()</h4><blockquote><p>注册一个 promise 状态变化时必须执行的回调函数，无论状态成功还是失败。返回 Promise 对象，支持继续链式调用。<br><font color="#f33">避免在 promise 的 then() 或 catch() 中处理相同的代码</font></p></blockquote><h3 id="Promise-静态方法"><a href="#Promise-静态方法" class="headerlink" title="Promise 静态方法"></a>Promise 静态方法</h3><h4 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h4><blockquote><p><code>Promise.resolve(params)</code></p></blockquote><pre class="mermaid"> flowchart TB params["Promise.resolve(params)"] --> condition{"params instanceof Promise"} condition -->|yes| result1["参数的状态和结果决定了Promise.resolve('params')的状态和结果"] condition -->|no| result2["[[PromiseState]]:fulfilled,[[PromiseResult]]:params的值"]</pre><hr><center><b>DEMO</b></center><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// value 为数据，返回 状态为 Fulfilled 状态的 Promise 对象</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;resolve&#x27;</span>)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Promise &#123;&lt;fulfilled&gt;: &#x27;resolve&#x27;&#125;</span></span><br><span class="line"><span class="comment">[[Prototype]]: Promise</span></span><br><span class="line"><span class="comment">[[PromiseState]]: &quot;fulfilled&quot;</span></span><br><span class="line"><span class="comment">[[PromiseResult]]: &quot;resolve&quot;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// value 为 Promise 实例，并使用 reject 进行状态修改，返回 状态为 rejected 的 Promise 对象</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Promise &#123;&lt;rejected&gt;: &#x27;error&#x27;&#125;</span></span><br><span class="line"><span class="comment">[[Prototype]] : Promise </span></span><br><span class="line"><span class="comment">[[PromiseState]] : &quot;rejected&quot; </span></span><br><span class="line"><span class="comment">[[PromiseResult]] : &quot;error&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-933'>Uncaught (in promise) error</span><br><span class='custom-box custom-box-393'>[[PromiseState]] : “rejected” ，状态必须被 Promise.catch 捕获</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// value 可以是数据也可以是 Promise 对象</span></span><br><span class="line"><span class="comment">// 返回一个 Promise 对象</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">resolve</span> = <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) <span class="keyword">return</span> value;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (value === <span class="literal">null</span>) <span class="keyword">return</span> <span class="variable constant_">NULL</span>;</span><br><span class="line">  <span class="keyword">if</span> (value === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="variable constant_">UNDEFINED</span>;</span><br><span class="line">  <span class="keyword">if</span> (value === <span class="literal">true</span>) <span class="keyword">return</span> <span class="variable constant_">TRUE</span>;</span><br><span class="line">  <span class="keyword">if</span> (value === <span class="literal">false</span>) <span class="keyword">return</span> <span class="variable constant_">FALSE</span>;</span><br><span class="line">  <span class="keyword">if</span> (value === <span class="number">0</span>) <span class="keyword">return</span> <span class="variable constant_">ZERO</span>;</span><br><span class="line">  <span class="keyword">if</span> (value === <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span> <span class="variable constant_">EMPTYSTRING</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> value === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> then = value.<span class="property">then</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(then.<span class="title function_">bind</span>(value));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(ex);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">valuePromise</span>(value);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h4><blockquote><p><code>Promise.reject(params)</code>快速返回失败 Promise 对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">123</span>))</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [[Prototype]] : Promise </span></span><br><span class="line"><span class="comment"> * [[PromiseState]] : &quot;rejected&quot; </span></span><br><span class="line"><span class="comment"> * [[PromiseResult]] : Promise</span></span><br><span class="line"><span class="comment"> */</span> </span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-393'>无论参数是什么类型，即使参数返回状态为 fulfilled 的 Promise，结果也是失败 rejected。</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="property">reject</span> = <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="title function_">reject</span>(value);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h4><blockquote><p>参数 promises，包含多个 promise 的数组<br>  返回结果：promises 数组中，所有状态成功，返回数组，数组元素为每个 promise resolve 结果。失败返回结果则为 promises 数组中，第一个 reject 的结果</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">  <span class="title class_">Promise</span>.<span class="property">all</span> = <span class="keyword">function</span> (<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="title function_">iterableToArray</span>(arr);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (args.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="title function_">resolve</span>([]);</span><br><span class="line">    <span class="keyword">var</span> remaining = args.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">res</span>(<span class="params">i, val</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (val &amp;&amp; (<span class="keyword">typeof</span> val === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> val === <span class="string">&#x27;function&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (val <span class="keyword">instanceof</span> <span class="title class_">Promise</span> &amp;&amp; val.<span class="property">then</span> === <span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span>) &#123;</span><br><span class="line">          <span class="keyword">while</span> (val.<span class="property">_state</span> === <span class="number">3</span>) &#123;</span><br><span class="line">            val = val.<span class="property">_value</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (val.<span class="property">_state</span> === <span class="number">1</span>) <span class="keyword">return</span> <span class="title function_">res</span>(i, val.<span class="property">_value</span>);</span><br><span class="line">          <span class="keyword">if</span> (val.<span class="property">_state</span> === <span class="number">2</span>) <span class="title function_">reject</span>(val.<span class="property">_value</span>);</span><br><span class="line">          val.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">            <span class="title function_">res</span>(i, val);</span><br><span class="line">          &#125;, reject);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> then = val.<span class="property">then</span>;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(then.<span class="title function_">bind</span>(val));</span><br><span class="line">            p.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">              <span class="title function_">res</span>(i, val);</span><br><span class="line">            &#125;, reject);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      args[i] = val;</span><br><span class="line">      <span class="keyword">if</span> (--remaining === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(args);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; args.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="title function_">res</span>(i, args[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><center><b>DEMO</b></center><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="string">&#x27;resolve p1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;resolve p2&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;resolve p3&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p2,p3]))</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Promise &#123;&lt;pending&gt;&#125;</span></span><br><span class="line"><span class="comment">[[Prototype]] : Promise </span></span><br><span class="line"><span class="comment">[[PromiseState]] : &quot;fulfilled&quot; </span></span><br><span class="line"><span class="comment">[[PromiseResult]] : </span></span><br><span class="line"><span class="comment">Array(3) 0 : &quot;resolve p1&quot; 1 : &quot;resolve p2&quot; 2 : &quot;resolve p3&quot; length : 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p4 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;reject p4&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> p5 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;reject p5&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p2,p3,p4,p5]))</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Promise &#123;&lt;pending&gt;&#125;[[Prototype]]: Promise[[PromiseState]]: &quot;rejected&quot;[[PromiseResult]]: &quot;reject p4&quot;</span></span><br><span class="line"><span class="comment"> */</span> </span><br></pre></td></tr></table></figure><h4 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h4><blockquote><p>参数为 Promise 数组，返回结果与状态为数组中第一个返回 Promise 的状态与值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="property">race</span> = <span class="keyword">function</span> (<span class="params">values</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="title function_">iterableToArray</span>(values).<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">      <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(value).<span class="title function_">then</span>(resolve, reject);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><center><b>DEMO</b></center><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span><span class="title function_">resolve</span>(<span class="string">&#x27;resolve p1&#x27;</span>), <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;resolve p2&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;resolve p3&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Promise</span>.<span class="title function_">race</span>([p1,p2,p3]))</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Promise &#123;&lt;pending&gt;&#125;[[Prototype]]: Promise[[PromiseState]]: &quot;fulfilled&quot; [[PromiseResult]]: &quot;resolve p2&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p4 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;reject p4&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> p5 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;reject p5&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p4,p5,p2,p3]))</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Promise &#123;&lt;pending&gt;&#125;[[Prototype]]: Promise[[PromiseState]]: &quot;rejected&quot; [[PromiseResult]]: &quot;reject p4&quot;</span></span><br><span class="line"><span class="comment"> */</span> </span><br></pre></td></tr></table></figure><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><h3 id="Q2-Promise-能否执行多个回调"><a href="#Q2-Promise-能否执行多个回调" class="headerlink" title="Q2 - Promise 能否执行多个回调"></a>Q2 - Promise 能否执行多个回调</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// reject(&#x27;reject&#x27;) </span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// then 处理 promise 结果</span></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="literal">null</span>,<span class="function"><span class="params">v</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(v)&#125;) <span class="comment">// reject || Promise &#123;&lt;pending&gt;&#125; [[Prototype]] : Promise [[PromiseState]] : &quot;pending&quot; [[PromiseResult]] : undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// then 再次处理 promise 的结果</span></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="literal">null</span>,<span class="function"><span class="params">v</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then&#x27;</span>, v)&#125;) <span class="comment">// then reject</span></span><br></pre></td></tr></table></figure><pre class="mermaid"> flowchart TB promise --> state{调用 reject 改变状态} state --> |yes| then["then1:reject\nthen2:then reject"] state --> |no| pending["...[PromiseState]] : 'pending' ..."]</pre><blockquote><p>只要状态发生变化，可以通过 <code>then</code> 执行多个回调</p></blockquote><h3 id="Q3-改变-Promise-状态和指定回调函数谁先谁后"><a href="#Q3-改变-Promise-状态和指定回调函数谁先谁后" class="headerlink" title="Q3 - 改变 Promise 状态和指定回调函数谁先谁后"></a>Q3 - 改变 Promise 状态和指定回调函数谁先谁后</h3><p>…???</p><h3 id="Q4-promise-then-返回的-Promise-结果状态由什么决定"><a href="#Q4-promise-then-返回的-Promise-结果状态由什么决定" class="headerlink" title="Q4 - promise.then() 返回的 Promise 结果状态由什么决定"></a>Q4 - promise.then() 返回的 Promise 结果状态由什么决定</h3><blockquote><p>promise.then(onFulfilled, onRejected) 返回的 Promise 状态由 onFulfilled/onRejected 的返回值决定</p></blockquote><ul><li>onFulfilled/onRejected 返回非 Promise，那么 then() 返回的 Promise 状态为 fulfilled</li><li>onFulfilled/onRejected 抛出异常，那么 then() 返回的 Promise 状态为 rejected</li><li>onFulfilled/onRejected 返回 Promise，那 then() 返回的 Promise 的状态和结果值为，回调函数中返回的 Promise 的状态和结果。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span>,promise.<span class="title function_">then</span>(<span class="literal">null</span>,<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">&#125;)) <span class="comment">// Promise &#123;&lt;pending&gt;&#125; [[Prototype]] : Promise [[PromiseState]] : &quot;fulfilled&quot; [[PromiseResult]] : undefined</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span>,promise.<span class="title function_">then</span>(<span class="literal">null</span>,<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&#x27;then error&#x27;</span></span><br><span class="line">&#125;)) <span class="comment">// Promise &#123;&lt;pending&gt;&#125; [[Prototype]] : Promise [[PromiseState]] : &quot;rejected&quot; [[PromiseResult]] : &quot;then error&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span>,promise.<span class="title function_">then</span>(<span class="literal">null</span>,<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;promise reject error&#x27;</span>)</span><br><span class="line">&#125;)) <span class="comment">// Promise &#123;&lt;pending&gt;&#125;[[Prototype]]: Promise[[PromiseState]]: &quot;rejected&quot;[[PromiseResult]]: &quot;promise reject error&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span>,promise.<span class="title function_">then</span>(<span class="literal">null</span>,<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;promise resolve&#x27;</span>)</span><br><span class="line">&#125;)) <span class="comment">// Promise &#123;&lt;pending&gt;&#125; [[Prototype]] : Promise [[PromiseState]] : &quot;fulfilled&quot; [[PromiseResult]] : &quot;promise resolve&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Q5-promise-如何串连多个操作任务"><a href="#Q5-promise-如何串连多个操作任务" class="headerlink" title="Q5 - promise 如何串连多个操作任务"></a>Q5 - promise 如何串连多个操作任务</h3><blockquote><p>promise.then(onFulfilled, onRejected) 返回 Promise 可以链式调用 then(onFulfilled, onRejected)，过程中可以通过修改 onFulfilled, onRejected 回调函数的返回值，从而改变 then 返回的 Promise 的状态和结果值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">  <span class="comment">// 思考：是不是可以异步返回一个 promise</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;resolve&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Q6-promise-异常传透"><a href="#Q6-promise-异常传透" class="headerlink" title="Q6 - promise 异常传透"></a>Q6 - promise 异常传透</h3><blockquote><p>promise 链处理过程中，遇到异常或 reject，会跳过中间的 then 链，直接执行 catch 处理异常。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">promise</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">v</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(v);<span class="keyword">throw</span> <span class="string">&#x27;error&#x27;</span>;&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">v</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">error</span>(e)&#125;)</span><br></pre></td></tr></table></figure><h3 id="Q7-关于中断-promise-链"><a href="#Q7-关于中断-promise-链" class="headerlink" title="Q7 - 关于中断 promise 链"></a>Q7 - 关于中断 promise 链</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// promiseState 处于 pending 态时，promise 链中断</span></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function"><span class="params">v</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(v); <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">()=&gt;</span>&#123;&#125;)&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">v</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(v))</span><br></pre></td></tr></table></figure><h3 id="Promise-promisify"><a href="#Promise-promisify" class="headerlink" title="Promise.promisify"></a>Promise.promisify</h3><blockquote><p>NodeJS 的函数风格转换为 Promise 方法，可以认为是一种语法粮。<br><a href="https://segmentfault.com/a/1190000008479644">Promisify 的源码解析</a></p></blockquote><h2 id="Promise-的拒绝"><a href="#Promise-的拒绝" class="headerlink" title="Promise 的拒绝"></a>Promise 的拒绝</h2><p>显式拒绝 —— 在一个 promise 的执行函数中调用传入的 reject 方法</p><p>隐式拒绝 —— 处理的一个 promise 的过程中招聘一个异常</p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>解决采用 callback 机制产生的如回调地狱一样的潜在问题，允许采用近乎同步的逻辑写异步代码</p><h2 id="async-await-异步编程的终级解决方案"><a href="#async-await-异步编程的终级解决方案" class="headerlink" title="async/await 异步编程的终级解决方案"></a>async/await 异步编程的终级解决方案</h2><blockquote><p>JavaScript 的 async/await 实现，也离不开 Promise，async 用于申明一个方法是异步的，await 用于等待一个异步方法执行完成。await 只能出现在 async 函数中。</p></blockquote><h3 id="async-关键字"><a href="#async-关键字" class="headerlink" title="async 关键字"></a>async 关键字</h3><p>用于标记一个函数，该函数返回一个 promise 对象，promise 对象的结果由 async 函数执行的返回值决定。</p><h4 id="async-如何处理它的返回值的"><a href="#async-如何处理它的返回值的" class="headerlink" title="async 如何处理它的返回值的"></a>async 如何处理它的返回值的</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello async&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值</span></span><br><span class="line"><span class="title class_">Promise</span> &#123;&lt;resolved&gt;: <span class="string">&quot;hello async&quot;</span>&#125;</span><br><span class="line"><span class="attr">__proto__</span>: <span class="title class_">Promise</span></span><br><span class="line">[[<span class="title class_">PromiseStatus</span>]]: <span class="string">&quot;resolved&quot;</span></span><br><span class="line">[[<span class="title class_">PromiseValue</span>]]: <span class="string">&quot;hello async&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>async 函数返回的是一个 Promise 对象，async 会把 return 变量通过 Promise.resolve() 封装成 Promise 对象。可以用 then() 链处理 Promise 对象，进行测试。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello async&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(res)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值</span></span><br><span class="line">hello <span class="keyword">async</span></span><br><span class="line"><span class="title class_">Promise</span> &#123;&lt;resolved&gt;: <span class="literal">undefined</span>&#125;<span class="attr">__proto__</span>: <span class="title class_">Promise</span>[[<span class="title class_">PromiseStatus</span>]]: <span class="string">&quot;resolved&quot;</span>[[<span class="title class_">PromiseValue</span>]]: <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><pre class="mermaid"> flowchart TB enter[async 函数返回值] --> condition{instanceof 返回值 === promise} condition -->|yes| PromiseResult[结果为 promise 的状态和值]</pre><h2 id="await"><a href="#await" class="headerlink" title="await"></a>await</h2><blockquote><p>async 函数返回 Promise, await 可以用于等待 async 异步的完成，异步操作返回的都是 promise, await 按顺序执行。</p></blockquote><p><a href="https://github.com/HelenZhangLP/demo/tree/master/node/node-demo/demo-1">更多案例</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Ajax</title>
      <link href="/2016/07/24/JavaScript-Ajax/"/>
      <url>/2016/07/24/JavaScript-Ajax/</url>
      
        <content type="html"><![CDATA[<pre class="mermaid"> mindmap root[Ajax]  同步与异步  异步编程解决方案    Ajax     Ajax 优缺点    XML    HTTP 协议</pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">rMethod, url, callback, params = <span class="string">&#x27;&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 创建 ajax 对象</span></span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">  xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span></span><br><span class="line">  <span class="comment">// 2. 初始化 ajax方法和请求地址</span></span><br><span class="line">  url += <span class="title class_">Date</span>.<span class="title function_">now</span>() <span class="comment">// 解决 IE 浏览器缓存问题</span></span><br><span class="line">  xhr.<span class="title function_">open</span>(rMethod, url)</span><br><span class="line">  <span class="comment">// == 设置请求头 ==</span></span><br><span class="line">  <span class="comment">// xhr.setRequestHeader(&#x27;content-type&#x27;, &#x27;application/x-www-form-urlencoded&#x27;)</span></span><br><span class="line">  xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;mouses&#x27;</span>)</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 3. 发起 ajax 请求</span></span><br><span class="line"><span class="comment">   * 3.1 设置请求体</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  xhr.<span class="title function_">send</span>(params)</span><br><span class="line">  <span class="comment">// 4. 处理响应结果</span></span><br><span class="line">  xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * readyState</span></span><br><span class="line"><span class="comment">       * 0 UNSENT 代理创建，但没有通过 open() 初始化请求</span></span><br><span class="line"><span class="comment">       * 1 OPENED 代理初始化，但 send() 没有发送请求</span></span><br><span class="line"><span class="comment">       * 2 HEADERS_RECEIVED 已接收到头部状态</span></span><br><span class="line"><span class="comment">       * 3 LOADING 响应加载中</span></span><br><span class="line"><span class="comment">       * 4 DONE 响应下载完成</span></span><br><span class="line"><span class="comment">       * </span></span><br><span class="line"><span class="comment">       * =======</span></span><br><span class="line"><span class="comment">       * state 请求状态码</span></span><br><span class="line"><span class="comment">       * 200 请求成功</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">let</span> text = json.<span class="title function_">parsed</span>(xhr.<span class="property">response</span>)</span><br><span class="line">      <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span><br><span class="line">              <span class="title function_">callback</span>(xhr.<span class="property">response</span>.<span class="property">name</span>)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p>前后端交互的技术实现，用户不需要刷新或跳转页面可查看相关数据信息。</p><h3 id="XML-eXtensible-Markup-Language"><a href="#XML-eXtensible-Markup-Language" class="headerlink" title="XML(eXtensible Markup Language)"></a>XML(eXtensible Markup Language)</h3><blockquote><p>XML 可标记语言，用来传输和存储数据，与 HTML(Hyper Text Markup Language) 中的预标签一样，不同的是 HTML 是预定义标签，XML 是自定义标签，用来表示一些数据。如下：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">staff</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>Mouses<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">gender</span>&gt;</span>女<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">department</span>&gt;</span>IT<span class="tag">&lt;/<span class="name">department</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">staff</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Ajax-优缺点"><a href="#Ajax-优缺点" class="headerlink" title="Ajax 优缺点"></a>Ajax 优缺点</h3><ul><li>优点<ul><li>不需要刷新页面与服务器通信</li><li>允许用户根据事件更新页面部分内容</li></ul></li><li>缺点<ul><li>没有浏览历史，页面不能回退</li><li>存在跨域问题</li><li>SEO（Search Enginer Optimization） 不友好，爬虫无法获取页面信息。</li></ul></li></ul><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a><a href="/2018/05/23/http/">HTTP</a></h3><h3 id="Chrome-中的-Ajax-开发工具功能点"><a href="#Chrome-中的-Ajax-开发工具功能点" class="headerlink" title="Chrome 中的 Ajax 开发工具功能点"></a>Chrome 中的 Ajax 开发工具功能点</h3><pre class="mermaid"> mindmap  root[Fetch/XHR]    Headers[头部信息]      General      Response Headers      Request Headers    Payload[请求参数]      setRequestHeaders        FormData          vsp[view source / view parsed]          v[view URL-encoded / view decoded]</pre><h2 id="Provisional-headers-are-shown"><a href="#Provisional-headers-are-shown" class="headerlink" title="Provisional headers are shown"></a><font color='#f33'>Provisional headers are shown</font></h2><p><span class='custom-box custom-box-933'>Access to XMLHttpRequest at ‘<a href="http://127.0.0.1:8080/server&#39;">http://127.0.0.1:8080/server&#39;</a> from origin ‘null’ has been blocked by CORS policy: Response to preflight request doesn’t pass access control check: No ‘Access-Control-Allow-Origin’ header is present on the requested resource.</span></p><blockquote><p>自定义请求引起的报错，解决方法如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端</span></span><br><span class="line">...</span><br><span class="line">  xhr.<span class="title function_">setRequestHeaders</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;mouses&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器端</span></span><br><span class="line">...</span><br><span class="line">  app.<span class="title function_">all</span>(<span class="string">&#x27;.../api/...&#x27;</span>, (request, response) &#123;</span><br><span class="line">    response.<span class="title function_">setHead</span>(<span class="string">&#x27;access-control-allow-origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    response.<span class="title function_">setHead</span>(<span class="string">&#x27;access-control-allow-headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Uncaught-DOMException-Failed-to-set-the-‘responseType’-property-on-‘XMLHttpRequest’-The-response-type-cannot-be-set-if-the-object’s-state-is-LOADING-or-DONE"><a href="#Uncaught-DOMException-Failed-to-set-the-‘responseType’-property-on-‘XMLHttpRequest’-The-response-type-cannot-be-set-if-the-object’s-state-is-LOADING-or-DONE" class="headerlink" title="Uncaught DOMException: Failed to set the ‘responseType’ property on ‘XMLHttpRequest’: The response type cannot be set if the object’s state is LOADING or DONE."></a><span class='custom-box custom-box-933'>Uncaught DOMException: Failed to set the ‘responseType’ property on ‘XMLHttpRequest’: The response type cannot be set if the object’s state is LOADING or DONE.</span></h2><h3 id="readystate-的几种状态"><a href="#readystate-的几种状态" class="headerlink" title="readystate 的几种状态"></a>readystate 的几种状态</h3><table><thead><tr><th>状态码</th><th>解释</th></tr></thead><tbody><tr><td>0</td><td>UNSENT 代理创建，但没有通过 open() 初始化请求</td></tr><tr><td>1</td><td>OPENED 代理初始化，但 send() 没有发送请求</td></tr><tr><td>2</td><td>HEADERS_RECEIVED 已接收到头部状态</td></tr><tr><td>3</td><td>LOADING 响应加载中</td></tr><tr><td>4</td><td>DONE 响应下载完成</td></tr></tbody></table><blockquote><p>对象状态是 LOADING 或 DONE 时不能设置响应类型。<br>  所以 xhr.readystate = ‘json’ 要写在 xhr.open() 初始化之前</p></blockquote><h3 id="Ajax-中-IE-缓存问题"><a href="#Ajax-中-IE-缓存问题" class="headerlink" title="Ajax 中 IE 缓存问题"></a>Ajax 中 IE 缓存问题</h3><p>IE 浏览器会对 ajax 请求进行缓存</p><blockquote><p>xhr.open(‘get’, ‘<a href="http://localhost:8080/getIE?t=&#39;+Date.now()">http://localhost:8080/getIE?t=&#39;+Date.now()</a>) 加时间戳，让浏览器认为每次都是一个新请求</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 创建 AJAX 请求对象</span></span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">  <span class="comment">// 初始化请求</span></span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://localhost:8080/getIE?t=&#x27;</span>+<span class="title class_">Date</span>.<span class="title function_">now</span>())</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发起请求</span></span><br><span class="line">  xhr.<span class="title function_">send</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理响应</span></span><br><span class="line">  xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(xhr.<span class="property">state</span> &gt;= <span class="number">200</span> &amp;&amp; xhr &lt; <span class="number">300</span>) &#123;</span><br><span class="line">        resultDOM.<span class="property">innerHTML</span> = xhr.<span class="property">response</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 语法糖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 生命周期</title>
      <link href="/2016/06/15/React-LifeCycle/"/>
      <url>/2016/06/15/React-LifeCycle/</url>
      
        <content type="html"><![CDATA[<pre class="mermaid">  flowchart LR  subgraph 初次渲染阶段    subgraph 初始化阶段      start([strart]) -->|初始化属性&&考验规则|step1[getDefaultProps]      step1 -->|初始化状态| stpe2[getInitialState]    end    subgraph 第一次渲染      step3["~UNSAFE_ComponentWillMount~"] --> step4[render]      step4 --> step5[componentDidMount]    end    初始化阶段  --> 第一次渲染  end</pre><pre class="mermaid">  flowchart LR  第一次渲染 --> 组件更新  subgraph 组件更新    condition1{属性改变 or 状态改变} -->|属性改变| step6_1["~UNSAFE_componentWillReceiveProps~"]    condition1 -->|状态改变| step6{shouldComponentUpdate}    step6_1 --> step6    step6 -->|yes| step7[componentWillUpdate]    step7 -->|dom-diff| step8[render]    step8 --> step9[componentDidUpdate]  end</pre><pre class="mermaid">  flowchart LR  初次渲染阶段 --> 组件更新  组件更新 --> 组件销毁  subgraph 组件销毁    step10[componentwillUnmount]  end</pre><blockquote><p>UNSAFE_* 屏蔽 warning</p></blockquote><h2 id="the-components-is-not-recommended"><a href="#the-components-is-not-recommended" class="headerlink" title="the components is not recommended"></a><font color='red'>the components is not recommended</font></h2><table><thead><tr><th>serial number</th><th>component name</th></tr></thead><tbody><tr><td>1</td><td>ComponentWillMount</td></tr><tr><td>2</td><td>componentWillUpdate</td></tr></tbody></table><h2 id="第一次渲染"><a href="#第一次渲染" class="headerlink" title="第一次渲染"></a>第一次渲染</h2><h3 id="step1-——-初始化属性-amp-amp-考验规则"><a href="#step1-——-初始化属性-amp-amp-考验规则" class="headerlink" title="step1 —— 初始化属性&amp;&amp;考验规则"></a>step1 —— 初始化属性&amp;&amp;考验规则</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vote</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * method1: handle init props in constructor function(在 constructor 中初始化属性)</span></span><br><span class="line"><span class="comment">    constructor(props) &#123;</span></span><br><span class="line"><span class="comment">      super(props) // 把传递进来的 &#123;...props&#125; 挂载到 this</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * method2: 不通过显式声明 constructor 初始化属性，react 内部机制会处理</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="step2-——-初始化状态"><a href="#step2-——-初始化状态" class="headerlink" title="step2 —— 初始化状态"></a>step2 —— 初始化状态</h3><p>状态修改，触发视图更新，<code>React.Component.prototype.setState</code> 与 <code>React.Component.prototype.forceUpdate</code> 都可以更新视图。<br><span class='custom-box custom-box-933'><code>React.Component.prototype.forceUpdate</code> 这种方式不推荐使用，因为：</span><br><span class='custom-box custom-box-939'><code>React.Component.prototype.forceUpdate</code> 不会触发 shouldComponentUpdate 生命周期更新。</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vote</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">supportVote</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">nagativeVote</span>: <span class="number">0</span></span><br><span class="line">  &#125; <span class="comment">// 默认值为 null</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;supportVote, nagativeVote&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-xml">        this.setState(&#123;</span></span><br><span class="line"><span class="language-xml">          supportVote: ++supportVote</span></span><br><span class="line"><span class="language-xml">        &#125;)</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;&gt;赞成&#123;supportVote&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-xml">        this.state.nagativeVote++</span></span><br><span class="line"><span class="language-xml">        this.forceUpdate()</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;&gt;反对&#123;nagativeVote&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="step3-——-ComponentWillMount"><a href="#step3-——-ComponentWillMount" class="headerlink" title="step3 —— ComponentWillMount"></a>step3 —— ComponentWillMount</h3><p>非严格模式下：<font color='#ffa'>Warning: componentWillMount has been renamed, and is not recommended for use. See <a href="https://reactjs.org/link/unsafe-component-lifecycles">https://reactjs.org/link/unsafe-component-lifecycles</a> for details.</font><code>componentWillMount</code>已被重命名，不推荐使用。<br>严格模式下：<font color='red'>react-dom.development.js:86 Warning: Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See <a href="https://reactjs.org/link/unsafe-component-lifecycles">https://reactjs.org/link/unsafe-component-lifecycles</a> for details.</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vote</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">supportVote</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">nagativeVote</span>: <span class="number">0</span></span><br><span class="line">  &#125; <span class="comment">// 默认值为 null</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件渲染前 componentWillMount&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;supportVote, nagativeVote&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-xml">        this.setState(&#123;</span></span><br><span class="line"><span class="language-xml">          supportVote: ++supportVote</span></span><br><span class="line"><span class="language-xml">        &#125;)</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;&gt;赞成&#123;supportVote&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-xml">        this.state.nagativeVote++</span></span><br><span class="line"><span class="language-xml">        this.forceUpdate()</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;&gt;反对&#123;nagativeVote&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="step4-——-render"><a href="#step4-——-render" class="headerlink" title="step4 —— render"></a>step4 —— render</h3><p>组件渲染阶段</p><h3 id="step5-——-componentDidMount"><a href="#step5-——-componentDidMount" class="headerlink" title="step5 —— componentDidMount"></a>step5 —— componentDidMount</h3><p>第一次渲染结束，virtualDOM 已经更新成完真实 DOM，可以进行 DOM 操作</p><h2 id="组件更新"><a href="#组件更新" class="headerlink" title="组件更新"></a>组件更新</h2><h3 id="step6-——-shouldComponentUpdate"><a href="#step6-——-shouldComponentUpdate" class="headerlink" title="step6 —— shouldComponentUpdate"></a>step6 —— shouldComponentUpdate</h3><p>是否允许组件更新，<span class='custom-box custom-box-933'><code>react.component.forceUpdate</code> 不会触发 shouldComponentUpdate 生命周期更新。</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vote</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">supportVote</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">nagativeVote</span>: <span class="number">0</span></span><br><span class="line">  &#125; <span class="comment">// 默认值为 null</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件渲染前 componentWillMount&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;componentDidMount：组件已挂载至页面&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 状态修改，触发组件更新</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; nextProps 要修改的属性</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; nextState 要修改的状态</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> boolean 是否允许更新</span></span><br><span class="line"><span class="comment">   */</span>  </span><br><span class="line">  <span class="title function_">shouldComponentUpdate</span>(<span class="params">nextProps, nextState</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;shouldComponentUpdate: 是否允许组件更新&#x27;</span>,<span class="variable language_">this</span>.<span class="property">state</span>, nextState)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * return true 允许更新，执行下一个操作</span></span><br><span class="line"><span class="comment">     * return false 不允许更新</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;supportVote, nagativeVote&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-xml">        this.setState(&#123;</span></span><br><span class="line"><span class="language-xml">          supportVote: ++supportVote</span></span><br><span class="line"><span class="language-xml">        &#125;)</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;&gt;赞成&#123;supportVote&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-xml">        this.state.nagativeVote++</span></span><br><span class="line"><span class="language-xml">        this.forceUpdate()</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;&gt;反对&#123;nagativeVote&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="step7-——-componentWillUpdate"><a href="#step7-——-componentWillUpdate" class="headerlink" title="step7 —— componentWillUpdate"></a>step7 —— componentWillUpdate</h3><p><font color='#ffa'>Warning: componentWillUpdate has been renamed, and is not recommended for use. See <a href="https://reactjs.org/link/unsafe-component-lifecycles">https://reactjs.org/link/unsafe-component-lifecycles</a> for details.<br></font></p><blockquote><p>这个阶段状态未更新</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vote</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.component</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="title function_">componentWillUpdate</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;componentWillUpdate:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">state</span>) <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//    &quot;supportVote&quot;: 0,</span></span><br><span class="line">    <span class="comment">//    &quot;nagativeVote&quot;: 0</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span>...<span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="step8-——-render"><a href="#step8-——-render" class="headerlink" title="step8 —— render"></a>step8 —— render</h3><h3 id="step9-——-componentDidUpdate"><a href="#step9-——-componentDidUpdate" class="headerlink" title="step9 —— componentDidUpdate"></a>step9 —— componentDidUpdate</h3><p>组件更新完毕</p><h2 id="父子组件渲染"><a href="#父子组件渲染" class="headerlink" title="父子组件渲染"></a>父子组件渲染</h2><p>React 组件更新遵循深度优先原则，父组件在操作中遇到子组件，一定是把子组件处理完后，才继续处理父组件。</p><h3 id="父组件第一次渲染"><a href="#父组件第一次渲染" class="headerlink" title="父组件第一次渲染"></a>父组件第一次渲染</h3><pre class="mermaid">flowchart TB  step1([父组件 ComponentWillMount]) --> step2([父组件 render])  subgraph " "    step3[子组件 ComponentWillMount] --> step4[子组件 render]    step4 --> step5[子组件 ComponentDidMount]  end  step2 --> step3[子组件 ComponentWillMount]  step5 --> step6([父组件 ComponentDidMount])</pre><h3 id="父组件更新"><a href="#父组件更新" class="headerlink" title="父组件更新"></a>父组件更新</h3><pre class="mermaid">flowchart TB  step1([父组件 shouldComponentUpdate]) --> step2([父组件 ComponentWillUpdate])  step2 --> step3([父组件 render])  subgraph " "    step4[子组件 componentWillReceiveProps] --> step4_1[子组件 shouldComponentUpdate]    step4_1 --> step5[子组件 ComponentWillUpdate]    step5 --> step6[子组件 render]    step6 --> step7[子组件 componentDidUpdate]  end  step3 --> step4  step7 --> step8([父组件 ComponentDidUpdate])</pre><img  src=http://www.plantuml.com/plantuml/svg/SoWkIImgAStDuQfHBiZCowvvsZ7xwUvTpwPlg-6oIixFAoufAaqkoI-ovh9AJornIItAB4jD2Iv9B4brAyhF3IZABoZMoDUiuQfvDdlBisaR8FhmgtpQk-F5thrWbGwfUIb0km40><p>React 组件中，生命周期可基本分为三个状态</p><h3 id="Mounting-组件的挂载"><a href="#Mounting-组件的挂载" class="headerlink" title="Mounting 组件的挂载"></a>Mounting 组件的挂载</h3><pre class="mermaid">graph LRA(React 组件渲染) --> B(构造DOM元素)B --> C(展示到页面)</pre><span id="more"></span><p>如上过程称为<strong>组件挂载</strong><br>执行的相关生命周期方法：</p><ol><li> getDerivedStateFromProps</li></ol><p>Mounting：已开始挂载 DOM<br>Updating：重新渲染组件 DOM<br>UnMounting：已卸载真实的 DOM</p><p>关于生命周期的方法<br>ComponentWillMount()：在渲染前调用，可以在客户端，也可以在服务端<br>ComponentDidMount()：第一次渲染后调用，只作用于客户端<br>ComponentWillUpdate()/UNSAFE_componentWillUpdate<br><font color="Orange"><br>  <code>componentWillUpdate has been renamed，and is not recommended for use   Move data fetching code or side effects to ComponentDidUpdate   Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode，In React 18.x, only the UNSAFE_ name will work. to rename all deprecated lifecycles to their new names, you can run &#39;npx react-codemod rename-unsafe-lifecycles&#39; in your project source folder.</code><br></font></p><blockquote><p>在组件接收到新的 props 参数或者 State 状态，<u>渲染之前调用</u>。<strong>该方法初始化时不会被调用</strong><br>  ComponentWillUpdate 未来会废弃<br>  平缓过渡 React 16.3 版本中，为不安全的生命周期引入别名 UNSAFE_componentWillUpdate<br>  废弃旧版本的生命周期保留至 React 17</p></blockquote><p>UNSAFE_componentWillUpdate + getDerivedStateFromProps<br><font color="red"><br>  <code>Unsafe legacy lifecycles will not be called for components using new components APIs   App uses getDerivedsTATEfromProps() but also contains the following legacys UNSAFE_componentWillUpdate</code><br></font></p><p>getDerivedStateFromProps()</p><blockquote><p><u>在组件实例化及接收到新的 props 后调用</u>，返回一个对象去更新 state，或者返回 null 不更新，<u>用于确认当前组件<strong>是否需要重新渲染</strong></u>这个生命周期将作为 componentWillReceiveProps() 的安全替代者</p></blockquote><p>getSnapshotBeforeUpdate()</p><blockquote><p><u>更新之前被调用</u><strong>这个生命周期返回值将作为第3个参数传递给 componentDidUpdate() 方法</strong><font color="red">对于保存滚动位置有用</font></p></blockquote><p><font color="red">Warning: App: getSnapshotBeforeUpdate should be used with ComponentDidUpdate(). This component defines getSnapshotBeforeUpdate() only</font></p><p>ComponentDidUpdate()：组件完成更新后会立即调用，另外该方法。<strong>该方法初始化时不会被调用</strong><br>ComponentWillMount()：在组件从 Dom 中移除之前会被立刻调用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript-函数参数</title>
      <link href="/2013/02/03/JavaScript-5.1-%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0/"/>
      <url>/2013/02/03/JavaScript-5.1-%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="形参（parameter）"><a href="#形参（parameter）" class="headerlink" title="形参（parameter）"></a>形参（parameter）</h2><blockquote><p>定义函数时，描述函数参数所列举的变量</p></blockquote><h2 id="实参（argument）"><a href="#实参（argument）" class="headerlink" title="实参（argument）"></a>实参（argument）</h2><blockquote><p>函数调用时所传递给函数的值</p></blockquote><h2 id="实参与形参"><a href="#实参与形参" class="headerlink" title="实参与形参"></a>实参与形参</h2><ul><li>实参的数量大于形参，额外的实参不会赋值给任何形参。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">arg1, arg2</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arg1, arg2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">// 1,2 3不会赋值给任何形参变量</span></span><br></pre></td></tr></table></figure></li><li>实参的数量小于形参，形参中没有被赋值变量值为 <code>undefined</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">arg1, arg2</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arg1, arg2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>) <span class="comment">// 1,undefined 形参 arg2 被赋值为 undefined</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="隐形参数"><a href="#隐形参数" class="headerlink" title="隐形参数"></a>隐形参数</h2><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><blockquote><p>函数内置实参集合，不论函数定义是否设置形参，是否传递实参，传递了多少形参，都包含在 <code>arguments</code> 集合中。<br>    该集合若传递参数，则是一个类数组集合；若没有传递参数，则是一个空集合。</p></blockquote><ul><li>传递给函数的所有参数的集合，可以访问函数调用过程传递的实际参数。</li><li><code>arguments</code> 有 <code>length</code> 属性，可以通过下标访问，但它不是数组，而是类数组数据结构<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>, <span class="variable language_">arguments</span>[<span class="number">2</span>]) <span class="comment">//4 3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure></li><li><code>arguments</code> 可以作为参数别名使用，二者相互影响<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">user</span>(<span class="params">name,age</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;age&#x27;</span>, age, <span class="variable language_">arguments</span>[<span class="number">1</span>]) <span class="comment">//age 5 5</span></span><br><span class="line"><span class="variable language_">arguments</span>[<span class="number">1</span>] = <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;age&#x27;</span>, age, <span class="variable language_">arguments</span>[<span class="number">1</span>]) <span class="comment">//age 10 10 </span></span><br><span class="line">age = <span class="number">7</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;age&#x27;</span>, age, <span class="variable language_">arguments</span>[<span class="number">1</span>]) <span class="comment">//age 7 7</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">user</span>(<span class="string">&#x27;hel&#x27;</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><span class='custom-box custom-box-933'><code>arugments</code> 对象作为函数参数别名会影响代码的可读性，在 Javascript 提供的严格模式中无法使用</span></li></ul><h2 id="剩余参数（rest-parameter）"><a href="#剩余参数（rest-parameter）" class="headerlink" title="剩余参数（rest parameter）"></a>剩余参数（rest parameter）</h2><blockquote><p>将未命名的形参的参数创建为一个不定数量的数组。如下，函数最后一个命名参数前加 <code>...</code> 前缀，这个参数就叫剩余参数数组。如 …restArg，其中包含传入的其它参数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...restArg 可以获取到除，已定义的形参（firstArg）以外的传递的实参数组。如果没有传递多与定义形参以外的参数，则 ...restArg 为空数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">firstArg, ...restArg</span>) &#123;&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) <span class="comment">// firstArg = 1, restArg = [2, 3, ,4]</span></span><br></pre></td></tr></table></figure><p><font color='#f33'>SyntaxError: parameter after rest parameter<strong>注：只能在最后一个形参才会被视为剩余参数，即参数不能在剩余参数之后</strong></font></p><h2 id="默认参数（default-parameter）"><a href="#默认参数（default-parameter）" class="headerlink" title="默认参数（default parameter）"></a>默认参数（default parameter）</h2><p>适应使用默认参数，避免空值。</p><blockquote><p>允许在调用时没有值，或 <code>undefiend</code> 传入时使用指定的默认参数值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">user</span>(<span class="params">name, career=<span class="string">&#x27;teacher&#x27;</span></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> name + <span class="string">&#x27; is a &#x27;</span> + carrer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对后面参数赋值可以引用前面默认参数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">user</span>(<span class="params">name, career=<span class="string">&#x27;teacher&#x27;</span>, message=name + <span class="string">&#x27; is a &#x27;</span> + carrer</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> message</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-数据类型检测</title>
      <link href="/2012/12/15/JavaScript-6-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B/"/>
      <url>/2012/12/15/JavaScript-6-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="typeof-value"><a href="#typeof-value" class="headerlink" title="typeof[value]"></a>typeof[value]</h2><blockquote><p><code>typeof value</code> 返回 <code>undefined</code>，返回值是一个字符串类型，字符串代表当前值的数据类型。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本数据类型</span></span><br><span class="line"><span class="keyword">typeof</span> value <span class="comment">// &#x27;undefined&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> <span class="comment">// &#x27;undefined&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;value&#x27;</span> <span class="comment">// &#x27;string&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;&#x27;</span> <span class="comment">// &#x27;string&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">0</span> <span class="comment">// &#x27;number&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">false</span> <span class="comment">// &#x27;boolean&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Symbol</span>() <span class="comment">//&#x27;symbol&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">9007199254740992n</span> <span class="comment">// bigint</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">BigInt</span>(<span class="number">10</span>) <span class="comment">// bigint</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用数据类型</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125; <span class="comment">// Object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params">params</span>) &#123;&#125; <span class="comment">// function</span></span><br><span class="line"><span class="keyword">typeof</span> (<span class="function">()=&gt;</span>&#123;&#125;) <span class="comment">// function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> [] <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> /^$/ <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Date</span>() <span class="comment">// object</span></span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-933'>总结：除基本数据类型或者说是原始数据类型外，引用数据类型与 null 都不能正确给出区分。</span></p><blockquote><center>检测原理</center></blockquote><ol><li>所有数据类型在计算机中都按照二进制的值进行存储；</li><li><strong><code>对象数据类型的二进制值都是以 000 开头，不论是普通对象还是数组或正则，null 在计算机中的存储也是以二进制 000 存储</code></strong></li><li><span class='custom-box custom-box-393'>typeof 检测数据类型是根据检测值的二进制检测的，只要检测是以 000 开头，都认为是对象。</span></li></ol><h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浏览器发现比较两边类型不一样，会默认进行隐式转换，转换为相同类型再进行比较</span></span><br><span class="line"><span class="keyword">if</span> (a == <span class="string">&#x27;undefined&#x27;</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>浏览器发现比较两边类型不一样，会默认进行隐式转换，转换为相同类型再进行比较</p></blockquote><h4 id="比较规则"><a href="#比较规则" class="headerlink" title="== 比较规则"></a><code>==</code> 比较规则</h4><ul><li>NaN == NaN 不相等</li><li>null == undefined 相等</li><li>字符串 == 对象 先将对象转换为字符串（a. 对象[Symbol.primitive]; b. 对象.valueOf() 获取对象的原始值；c. 若无，对象.toString()），再进行比较</li><li>其它数据类型比较，都是按照“转换为数字类型（（a. 对象[Symbol.primitive]; b. 对象.valueOf() 获取对象的原始值；c. 若无，对象.toString()）；d. Number(c的结果字符串)）然后再比较”的规则处理的。</li></ul><h2 id="value-instanceof-constructor"><a href="#value-instanceof-constructor" class="headerlink" title="[value] instanceof [constructor]"></a>[value] instanceof [constructor]</h2><h2 id="value-constructor"><a href="#value-constructor" class="headerlink" title="[value].constructor"></a>[value].constructor</h2><h2 id="Object-prototype-toString-call-value"><a href="#Object-prototype-toString-call-value" class="headerlink" title="Object.prototype.toString.call([value])"></a>Object.prototype.toString.call([value])</h2>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-引用类型</title>
      <link href="/2012/03/19/JavaScript-4-%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
      <url>/2012/03/19/JavaScript-4-%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>对象数据类型即引用类型</p><pre class="mermaid"> mindmap 对象数据类型   普通对象     类数组    实例    原型对象  数组对象   正则对象   日期对象   Set/Map</pre><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><h3 id="创建字面量-Literal-对象"><a href="#创建字面量-Literal-对象" class="headerlink" title="创建字面量(Literal)对象"></a>创建字面量(Literal)对象</h3><blockquote><p>由 0 到 多组<u>键值对(属性名和属性值)</u>组成。</p></blockquote><ul><li>属性名是对象的一个属性；</li><li>属性名一般是字符串，也可以是数字、布尔值、undefined、null、Symbol<br><font color='red'>Uncaught SyntaxError: Unexpected number</font> 属性名不可以是 bigInt 类型</li><li>如果将属性名设置为 Object 类型，会通过 toString 将属性名转换为 [object Object]</li><li>属性名设置为函数，可以正常编译通过。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> symb = <span class="title class_">Symbol</span>(<span class="string">&#x27;bracket&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> myBaby = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Audery&#x27;</span>,</span><br><span class="line">  <span class="number">0</span>: <span class="number">111</span>,</span><br><span class="line">  [symb]: <span class="number">1</span> <span class="comment">// 注意 Symbol 类型的值要用 [] 包裹起来</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建实例对象"><a href="#创建实例对象" class="headerlink" title="创建实例对象"></a>创建实例对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> baby = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">baby.<span class="property">name</span> = <span class="string">&#x27;Audery&#x27;</span>,</span><br><span class="line">baby.<span class="property">age</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure><blockquote><p>开发过程中实际多采用字面量形式创建对象，<u>字面量对象避端是<font color="#FFD700">产生大量重复代码</font>**</u></p></blockquote><h2 id="对象成员访问"><a href="#对象成员访问" class="headerlink" title="对象成员访问"></a>对象成员访问</h2><blockquote><p>获取对象中某个属性名对应的属性值</p></blockquote><ul><li>对象.属性名<br><span class='custom-box custom-box-933'>仅适用于属性名为字符串类型</span></li><li>对象[属性名]<br><span class='custom-box custom-box-393'>注意：这种方式获取属性值时，要特别关注<code>属性名数据类型</code></span></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myBaby.<span class="property">name</span>) <span class="comment">// Audery</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myBaby[<span class="number">0</span>]) <span class="comment">// 111</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myBaby[symb]) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>对象内置属性<br><code>__proto__</code> [[prototype]] 对象属性，对象创建时生成</p><h2 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h2><p>JavaScript 是基于原型的面向对象语言，对象默认有 prototype，可以将需要共享的实例方法绑在 prototype 上，达到方法共享的目的。对象每个实例都有各自 <code>__proto__</code> 属性，该属性指向对象的 prototype 属性上。这种原型链接的关系称为原型链，null 是原型链的最后一个链接。</p><p><a href="https://segmentfault.com/a/1190000015727237">继承</a></p><h3 id="JavaScript-继承"><a href="#JavaScript-继承" class="headerlink" title="JavaScript 继承"></a>JavaScript 继承</h3><ul><li>原型链继承<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Super</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">// 实现继承</span></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Super</span>()</span><br></pre></td></tr></table></figure><blockquote><p>只要把子类的原型指向父类的实例就可以了，再演示一个更丰满的例子</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Base</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">friends</span> = [<span class="string">&#x27;lily&#x27;</span>, <span class="string">&#x27;lucy&#x27;</span>, <span class="string">&#x27;coco&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现继承</span></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Base</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Audery</span> = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;Audery&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Gulu</span> = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;Gulu&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Gulu</span>.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&#x27;emily&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Audery</span>.<span class="property">friends</span>)</span><br></pre></td></tr></table></figure><blockquote><p>引用类型会出现数组引用多实例因共享导致的相互污染的问题，考虑使用 ** 构造函数继承 ** 实现</p></blockquote><ul><li><p>构造函数继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Base</span>(<span class="params">female</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sex</span> = female</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">friends</span> = [<span class="string">&#x27;lily&#x27;</span>, <span class="string">&#x27;lucy&#x27;</span>, <span class="string">&#x27;coco&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name, age, female</span>) &#123;</span><br><span class="line">  <span class="comment">// 对象冒充调用父类方法</span></span><br><span class="line">  <span class="title class_">Base</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, female); <span class="comment">// 子类冒充父类，子类调用父类构造函数。即，子类复制子父类代码</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Audery</span> = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;Audery&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Gulu</span> = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;Gulu&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Gulu</span>.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&#x27;emily&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Audery</span>.<span class="property">friends</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Gulu</span>.<span class="property">friends</span>)</span><br></pre></td></tr></table></figure><blockquote><p>上面说了，通过对象冒充调用父类构造方法，其实就是复制父类构造函数中的属性、方法，到子类构造函数中，原型方法无法继承</p></blockquote></li><li><p>组合继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Base</span>(<span class="params">female</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sex</span> = female</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">friends</span> = [<span class="string">&#x27;lily&#x27;</span>, <span class="string">&#x27;lucy&#x27;</span>, <span class="string">&#x27;coco&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Base</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;I have some friends, they are &#x27;</span> + <span class="variable language_">this</span>.<span class="property">friends</span>.<span class="title function_">join</span>(<span class="string">&#x27;、&#x27;</span>)+<span class="string">&#x27; respectively!&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name, age, female</span>) &#123;</span><br><span class="line">  <span class="comment">// 对象冒充调用父类方法</span></span><br><span class="line">  <span class="title class_">Base</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, female); <span class="comment">// 子类冒充父类，子类调用父类构造函数。即，子类复制子父类代码</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型继承父类实例指向子类原型</span></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Base</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Audery</span> = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;Audery&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Gulu</span> = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;Gulu&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Gulu</span>.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&#x27;emily&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>组合继承实现了：</p></blockquote><ul><li><input disabled="" type="checkbox"> 属性私有化、方法共享、引用数组间不相互污染</li></ul></li></ul><p>** 以上是原型链继承的周边，不使用 Object.create， 以下是使用 Object.create 方法相关继承的演生 **</p><ul><li><p>原型式继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">base</span>(<span class="params">o</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = o;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> baseObj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;基类&#x27;</span>,</span><br><span class="line">  <span class="attr">arr</span>: [<span class="string">&#x27;array1&#x27;</span>,<span class="string">&#x27;array2&#x27;</span>,<span class="string">&#x27;array3&#x27;</span>],</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>, <span class="variable language_">this</span>.<span class="property">arr</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> baseInstance1 = <span class="title function_">base</span>(baseObj)</span><br><span class="line"><span class="keyword">var</span> baseInstance2 = <span class="title function_">base</span>(baseObj)</span><br><span class="line">baseInstance2.<span class="property">name</span> = <span class="string">&#x27;修改属性值&#x27;</span></span><br><span class="line">baseInstance1.<span class="property">arr</span>.<span class="title function_">push</span>(<span class="string">&#x27;array4&#x27;</span>)</span><br><span class="line"><span class="comment">/* === baseInstance2 添加了一个实例属性 === */</span></span><br></pre></td></tr></table></figure></li><li><p>寄生式继承</p></li><li><p>寄生组合继承</p></li><li><p>Class extends</p><blockquote><p>如果子类中存在构造函数，则需要在使用 this 之前首先调用 super。 与寄生组合继承不同的是，ES6 先将父类实例对象的属性和方法加到 this 上，必须先调用 super 方法，然后再用的子类构造函数修改 this</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * babel.min.js:2 Uncaught SyntaxError: Inline Babel script: &#x27;this&#x27; is not allowed before super()</span></span><br><span class="line"><span class="comment">     3 |   constructor(props) &#123;</span></span><br><span class="line"><span class="comment">      4 |     // super(props);</span></span><br><span class="line"><span class="comment">    &gt; 5 |     this.state = &#123;date: new Date()&#125;;</span></span><br><span class="line"><span class="comment">        |     ^</span></span><br><span class="line"><span class="comment">      6 |   &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>实现原理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个指定的对象的原型 ( 即, 内部[[Prototype]]属性）到另一个对象或  null。</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property">setPrototypeOf</span> = <span class="keyword">function</span> (<span class="params">obj, proto</span>) &#123;</span><br><span class="line">  obj.<span class="property">__proto__</span> = proto;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// B 的实例继承 A 的实例</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(B.<span class="property"><span class="keyword">prototype</span></span>, A.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// B 继承 A 的静态属性</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(B, A);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Object </tag>
            
            <tag> 对象继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-函数</title>
      <link href="/2012/03/18/JavaScript-5-%E5%87%BD%E6%95%B0/"/>
      <url>/2012/03/18/JavaScript-5-%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>Javascript 是函数式编程，函数是第一类对象，是一等公民。函数具有封装的特性，减少代码重复，是执行特定任务的<strong>代码块</strong>。Javascript 中的函数是可调用的对象。函数声明和函数表达式的不同在于调用时机不同。</p><h2 id="函数声明（function-decalations）"><a href="#函数声明（function-decalations）" class="headerlink" title="函数声明（function decalations）"></a>函数声明（function decalations）</h2><p>以关键字 function 开头，函数名，小括号参数名以逗号隔开，参数可选；大括号包含函数体，大括号必须。</p><blockquote><p>函数声明是通过字面量(function literal)创建，必须有函数名的独立语句，用函数名作为引用方式，方便调用。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明，内存中存储的值是一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">arg1,arg2,...</span>)&#123;&#125;</span><br><span class="line"><span class="comment">// 函数表达式创建函数【注意：在变量提升中有一些区别】它是将匿名函数赋值给变量</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 返回一个匿名函数</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用匿名函数定义事件行为</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="comment">// 函数调用</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="comment">// x,y 形参</span></span><br><span class="line"><span class="comment">// ES6 设置默认值方式 x=0, y=0</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">average</span>(<span class="params">x=<span class="number">0</span>,y=<span class="number">0</span></span>)&#123;</span><br><span class="line"><span class="comment">// 处理传入非数字类型参数</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> x !== <span class="string">&#x27;number&#x27;</span>) <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&#x27;参数非数字类型&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> y !== <span class="string">&#x27;number&#x27;</span>) <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&#x27;参数非数字类型&#x27;</span>)</span><br><span class="line"><span class="comment">// ES6 之前处理参数</span></span><br><span class="line"><span class="comment">// x = x || 0</span></span><br><span class="line"><span class="comment">// y = y || 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> average = ((x + y) / <span class="number">2</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> average</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数调用</span></span><br><span class="line"><span class="comment">// 1,2,3 实参</span></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><blockquote><p>更多关于函数参数——<a href="/2023/02/03/Javascript-%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0">详见(Javascript-函数参数)</a></p></blockquote><h2 id="自执行函数-Immediately-Invoked-Function-Expression"><a href="#自执行函数-Immediately-Invoked-Function-Expression" class="headerlink" title="自执行函数(Immediately Invoked Function Expression)"></a>自执行函数(Immediately Invoked Function Expression)</h2><blockquote><p>需求：定义一个 自执行（立即执行函数 IIFE）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;()</span><br></pre></td></tr></table></figure><p><font color="#f33">Uncaught SyntaxError: Function statements require a function name (at (index):41:4)<br>Javascript 引擎解析 uncaught SyntaxError。函数声明需要一个函数名。</font><br><span class='custom-box custom-box-393'>Function Statements 函数声明 需要一个函数名，Javascript 引擎将 <code>function()&#123;&#125;(3)</code> 解析为一个声明。而立即执行函数为一个匿名函数表达式，表达式需要用括号括起来，或在表达式前加<code>~</code>，具体写法如下：</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)() <span class="comment">// 返回 undefined</span></span><br></pre></td></tr></table></figure><p>将函数表达式放入括号内，目的是告诉 Javascript 引擎，目前处理的是一个函数表达式。也可以用一元表达式，告诉浏览器引擎，当前语句为 Javascript 表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">!<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;()</span><br><span class="line">+<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;()</span><br><span class="line">-<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;()</span><br><span class="line">~<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;()</span><br></pre></td></tr></table></figure><p><span class='custom-box custom-box-933'>注意使用一元表达式创建的立即执行函数并没有存在其它地方。<br></span></p><h2 id="函数构造器"><a href="#函数构造器" class="headerlink" title="函数构造器"></a>函数构造器</h2><p>通过字符串，构造出一个新的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;return a + b&#x27;</span>)</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="箭头函数（lambda）"><a href="#箭头函数（lambda）" class="headerlink" title="箭头函数（lambda）"></a>箭头函数（lambda）</h2><blockquote><p><a href="/2019/03/18/JavaScript-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0">详见-Javascript-箭头函数</a></p></blockquote><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>构造函数的目的是创建一个新对象，并进行初始化设置，然后作为构造函数的返回值。<br>可以通过构造函数，构造并初始化一个新对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ConFn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">fn</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> conFnObj = <span class="keyword">new</span> <span class="title class_">ConFn</span>()</span><br></pre></td></tr></table></figure><h3 id="new-一个构造函数会进行如下操作："><a href="#new-一个构造函数会进行如下操作：" class="headerlink" title="new 一个构造函数会进行如下操作："></a>new 一个构造函数会进行如下操作：</h3><ul><li>创建一个新空对象</li><li>该对象作为 <code>this</code> 参数传递给构造函数，并初化，且该对象成为函数上下文</li><li>新创建的对象作为 new 运算符的返回值<h3 id="构造函数的返回值"><a href="#构造函数的返回值" class="headerlink" title="构造函数的返回值"></a>构造函数的返回值</h3></li><li>构造函数显式返回非对象类型，构造函数忽略返回值，返回新创建的对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">variable</span> = <span class="string">&#x27;variable&#x27;</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Fn</span>()) <span class="comment">// Fn &#123;variable: &#x27;variable&#x27;&#125; 返回调用构造函数生成的对象</span></span><br></pre></td></tr></table></figure></li><li>构造函数显式返回对象类型，则对象作为构造函数实例的返回值，传入的构造函数 <code>this</code> 被丢弃<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">getThis</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fnObj = <span class="keyword">new</span> <span class="title class_">Fn</span>() <span class="comment">// fnObj &#123;&#125;</span></span><br><span class="line">fnObj.<span class="title function_">getThis</span>() <span class="comment">// Uncaught TypeError: fnObj.getThis is not a function</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h2><blockquote><p><a href="/2023/02/14/JavaScript-%E7%94%9F%E6%88%90%E5%99%A8%E5%87%BD%E6%95%B0/">详见-Javascript-生成器函数</a></p></blockquote><h2 id="函数使用场景"><a href="#函数使用场景" class="headerlink" title="函数使用场景"></a>函数使用场景</h2><blockquote><p>通过字面量创建</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">arg1,arg2,...</span>)&#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>赋值给变量，数组，其它对象属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">obj.<span class="property">fn</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>作为参数，回调</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">callback</span>) &#123;</span><br><span class="line"><span class="title function_">callback</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>作为函数返回值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>动态创建和分配属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">fn.<span class="property">name</span> = <span class="string">&#x27;function&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><blockquote><p>使用场景 —— 事件、服务器渲染、UI 动画</p></blockquote><h2 id="函数上下文"><a href="#函数上下文" class="headerlink" title="函数上下文"></a>函数上下文</h2><blockquote><p><a href="/2023/02/02/Javascript-%E5%87%BD%E6%95%B0%E4%B8%8A%E4%B8%8B%E6%96%87">详见 —— Javascript-函数上下文/</a></p></blockquote><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><blockquote><p>严格模式是在 ES5 中引入的特性。它可以改变 Javascript 引擎的默认行为并执行更加严格的语法检查。普通模式下静默错误会在严格模式下抛出异常。在严格模式下，部分语言特性会被改变，甚至会完全禁用一些不安全的语言特性</p></blockquote><h3 id="严格模式下被禁用的语言特性"><a href="#严格模式下被禁用的语言特性" class="headerlink" title="严格模式下被禁用的语言特性"></a>严格模式下被禁用的语言特性</h3><ul><li>arguments 在严格模式下不能作为函数的别名，即不能通过修改 argument[n] 修改参数的值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">arg1</span>) &#123;</span><br><span class="line"><span class="comment">// 非严格模式下，无论修改 arguments[0] 还是 arg1，两个变量值会保持一致</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>], arg1) <span class="comment">// 1 1</span></span><br><span class="line">arg1 = <span class="number">2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>], arg1) <span class="comment">// 1 2 arg1 参数的值修改为2，但 arguments[0] 保持不变</span></span><br><span class="line"><span class="variable language_">arguments</span>[<span class="number">0</span>] = <span class="number">3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>], arg1) <span class="comment">// 3 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li>严格模式下，不允许使用解构参数、剩余参数、默认参数</li><li>this 严格模式下，全局环境直接调用函数，<code>this:undefined</code>，非全局模式下 <code>this: window</code></li></ul><h2 id="函数与严格模式"><a href="#函数与严格模式" class="headerlink" title="函数与严格模式"></a>函数与严格模式</h2><img  src=http://www.plantuml.com/plantuml/svg/dPDFQzim6CRl_HIYbu9XRETHIY_x0XixbJ1SHsuCiHnaXMItREsM19AuZ6HBGjgr95dThNKA7SmGk_ioal-SyXKcMvtdiEtIcv0U_TxdVVHgroGo9hg6YhfSsP00Q_h1u6RbjTGgKeXce9NNtf0a43hNRFOzEvKnDcfWNIC16HzKTOY82PXt6FRjbTTXreBwF_cQjI-fFsBMMmw8UZ-OzJ6v8e6NI96h1oK2daCLOeWK-8opyTCSJ3C1CWWeGbL3i9Yu4JxOz2OOzd9UkKGforXErkn3HwYYSpkwksEUbHV2UWL3qynvf-uyEFC2-vmhXRFj_PtCmzwJmlRZ_HtgzlYku8PNLzHjY8QICzPwprhVw7BA2r9tHjslp1h6JIi9eNkRQuUwtUZGf_v4tEMNs75Nb7pn6X6vVX_0PjM4m2HOKyXc6e1SBXirM0GQof87DOsK-25wP6fwfGn1XRUlGmAncHAbLs1FrJ1KZNg1MVFWTX3tHz5YiVB6QtZkYRrx4pakczZC_G9uE0G8V-7uI3HCtUkCgPImeSD2V7BAaLonzGUs5NIQT3bBsavPmQJDPQ7JODt1xuu_yOp-uZxCQhmSHixiFrOVXemkfi7fqR-H81WvSMESdvFSr2V3llQiOlQ5BiqqUvzKl9nd0i1BneqpKIpzSVtFGUkOZUpxhLt8_wZufxy0>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Function </tag>
            
            <tag> 函数作用域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-其它原始数据类型</title>
      <link href="/2012/02/07/JavaScript-3-%E5%85%B6%E5%AE%83%E7%B1%BB%E5%9E%8B/"/>
      <url>/2012/02/07/JavaScript-3-%E5%85%B6%E5%AE%83%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<pre class="mermaid"> mindmap 其它原始数据类型  布尔   Symbol   BigInt</pre><h2 id="布尔类型的值"><a href="#布尔类型的值" class="headerlink" title="布尔类型的值"></a>布尔类型的值</h2><blockquote><p>true / false</p></blockquote><h2 id="其它类型转换为布尔类型"><a href="#其它类型转换为布尔类型" class="headerlink" title="其它类型转换为布尔类型"></a>其它类型转换为布尔类型</h2><p><code>Boolean([value])</code> 或 <code>!![value]</code></p><blockquote><ul><li>只有 0 NaN 空字符串 null undefined 会被转换为 false，其它都会被转换为 true</li></ul></blockquote><h2 id="Symbol-唯一值"><a href="#Symbol-唯一值" class="headerlink" title="Symbol 唯一值"></a>Symbol 唯一值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Symbol</span>(<span class="string">&#x27;A&#x27;</span>) <span class="comment">// 参数只是加标识，方便调试</span></span><br><span class="line"><span class="title class_">Symbol</span>() === <span class="title class_">Symbol</span>() <span class="comment">// flase 因为每次调用 Symbol 都是在创建唯一值</span></span><br><span class="line"><span class="title class_">Symbol</span>(<span class="string">&#x27;a&#x27;</span>) === <span class="title class_">Symbol</span>(<span class="string">&#x27;a&#x27;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="BigInt-大数"><a href="#BigInt-大数" class="headerlink" title="BigInt 大数"></a>BigInt 大数</h2><blockquote><p>从服务器获取数据，服务器存储数据的时候，如果用的是大数存储，返回给客户端的信息可能超过最大安全数，这样导致后续计算不准确。<br><code>Number.MAX_SAFE_INTEGER // 最大安全数 9007199254740991</code><br><code>Number.MIN_SAFE_INTEGER // 最小安全数 -9007199254740991</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">BigInt</span>(<span class="number">9007199254740992</span>) <span class="comment">// 9007199254740992n</span></span><br><span class="line"><span class="title class_">BigInt</span>(<span class="number">9007199254740992</span>) + <span class="number">3</span></span><br></pre></td></tr></table></figure><p><font color='red'>Cannot mix BigInt and other types, use explicit conversions(显式转换)</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">BigInt</span>(<span class="number">9007199254740992</span>) + <span class="number">3n</span> <span class="comment">// 9007199254740995n</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-字符串</title>
      <link href="/2012/01/09/JavaScript-2-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2012/01/09/JavaScript-2-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><blockquote><p>字符串是由一个或多个字符组成，须由引号包裹；<br>  每个字符串都有自己的 lenght 属性；<br>  字符串中每个字符都有相应的位置，该位置被称为<strong>索引</strong><br>  索引值从 0 开始，逐步递增<br>  最后一个字符的索引为 string.length - 1</p></blockquote><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><blockquote><p>双引号 “” / 单引号 ‘’ / 反引号 `` 包起来的都是<span class='custom-box custom-box-933'>字符串</span></p></blockquote><div class="custom-box-339">``反引号，ES6新增的模版字符串，有助于字符串的拼接</div><h3 id="模板字符串实现字符串拼接"><a href="#模板字符串实现字符串拼接" class="headerlink" title="模板字符串实现字符串拼接"></a>模板字符串实现字符串拼接</h3><blockquote><p>js 表达式 —— 执行代码有返回结果，如变量/三元运算符…<br>  ${} 用来包裹 JS 表达式<br>  <code>+</code> 用于拼接字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>, y = <span class="number">2</span>, z = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">`<span class="subst">$&#123;x&#125;</span> + <span class="subst">$&#123;y&#125;</span> = <span class="subst">$&#123;x+y&#125;</span>`</span></span><br></pre></td></tr></table></figure><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p><code>+</code> 加号的字符串拼接<br><code>+</code> 加号的左右两边，有一边是字符串，结果为字符串；<br><code>+</code> 加号的左右两边，有一边是对象【目的是将对象转换为数字，接着进行数学运算】<br>    * 获取对象的[Symbol.toPrimitive]或者valueOf<br>    * 未拿到原始值，则基于 toString 将对象转换为字符串<br>    * 对象转换为字符串后进行字符串拼接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>+[<span class="number">1</span>,<span class="number">2</span>]) <span class="comment">// &#x27;11,2&#x27;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将对象转换为数字，进行数学运算</span></span><br><span class="line"><span class="comment"> * [1,2][Symbol.toPrimitive] undefined</span></span><br><span class="line"><span class="comment"> * [1,2].valueOf() [1,2] 非原始值类型</span></span><br><span class="line"><span class="comment"> * [1,2].toString() &#x27;1,2&#x27;</span></span><br><span class="line"><span class="comment"> * &#x27;1&#x27; + &#x27;1,2&#x27; &#x27;112&#x27;</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="其他数据类型转换为字符串"><a href="#其他数据类型转换为字符串" class="headerlink" title="其他数据类型转换为字符串"></a>其他数据类型转换为字符串</h2><ul><li>[value].toString()</li><li>String([value])<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">String</span>(<span class="number">1</span>) <span class="comment">// &#x27;1&#x27;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="title class_">NaN</span>) <span class="comment">// &#x27;NaN&#x27;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="title class_">Infinity</span>) <span class="comment">// &#x27;Infinity&#x27;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">true</span>) <span class="comment">// &#x27;true&#x27;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">null</span>) <span class="comment">// &#x27;null&#x27;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">undefined</span>) <span class="comment">// &#x27;undefined&#x27;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="title class_">Symbol</span>()) <span class="comment">// &#x27;Symbol()&#x27;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="title class_">BigInt</span>(<span class="number">10</span>)) <span class="comment">// &#x27;10&#x27;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;) <span class="comment">// &#x27;function()&#123;&#125;&#x27;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="regexp">/^$/</span>) <span class="comment">// &#x27;/^%/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ========== 数组 ============ */</span></span><br><span class="line"><span class="title class_">String</span>([<span class="number">1</span>,<span class="number">2</span>]) <span class="comment">// &#x27;1,2&#x27;</span></span><br><span class="line"><span class="title class_">String</span>([]) <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ========== 对象 ============ */</span></span><br><span class="line"><span class="title class_">String</span>(&#123;&#125;) <span class="comment">// [object, Object]</span></span><br></pre></td></tr></table></figure><span class='custom-box custom-box-933'>总结：</span><ul><li>数组转换为字符串，是将数组中每一项用逗号分隔；空数组转换为空字符串；</li><li>普通对象转换为字符串，不论对象中包含哪些信息，结果都是 “[object, Object]”;</li><li>其它类型都是直接用引号包裹即可</li></ul></li></ul><blockquote><p><code>需求删除最后一个为 &amp; 的字符</code></p></blockquote><h3 id="String-prototype-replace-返回一个部分或全部匹配由替代模式所取代的新的字符串。"><a href="#String-prototype-replace-返回一个部分或全部匹配由替代模式所取代的新的字符串。" class="headerlink" title="String.prototype.replace() 返回一个部分或全部匹配由替代模式所取代的新的字符串。"></a>String.prototype.replace() 返回一个部分或全部匹配由替代模式所取代的新的字符串。</h3><blockquote><p>str.replace(regexp|substr, newSubStr|function)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;zhangliping&amp;&#x27;</span></span><br><span class="line"><span class="comment">// regexp = /&amp;$/</span></span><br><span class="line">str.<span class="title function_">replace</span>(<span class="regexp">/&amp;$/</span>, <span class="string">&quot;&quot;</span>) <span class="comment">// zhangliping</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * --- 引申 ---</span></span><br><span class="line"><span class="comment"> * 删除字符串全部的 &amp;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">str.<span class="title function_">replace</span>(<span class="regexp">/&amp;$/g</span>, <span class="string">&quot;&quot;</span>) <span class="comment">// 全局替换</span></span><br><span class="line">str.<span class="title function_">replace</span>(<span class="regexp">/^&amp;/</span>,<span class="string">&quot;&quot;</span>) <span class="comment">// 替换开头</span></span><br><span class="line">str.<span class="title function_">replace</span>(<span class="regexp">/[?&amp;]$/</span>, <span class="string">&quot;&quot;</span>) <span class="comment">//替换结尾的 ? 或 &amp;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">formatParamets</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>; <span class="comment">// 获取当前浏览器的URL</span></span><br><span class="line">  <span class="keyword">const</span> params = &#123;&#125;; <span class="comment">// 存储最终JSON结果对象</span></span><br><span class="line">  url.<span class="title function_">replace</span>(<span class="regexp">/([^?&amp;]+)=([^?&amp;]+)/g</span>, <span class="function">(<span class="params">match, p1, p2</span>) =&gt;</span> &#123;</span><br><span class="line">    params[p1] = <span class="built_in">decodeURIComponent</span>(p2); <span class="comment">// 解析字符为中文</span></span><br><span class="line">    <span class="keyword">return</span> p2 + <span class="string">&#x27;=&#x27;</span> + p1;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分割字符串"><a href="#分割字符串" class="headerlink" title="分割字符串"></a>分割字符串</h2><h3 id="String-prototype-slice-方法取字符串的一部分，返回新字符串，原字符串不动"><a href="#String-prototype-slice-方法取字符串的一部分，返回新字符串，原字符串不动" class="headerlink" title="String.prototype.slice() 方法取字符串的一部分，返回新字符串，原字符串不动"></a>String.prototype.slice() 方法取字符串的一部分，返回新字符串，原字符串不动</h3><blockquote><p>str.slice(beginIndex[, endIndex])</p></blockquote><ul><li>beginIndex 从该索引（以 0 这基数）处开始提取原字符串。如果为负数，会被当做 strlength + beginLength</li><li>endIndex 可选，以 0 基数，endIndex 处结束提取字符串。省略则视为默认 strlength。或为负数，endIndex = strlength - endIndex</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;zhangliping&amp;&#x27;</span></span><br><span class="line"><span class="comment">// 取默认值，str.slice() 不传参</span></span><br><span class="line">str.<span class="title function_">slice</span>() <span class="comment">// zhangliping&amp; beginIndex 默认值 0， endIndex 默认值 strlength</span></span><br><span class="line"><span class="comment">// beginIndex &gt;= strlength, endIndex 取默认值</span></span><br><span class="line">str.<span class="title function_">slice</span>(-<span class="number">1</span>) <span class="comment">// &#x27;&amp;&#x27; beginIndex = strlength - 1，截取到字符串长度</span></span><br><span class="line"><span class="comment">// start &lt; 0 &amp;&amp; abs(start) &gt; strlength, length 取默认值</span></span><br><span class="line">str.<span class="title function_">slice</span>(-<span class="number">100</span>) <span class="comment">// &#x27;zhangliping&amp;&#x27;</span></span><br><span class="line"><span class="comment">// beginIndex 取默认值 0，endIndex &gt;= strlength</span></span><br><span class="line">str.<span class="title function_">slice</span>(<span class="number">13</span>) <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="comment">// beginIndex &lt; 0，endIndex 取默认值</span></span><br><span class="line">str.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">12</span>) <span class="comment">// zhangliping&amp;</span></span><br><span class="line"><span class="comment">// beginIndex 取默认值 0，endIndex &lt; 0</span></span><br><span class="line">str.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>) <span class="comment">// &#x27;zhangliping&#x27; endIndex = strlength - 1 截取最后一位</span></span><br><span class="line"><span class="comment">// beginIndex 取默认值 0，endIndex == 0</span></span><br><span class="line">str.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">0</span>) <span class="comment">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="String-prototype-substring-返回从开始位置到结束位置的一个子集。"><a href="#String-prototype-substring-返回从开始位置到结束位置的一个子集。" class="headerlink" title="String.prototype.substring() 返回从开始位置到结束位置的一个子集。"></a>String.prototype.substring() 返回从开始位置到结束位置的一个子集。</h3><blockquote><p>str.substring(indexStart[, indexEnd])</p></blockquote><ul><li>indexStart 需要截取的第一个字符的索引，该索引位置的字符作为返回字符串的首字母</li><li>indexEnd 0 到字符串长度之间的整数，以该数字为索引的字符不包含截取位置内</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;zhangliping&amp;&#x27;</span>;</span><br><span class="line"><span class="comment">// str.substring() indexStart 默认值 0； indexEnd 默认值 strlength</span></span><br><span class="line">str.<span class="title function_">substring</span>() <span class="comment">// &#x27;zhangliping&amp;&#x27;</span></span><br><span class="line"><span class="comment">// indexStart &gt; strlength</span></span><br><span class="line">str.<span class="title function_">substring</span>(<span class="number">5</span>) <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="comment">// indexStart &lt; 0 &amp;&amp; abs(indexStart) &gt; strlength</span></span><br><span class="line">str.<span class="title function_">substring</span>(-<span class="number">15</span>) <span class="comment">// indexStart = 0</span></span><br><span class="line"><span class="comment">// indexStart &lt; 0 &amp;&amp; abs(indexStart) &lt; strlength</span></span><br><span class="line">str.<span class="title function_">substring</span>(-<span class="number">1</span>) <span class="comment">// indexStart = 0</span></span><br><span class="line"><span class="comment">// indexStart = 0 indexEnd &gt; strlength</span></span><br><span class="line">str.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">15</span>) <span class="comment">// &#x27;zhangliping&amp;&#x27;</span></span><br><span class="line">str.<span class="title function_">substring</span>(<span class="number">0</span>, str.<span class="property">length</span>-<span class="number">1</span>);<span class="comment">// zhangliping</span></span><br></pre></td></tr></table></figure><h3 id="String-proptotype-substr-返回一个字符串从指定位置开始"><a href="#String-proptotype-substr-返回一个字符串从指定位置开始" class="headerlink" title="String.proptotype.substr() 返回一个字符串从指定位置开始"></a>String.proptotype.substr() 返回一个字符串从指定位置开始</h3><blockquote><p>被认作是遗留的函数，非 JavaScript 核心语言的一部分。目前没有严格被废弃。但将来可能被移除<br>str.substr(start[, length])</p></blockquote><ul><li>不会改变原字符串</li><li>start 与 slice 的第一个参数相同从该索引（以 0 这基数）处开始提取原字符串，若为负数，看作 strlength（字符串长度） + start。</li><li><ul><li>Microsoft’ JScript 不支持负 start 索引 **</li></ul></li><li>length 提取的字符数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;zhangliping&#x27;</span>;</span><br><span class="line"><span class="comment">// str.substr() 不传参</span></span><br><span class="line">str.<span class="title function_">substr</span>() <span class="comment">// &#x27;zhangliping&#x27; start 默认值 0， length 默认值字符串长度</span></span><br><span class="line"><span class="comment">// start &gt;= strlength length 取默认值</span></span><br><span class="line">str.<span class="title function_">substr</span>(<span class="number">13</span>) <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="comment">// start &lt; 0 length 取默认值</span></span><br><span class="line">str.<span class="title function_">substr</span>(-<span class="number">14</span>) <span class="comment">// &#x27;zhangliping&#x27; 取出全部字符串</span></span><br><span class="line"><span class="comment">// start 取默认值 0，length &gt;= strlength</span></span><br><span class="line">str.<span class="title function_">substr</span>(-<span class="number">4</span>) <span class="comment">// start = strlength - 4 从 index = 8 开始截取</span></span><br><span class="line"><span class="comment">// start &lt; 0 &amp;&amp; abs(start) &gt; strlength, length 取默认值</span></span><br><span class="line">str.<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">14</span>) <span class="comment">// &#x27;zhangliping&#x27;</span></span><br><span class="line"><span class="comment">// start 取默认值 0， length &lt;= strlength</span></span><br><span class="line">str.<span class="title function_">substr</span>(<span class="number">0</span>, -<span class="number">1</span>) <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="comment">// 截取字符串最后一位</span></span><br><span class="line">str.<span class="title function_">substr</span>(<span class="number">0</span>, strlength - <span class="number">1</span>) <span class="comment">// &#x27;zhangliping&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="slice-substr-substring-对比"><a href="#slice-substr-substring-对比" class="headerlink" title="slice/substr/substring 对比"></a>slice/substr/substring 对比</h3><table><thead><tr><th>方法名</th><th>参数一</th><th>参数二</th></tr></thead><tbody><tr><td>slice</td><td>beginIndex — 开始位置索引，以 0 为基数</td><td>endIndex — 截取至 endIndex - 1 位置</td></tr><tr><td>substr</td><td>start — 同上</td><td>length - 截取字符长度</td></tr><tr><td>substring</td><td>indexStart — 同上</td><td>indexEnd — 截取至 indexEnd - 1 的位置</td></tr></tbody></table><table><thead><tr><th>方法名</th><th>参数一abs(负数)并大于等于字符串长度</th><th>参数一负数并小于字符串长度</th><th>参数一大于 strlength</th><th>参数二abs(负数)并大于等于字符串长度</th><th>参数一负数并小于字符串长度</th><th>参数二大于 strlength</th></tr></thead><tbody><tr><td>slice</td><td>beginIndex = 0</td><td>beginIndex = strlength - beginIndex</td><td>返回空串</td><td>endIndex = 0</td><td>endIndex = strlength - endIndex</td><td>endIndex = strlength</td></tr><tr><td>substr</td><td>同上</td><td>同上</td><td>同上</td><td>同上</td><td></td><td>length = strlength</td></tr><tr><td>substring</td><td>indexStart = 0</td><td>indexStart = 0</td><td>同上</td><td>indexEnd = 0</td><td>indexEnd = 0</td><td>indexEnd = strlength</td></tr></tbody></table><blockquote><ol><li> slice、substring、sub 都是字符串截取方法；</li><li> substring 参数不能为负数，如果有负数，则视为 0；</li><li> substr 与 slice 同参数可以为负数。当为负数时，实际取的值是当前参数与字符串相加的和，第一个参数相加之和大于 0，时结果为 0；第二个参数相加之和大于 0 时，取字符串长度。substring 与 slice 两个参数都为索引，substr 第二个参数为截取字符串长度。 substr 在淘汰的过程中，慎用。</li></ol></blockquote><h2 id="查找字符串方法"><a href="#查找字符串方法" class="headerlink" title="查找字符串方法"></a>查找字符串方法</h2><h3 id="includes-区分大小写查找字符串，返回-Boolean-值。（ES6-新增方法）"><a href="#includes-区分大小写查找字符串，返回-Boolean-值。（ES6-新增方法）" class="headerlink" title="includes() 区分大小写查找字符串，返回 Boolean 值。（ES6 新增方法）"></a>includes() 区分大小写查找字符串，返回 Boolean 值。（ES6 新增方法）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Mr Brownlow, fortunately, was able to persuade him to abandon this wild idea&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">includes</span>(<span class="string">&#x27;persuade&#x27;</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="indexOf-和-lastIndexOf-同样是区分大小写匹配字符串，存在返回索引值，否则返回-1。"><a href="#indexOf-和-lastIndexOf-同样是区分大小写匹配字符串，存在返回索引值，否则返回-1。" class="headerlink" title="indexOf() 和 lastIndexOf() 同样是区分大小写匹配字符串，存在返回索引值，否则返回 -1。"></a>indexOf() 和 lastIndexOf() 同样是区分大小写匹配字符串，存在返回索引值，否则返回 -1。</h3><h3 id="match-检索返回一个匹配正则表达式的结果"><a href="#match-检索返回一个匹配正则表达式的结果" class="headerlink" title="match() 检索返回一个匹配正则表达式的结果"></a>match() 检索返回一个匹配正则表达式的结果</h3><blockquote><p>str.match(regexp)<br><code>参数</code>：一个正则表达式对象。<br>若参数为非正则表达式对象，会隐式地使用 <code>new RegExp(obj)</code> 转换为 RegExp<br>若没给参数，参数默认为包含空字符串数组，如 <code>[&quot;&quot;]</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;abc abc&#x27;</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(\w+)/g</span></span><br><span class="line">str.<span class="title function_">match</span>(reg)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  [ &#x27;abc&#x27;, &#x27;abc&#x27; ]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">reg = <span class="regexp">/(\w+)/</span></span><br><span class="line">str.<span class="title function_">match</span>(reg)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> [ &#x27;abc&#x27;, &#x27;abc&#x27;, index: 0, input: &#x27;abc abc&#x27;, groups: undefined ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p><code>返回值：</code><br>使用 g 标志，返回表达式匹配的所有结果，不返回匹配捕获组(<code>[ &#39;abc&#39;, &#39;abc&#39; ]</code>)<br>不使用 g 标志，返回第一个完整匹配及其相关的捕获组（input 搜索字符串；groups 捕获数组或 <code>undefined</code>; index 匹配结果开始位置）。</p></blockquote><h2 id="字符串补齐方法"><a href="#字符串补齐方法" class="headerlink" title="字符串补齐方法"></a>字符串补齐方法</h2><h3 id="padStart-targetLength-padString-在字符串前面加入指定字符padString，达到-targetLength-指定长度"><a href="#padStart-targetLength-padString-在字符串前面加入指定字符padString，达到-targetLength-指定长度" class="headerlink" title="padStart(targetLength[,padString]) 在字符串前面加入指定字符padString，达到 targetLength 指定长度"></a>padStart(targetLength[,padString]) 在字符串前面加入指定字符padString，达到 targetLength 指定长度</h3><h3 id="padEnd-targetLength-padString-在字符串后面加入指定字符-padString，达到-targetLength-指定长度"><a href="#padEnd-targetLength-padString-在字符串后面加入指定字符-padString，达到-targetLength-指定长度" class="headerlink" title="padEnd(targetLength,[,padString]) 在字符串后面加入指定字符 padString，达到 targetLength 指定长度"></a>padEnd(targetLength,[,padString]) 在字符串后面加入指定字符 padString，达到 targetLength 指定长度</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 隐藏电话号码后四位</span></span><br><span class="line"><span class="keyword">var</span> tel = <span class="string">&#x27;13381892220&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> secretTel = tel.<span class="title function_">substr</span>(<span class="number">3</span>, tel.<span class="property">length</span> - <span class="number">8</span>).<span class="title function_">padEnd</span>(tel.<span class="property">length</span>-<span class="number">4</span>, <span class="string">&#x27;*&#x27;</span>).<span class="title function_">padStart</span>(tel.<span class="property">length</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(secretTel) <span class="comment">// ****189****</span></span><br></pre></td></tr></table></figure><h2 id="字符串中常用方法"><a href="#字符串中常用方法" class="headerlink" title="字符串中常用方法"></a>字符串中常用方法</h2><p>str.chartAt<br>str.chartCodeAt<br>str.substr<br>str.substring<br>str.slice<br>str.split<br>str.replace<br>str.instanceof / str.lastIndexOf<br>str.includes<br>str.trim<br>str.match</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-数字类型</title>
      <link href="/2012/01/08/JavaScript-1-%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B/"/>
      <url>/2012/01/08/JavaScript-1-%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h2><h3 id="基本类型（也称原型数据类型，值类型）"><a href="#基本类型（也称原型数据类型，值类型）" class="headerlink" title="基本类型（也称原型数据类型，值类型）"></a>基本类型（也称原型数据类型，值类型）</h3><p>基本类型直接代表了最底层的语言实现，是种非对象无方法与属性的数据，有 7 种原始数据类型。</p><img  src=http://www.plantuml.com/plantuml/svg/SoWkIImgoStCIybDBE3IKdWsTSEptdNFD-v-Eg-RIqjBuUdyNS_ch44MrN_QD__fycva8Os2eipSp9BCibI5bCIIH8MIoe9KJVsd3NlWvcWf59SKPUQbWvbvfRb9gKLWPb9-VavgOXwONPgNafgMcPUQ0bMKamDc15Vc9kL3c4cPwPbv9M1dxPdwVCeA9EFpax9Iaq5IG7PrBOIEZeNG-d4g-c15QQLvoIMP-NbS3gb0_qBy3000><p><font color="#f33">所以object/NaN 是否属于基本类型？？？ECMAScript 标准定义了7种数据类型：</font></p><h2 id="基本数据类型-——-number"><a href="#基本数据类型-——-number" class="headerlink" title="基本数据类型 —— number"></a>基本数据类型 —— number</h2><blockquote><p>number 数字类型的值可以是正数、负数、零以及小数；也是可以 Infinity 无穷大；还可以是 NaN(not a number) 是 number 类型但不是一个有效数字。</p></blockquote><h3 id="isNaN-检测参数是否为有效数字"><a href="#isNaN-检测参数是否为有效数字" class="headerlink" title="isNaN 检测参数是否为有效数字"></a>isNaN 检测参数是否为有效数字</h3><p><b class="custom-box-339"><code>isNaN([value])</code></b><span class="custom-box-993">检测一个值[value]是否为“非有效数字”，返回 true 代表[value]为非有效数字，false 则代表[value]为有效数字。</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果参数[value]不是数字类型的值，则浏览器会默认采用“基于 Number([value]) 进行隐式转换”的方式，将参数转换为数字类型。</span></span><br><span class="line"><span class="keyword">if</span>([value] !== <span class="keyword">typeof</span> number) &#123;</span><br><span class="line">  <span class="title class_">Number</span>([value]) <span class="comment">// 浏览器基于 Number([value]) 实现数据类型转换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Number-value-参数转换为数字详解"><a href="#Number-value-参数转换为数字详解" class="headerlink" title="Number([value]) 参数转换为数字详解"></a>Number([value]) 参数转换为数字详解</h3><ul><li><p>字符串转换为数字类型</p><blockquote><p>Number(‘’), 则转换结果为 0;<br>  Number(‘1’), 则转换结果为 1;<br>  Number(‘1px’), 则转换结果为 NaN;</p></blockquote><div class="custom-box-933">字符串中带除 ‘.’ 以外的非有效数字，转换结果都为 NaN</div><blockquote><p>Number(‘.1.1’), 多个小数点为无效数字，所以转换结果依然是 NaN</p></blockquote></li><li><p>布尔类型转换为数字类型</p><blockquote><p>Number(true) 结果为 1；<br>  Number(false) 结果为 0；</p></blockquote></li><li><p>BigInt 可以转换为数字 </p><blockquote><p>Number(1n) 结果为 1；</p></blockquote></li><li><p>Symbol 类型的值不参转换为数字，<font color="#f33">Uncaught TypeError: Cannot convert a Symbol value to a number</font></p></li><li><p>引用类型通过 Number([value]) 转换为数字</p><ul><li>获取引用类型的 [Symbol.toPrimitive] 属性值</li><li>没有 Symbol.toPrimitive 该属性，则获取当前引用类型的 valueOf 原始值</li><li>如果没有原始值，则将通过 toString 将其转换为字符串，最后将字符串转换为 Number</li></ul></li></ul><h3 id="parseInt-parseFloat-将其它类型数据转换为数字类型"><a href="#parseInt-parseFloat-将其它类型数据转换为数字类型" class="headerlink" title="parseInt/parseFloat 将其它类型数据转换为数字类型"></a>parseInt/parseFloat 将其它类型数据转换为数字类型</h3><blockquote><p>parseFloat([value])/parseInt([value]) 入参 value 必须为字符串数字类型，如果不是浏览器会通过 [value].toString() 隐式转换。<br>转换方式是从字符串左侧第一个字符开始查的有效数字字符，遇到非有效数字停止查找。返回有效数字。如果未找到有效数字，则返回 NaN.</p></blockquote><h3 id="Number-prototype-toFixed-N-保留小数点后几位"><a href="#Number-prototype-toFixed-N-保留小数点后几位" class="headerlink" title="Number.prototype.toFixed([N]) 保留小数点后几位"></a>Number.prototype.toFixed([N]) 保留小数点后几位</h3><h3 id="Number-prototype-toExponential"><a href="#Number-prototype-toExponential" class="headerlink" title="Number.prototype.toExponential"></a>Number.prototype.toExponential</h3><blockquote><p>返回一个以指数表示法表示该数字的字符串</p></blockquote><h3 id="toPrecision"><a href="#toPrecision" class="headerlink" title="toPrecision"></a>toPrecision</h3><h4 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h4><p><code>Symbol([description])</code> description 对 symbol 的描述，可用于调试但不是访问 symbol 本身</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> symbol1 = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">typeof</span> symbol1 <span class="comment">// &quot;symbol1&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong>布尔值（boolean）</strong>，有2个值分别是：true 和 false.</li><li><strong>null</strong>，一个表明 null 值的特殊关键字。 <code>JavaScript 是大小写敏感的，因此 null 与 Null、NULL或变体完全不同</code>。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span>) <span class="comment">// null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Null</span>) <span class="comment">// ReferenceError: Null is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">NULL</span>) <span class="comment">// ReferenceError: NULL is not defined</span></span><br></pre></td></tr></table></figure></li><li><strong>undefined</strong>，和 null 一样是一个特殊的关键字，undefined 表示变量未定义时的属性。</li><li><strong>数字（number）</strong>，整数或浮点数，例如： 42 或者 3.14159。</li><li><strong>字符串（string）</strong>，字符串是一串表示文本值的字符序列，例如：”Howdy” 。</li><li><strong>代表（Symbol）</strong> ( 在 ECMAScript 6 中新添加的类型).。一种实例是唯一且不可改变的数据类型。</li></ul><p>值类型或称基本数据类型，可用 <code>typeof</code> 判断值类型</p><ul><li>undefined<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; typeof undefined</span><br><span class="line">  <span class="string">&#x27;undefined&#x27;</span></span><br></pre></td></tr></table></figure></li><li>null<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; typeof null</span><br><span class="line"><span class="string">&#x27;object&#x27;</span></span><br></pre></td></tr></table></figure></li><li>number、boolean、string<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; typeof undefined</span><br><span class="line"><span class="string">&#x27;undefined&#x27;</span></span><br><span class="line">&gt; typeof 1</span><br><span class="line"><span class="string">&#x27;number&#x27;</span></span><br><span class="line">&gt; typeof <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;string&#x27;</span></span><br><span class="line">&gt; typeof <span class="literal">true</span></span><br><span class="line"><span class="string">&#x27;boolean&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>部分基本类型的包装对象<br>String/Number/Boolean/Object<br>Function,Array,Date,RegExp,Error</p><blockquote><p>引用类型，用 <code>instanceof</code> 判断引用类型</p></blockquote><h2 id="JavaScript-所有数据类型取反运算"><a href="#JavaScript-所有数据类型取反运算" class="headerlink" title="JavaScript 所有数据类型取反运算"></a>JavaScript 所有数据类型取反运算</h2><p><code>Boolean Number String Object Function Array Date RegExp Error Symbol</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">!<span class="literal">null</span> <span class="comment">// true</span></span><br><span class="line">!<span class="literal">undefined</span> <span class="comment">// true</span></span><br><span class="line">!<span class="title class_">NaN</span> <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">!<span class="number">0</span> <span class="comment">// true</span></span><br><span class="line">!<span class="string">&#x27;&#x27;</span> <span class="comment">// true</span></span><br><span class="line">!<span class="literal">false</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>除几上几种取反为 true，其它均为 false。二种情况</br></p><ol><li> 基础数据类型中，数字大于 0，非空字符串，取返回为 true</li><li> 其它可归为对象类型，字面量 [],{} 与基本类型的包装类型以及其它如 Date,Error 返回值都为对象，对对象取反，返回值为 false</li></ol></blockquote><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h2 id="JavaScript-数据类型的-length-属性"><a href="#JavaScript-数据类型的-length-属性" class="headerlink" title="JavaScript 数据类型的 length 属性"></a>JavaScript 数据类型的 length 属性</h2><h3 id="Uncaught-SyntaxError-Invalid-or-unexpected-token"><a href="#Uncaught-SyntaxError-Invalid-or-unexpected-token" class="headerlink" title="Uncaught SyntaxError: Invalid or unexpected token"></a>Uncaught SyntaxError: Invalid or unexpected token</h3><p><code>1.length</code> 基本数据类型，number 没有 length</p><h3 id="Uncaught-SyntaxError-Unexpected-token-‘-’"><a href="#Uncaught-SyntaxError-Unexpected-token-‘-’" class="headerlink" title="Uncaught SyntaxError: Unexpected token ‘.’"></a>Uncaught SyntaxError: Unexpected token ‘.’</h3><p><code>&#123;&#125;.length</code> 把字面量对象赋值给一个变量，再取 length</p><h2 id="JS-输出方案"><a href="#JS-输出方案" class="headerlink" title="JS 输出方案"></a>JS 输出方案</h2><h3 id="浏览器弹窗"><a href="#浏览器弹窗" class="headerlink" title="浏览器弹窗"></a>浏览器弹窗</h3><blockquote><p>一般用于与客户交互，给出一些提示。<span class="custom-box-933">alert 的参数如果不是数字类型会先转换成数字类型再输出</span></p></blockquote><ul><li>alert([content]) </li><li>confirm() </li><li>prompt</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(&#123;&#125;) <span class="comment">//[object, Object]</span></span><br><span class="line"><span class="title function_">alert</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">// 1,2,3</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">BigInt</span>(<span class="number">1</span>)) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><font color="#f33">Uncaught TypeError: Cannot convert a Symbol value to a string</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="title class_">Symbol</span>())</span><br></pre></td></tr></table></figure><h3 id="控制台输出"><a href="#控制台输出" class="headerlink" title="控制台输出"></a>控制台输出</h3><blockquote><p>一般用于开发中开发者调试代码，<span class="custom-box-933">console.log 中，参数是什么类型，控制台输出什么类型</span></p></blockquote><ul><li>console.log</li><li>console.time / console.timeEnd</li><li>console.dir</li><li>console.table</li></ul><h3 id="website-页面输出"><a href="#website-页面输出" class="headerlink" title="website 页面输出"></a>website 页面输出</h3><ul><li>document.write</li><li>[element].innerHTML/innerText</li><li>[input].value</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑</title>
      <link href="/2011/09/21/%E7%94%B5%E8%84%91%E7%A1%AC%E4%BB%B6/"/>
      <url>/2011/09/21/%E7%94%B5%E8%84%91%E7%A1%AC%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>加法器 —— 计算机的前身，计算机科学之父 艾伦图灵 和 约翰·冯·诺依曼 </p></blockquote><h2 id="冯诺依曼体系结构"><a href="#冯诺依曼体系结构" class="headerlink" title="冯诺依曼体系结构"></a>冯诺依曼体系结构</h2><p><img src="/images/grocery/image.png" alt="冯诺依曼体系结构"><br>冯•诺依曼将计算机分为五个部分：输入设备、存储设备、运算器、控制器、输出设备。</p><pre class="mermaid"> flowchart LR 输入设备 内存储器 subgraph CPU     运算器     控制器    控制器 -.->|指令| 运算器 end 输出设备 内存储器 -->|数据| 运算器 运算器 -->|数据| 内存储器 内存储器 -->|数据| 控制器 控制器 -.->|指令| 输入设备 控制器 -.->|指令| 内存储器 控制器 -.->|指令| 输出设备</pre><h2 id="计算机的组成"><a href="#计算机的组成" class="headerlink" title="计算机的组成"></a>计算机的组成</h2><blockquote><p>计算机系统的逻辑结构实现。包括计算机内<strong>数据信号</strong>和<strong>控制信号</strong>的流向及逻辑设计。</p></blockquote><h2 id="电脑硬件"><a href="#电脑硬件" class="headerlink" title="电脑硬件"></a>电脑硬件</h2><blockquote><p>计算机所有物理部件集合。</p></blockquote><pre class="mermaid"> mindmap  root((计算机硬件系统))    外部设备      输入设备</br>外设</br>Input Devices          键盘        鼠标        手写板        触摸屏        扫描仪      输出设备</br>Output Devices        显示器        打印机        绘图仪    存储器      内存          只读存储器<br/>Read Only Memory, ROM        随机存储器<br/>Random Access Memory, RAM      外存<br/>长期存储程序和数据        软盘        硬盘<br/>硬质圆形磁表面存储媒体，存储量大，存储速度快        光盘        U盘    中央处理器<br/>Central Processing Unit        运算器<br/>Arithmetic Unit        控制器<br/>Controller</pre><p><strong>输入设备的作用</strong>是将程序、原始数据、文字、字符、控制命令或现场采集的数据等信息输入计算机。<br>输出设备是用来输出 计算机的中间结果或最后结果、各种数据符号及文字或各种控制信号等信息。</p><h3 id="ROM-与-RAM-的区别"><a href="#ROM-与-RAM-的区别" class="headerlink" title="ROM 与 RAM 的区别"></a>ROM 与 RAM 的区别</h3><table><thead><tr><th>类别</th><th>对信息的修改</th><th>断电后的信息情况</th><th>用途</th></tr></thead><tbody><tr><td>ROM</td><td>只读</td><td>不丢失</td><td>永久存储特殊专用信息</td></tr><tr><td>RAM</td><td>可读、可写</td><td>全部丢失</td><td>存储临时的程序和数据</td></tr></tbody></table><h3 id="必要硬件"><a href="#必要硬件" class="headerlink" title="必要硬件"></a>必要硬件</h3><pre><code>电脑亮机必不可少的硬件: CPU, 主板、内存、电源、显卡</code></pre><blockquote><p>电脑亮机，即显示器有视频输出</p></blockquote><h3 id="重要硬件"><a href="#重要硬件" class="headerlink" title="重要硬件"></a>重要硬件</h3><pre><code>CPU 散热器，硬盘</code></pre><blockquote><p>电脑正常使用的所需要的硬件</p></blockquote><p><font color="#a33"><strong>CPU、显卡、内存、硬盘决定着电脑的性能，主板、电源、散热器是对性能最基本的保障</strong></font></p><h3 id="常用硬件"><a href="#常用硬件" class="headerlink" title="常用硬件"></a>常用硬件</h3><blockquote><p>采集卡、独立网卡、独立声卡是对电脑功能的扩展或者强化</p></blockquote><h3 id="Central-Processing-Unit-CPU"><a href="#Central-Processing-Unit-CPU" class="headerlink" title="Central Processing Unit(CPU)"></a>Central Processing Unit(CPU)</h3><p>中央处理器，是一台电脑的核心。主要负责信息计算处理，在一定范围上控制并管理其他硬件<br>运算器<br>控制器</p><h3 id="个人电脑"><a href="#个人电脑" class="headerlink" title="个人电脑"></a>个人电脑</h3><p>12-inch 12 英寸<br>fourt Thanderbolt 3 ports 四个霹雳3端口</p><h2 id="计算机软件"><a href="#计算机软件" class="headerlink" title="计算机软件"></a>计算机软件</h2><p>软件是<strong>程序</strong>、<strong>数据</strong>、<strong>文档</strong>的集合。</p><pre class="mermaid">mindmap root((计算机软件))  系统软件    操作系统<br/>OS     windows     Linux     MacOS    **各种编译解释软件**<br/>将人类可读、可理解的源代码文本转换为计算机运行的机器指令格式。    数据库系统     关系型数据库        MySQL        SQL Server        Oracle     非关系型数据库        Mongodb  应用软件</pre>]]></content>
      
      
      
        <tags>
            
            <tag> Grocery </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
